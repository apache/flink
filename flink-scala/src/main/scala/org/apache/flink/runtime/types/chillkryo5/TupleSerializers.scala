/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.flink.runtime.types.chillkryo5

import com.esotericsoftware.kryo.kryo5.Kryo
import com.esotericsoftware.kryo.kryo5.Serializer
import com.esotericsoftware.kryo.kryo5.io.{Input, Output}

import java.io.Serializable

// DO NOT EDIT: auto generated by tuple_serializers.scala at: 2013/07/06 12:44:05 -0700
// scala tuple_serializers.scala > ../src/main/scala/com/twitter/chill/TupleSerializers.scala

class Tuple1Serializer[A] extends Serializer[Tuple1[A]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, obj: Tuple1[A]): Unit = {
    kryo.writeClassAndObject(output, obj._1)
    output.flush()
  }

  override def read(kryo: Kryo, input: Input, cls: Class[_ <: Tuple1[A]]): Tuple1[A] =
    new Tuple1[A](kryo.readClassAndObject(input).asInstanceOf[A])
}
class Tuple2Serializer[A, B] extends Serializer[Tuple2[A, B]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, obj: Tuple2[A, B]): Unit = {
    kryo.writeClassAndObject(output, obj._1)
    output.flush()
    kryo.writeClassAndObject(output, obj._2)
    output.flush()
  }
  override def read(kryo: Kryo, input: Input, cls: Class[_ <: Tuple2[A, B]]): Tuple2[A, B] =
    new Tuple2[A, B](
      kryo.readClassAndObject(input).asInstanceOf[A],
      kryo.readClassAndObject(input).asInstanceOf[B])
}
class Tuple3Serializer[A, B, C] extends Serializer[Tuple3[A, B, C]] with Serializable {
  setImmutable(true)
  override def write(kryo: Kryo, output: Output, obj: Tuple3[A, B, C]): Unit = {
    kryo.writeClassAndObject(output, obj._1); output.flush;
    kryo.writeClassAndObject(output, obj._2); output.flush;
    kryo.writeClassAndObject(output, obj._3); output.flush;
  }
  override def read(kryo: Kryo, input: Input, cls: Class[_ <: Tuple3[A, B, C]]): Tuple3[A, B, C] =
    new Tuple3[A, B, C](
      kryo.readClassAndObject(input).asInstanceOf[A],
      kryo.readClassAndObject(input).asInstanceOf[B],
      kryo.readClassAndObject(input).asInstanceOf[C])
}
class Tuple4Serializer[A, B, C, D] extends Serializer[Tuple4[A, B, C, D]] with Serializable {
  setImmutable(true)
  override def write(kser: Kryo, out: Output, obj: Tuple4[A, B, C, D]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple4[A, B, C, D]]): Tuple4[A, B, C, D] =
    new Tuple4[A, B, C, D](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D])
}
class Tuple5Serializer[A, B, C, D, E] extends Serializer[Tuple5[A, B, C, D, E]] with Serializable {
  setImmutable(true)
  override def write(kser: Kryo, out: Output, obj: Tuple5[A, B, C, D, E]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple5[A, B, C, D, E]]): Tuple5[A, B, C, D, E] =
    new Tuple5[A, B, C, D, E](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E])
}
class Tuple6Serializer[A, B, C, D, E, F]
  extends Serializer[Tuple6[A, B, C, D, E, F]]
  with Serializable {
  setImmutable(true)
  override def write(kser: Kryo, out: Output, obj: Tuple6[A, B, C, D, E, F]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple6[A, B, C, D, E, F]]): Tuple6[A, B, C, D, E, F] =
    new Tuple6[A, B, C, D, E, F](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F])
}
class Tuple7Serializer[A, B, C, D, E, F, G]
  extends Serializer[Tuple7[A, B, C, D, E, F, G]]
  with Serializable {
  setImmutable(true)
  override def write(kser: Kryo, out: Output, obj: Tuple7[A, B, C, D, E, F, G]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple7[A, B, C, D, E, F, G]]): Tuple7[A, B, C, D, E, F, G] = {
    new Tuple7[A, B, C, D, E, F, G](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G])
  }
}
class Tuple8Serializer[A, B, C, D, E, F, G, H]
  extends Serializer[Tuple8[A, B, C, D, E, F, G, H]]
  with Serializable {
  setImmutable(true)
  override def write(kser: Kryo, out: Output, obj: Tuple8[A, B, C, D, E, F, G, H]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple8[A, B, C, D, E, F, G, H]]): Tuple8[A, B, C, D, E, F, G, H] = {
    new Tuple8[A, B, C, D, E, F, G, H](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H])
  }
}
class Tuple9Serializer[A, B, C, D, E, F, G, H, I]
  extends Serializer[Tuple9[A, B, C, D, E, F, G, H, I]]
  with Serializable {
  setImmutable(true)
  override def write(kser: Kryo, out: Output, obj: Tuple9[A, B, C, D, E, F, G, H, I]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple9[A, B, C, D, E, F, G, H, I]]): Tuple9[A, B, C, D, E, F, G, H, I] = {
    new Tuple9[A, B, C, D, E, F, G, H, I](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I])
  }
}
class Tuple10Serializer[A, B, C, D, E, F, G, H, I, J]
  extends Serializer[Tuple10[A, B, C, D, E, F, G, H, I, J]]
  with Serializable {
  setImmutable(true)
  override def write(kser: Kryo, out: Output, obj: Tuple10[A, B, C, D, E, F, G, H, I, J]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
  }
  override def read(kser: Kryo, in: Input, cls: Class[_ <: Tuple10[A, B, C, D, E, F, G, H, I, J]])
      : Tuple10[A, B, C, D, E, F, G, H, I, J] = {
    new Tuple10[A, B, C, D, E, F, G, H, I, J](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J])
  }
}
class Tuple11Serializer[A, B, C, D, E, F, G, H, I, J, K]
  extends Serializer[Tuple11[A, B, C, D, E, F, G, H, I, J, K]]
  with Serializable {
  setImmutable(true)
  override def write(
      kser: Kryo,
      out: Output,
      obj: Tuple11[A, B, C, D, E, F, G, H, I, J, K]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
    kser.writeClassAndObject(out, obj._11); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple11[A, B, C, D, E, F, G, H, I, J, K]])
      : Tuple11[A, B, C, D, E, F, G, H, I, J, K] = {
    new Tuple11[A, B, C, D, E, F, G, H, I, J, K](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J],
      kser.readClassAndObject(in).asInstanceOf[K])
  }
}
class Tuple12Serializer[A, B, C, D, E, F, G, H, I, J, K, L]
  extends Serializer[Tuple12[A, B, C, D, E, F, G, H, I, J, K, L]]
  with Serializable {
  setImmutable(true)
  override def write(
      kser: Kryo,
      out: Output,
      obj: Tuple12[A, B, C, D, E, F, G, H, I, J, K, L]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
    kser.writeClassAndObject(out, obj._11); out.flush;
    kser.writeClassAndObject(out, obj._12); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple12[A, B, C, D, E, F, G, H, I, J, K, L]])
      : Tuple12[A, B, C, D, E, F, G, H, I, J, K, L] = {
    new Tuple12[A, B, C, D, E, F, G, H, I, J, K, L](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J],
      kser.readClassAndObject(in).asInstanceOf[K],
      kser.readClassAndObject(in).asInstanceOf[L])
  }
}
class Tuple13Serializer[A, B, C, D, E, F, G, H, I, J, K, L, M]
  extends Serializer[Tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M]]
  with Serializable {
  setImmutable(true)
  override def write(
      kser: Kryo,
      out: Output,
      obj: Tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
    kser.writeClassAndObject(out, obj._11); out.flush;
    kser.writeClassAndObject(out, obj._12); out.flush;
    kser.writeClassAndObject(out, obj._13); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M]])
      : Tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M] = {
    new Tuple13[A, B, C, D, E, F, G, H, I, J, K, L, M](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J],
      kser.readClassAndObject(in).asInstanceOf[K],
      kser.readClassAndObject(in).asInstanceOf[L],
      kser.readClassAndObject(in).asInstanceOf[M])
  }
}
class Tuple14Serializer[A, B, C, D, E, F, G, H, I, J, K, L, M, N]
  extends Serializer[Tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N]]
  with Serializable {
  setImmutable(true)
  override def write(
      kser: Kryo,
      out: Output,
      obj: Tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
    kser.writeClassAndObject(out, obj._11); out.flush;
    kser.writeClassAndObject(out, obj._12); out.flush;
    kser.writeClassAndObject(out, obj._13); out.flush;
    kser.writeClassAndObject(out, obj._14); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N]])
      : Tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N] = {
    new Tuple14[A, B, C, D, E, F, G, H, I, J, K, L, M, N](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J],
      kser.readClassAndObject(in).asInstanceOf[K],
      kser.readClassAndObject(in).asInstanceOf[L],
      kser.readClassAndObject(in).asInstanceOf[M],
      kser.readClassAndObject(in).asInstanceOf[N])
  }
}
class Tuple15Serializer[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]
  extends Serializer[Tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]]
  with Serializable {
  setImmutable(true)
  override def write(
      kser: Kryo,
      out: Output,
      obj: Tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
    kser.writeClassAndObject(out, obj._11); out.flush;
    kser.writeClassAndObject(out, obj._12); out.flush;
    kser.writeClassAndObject(out, obj._13); out.flush;
    kser.writeClassAndObject(out, obj._14); out.flush;
    kser.writeClassAndObject(out, obj._15); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]])
      : Tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O] = {
    new Tuple15[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J],
      kser.readClassAndObject(in).asInstanceOf[K],
      kser.readClassAndObject(in).asInstanceOf[L],
      kser.readClassAndObject(in).asInstanceOf[M],
      kser.readClassAndObject(in).asInstanceOf[N],
      kser.readClassAndObject(in).asInstanceOf[O])
  }
}
class Tuple16Serializer[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]
  extends Serializer[Tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]]
  with Serializable {
  setImmutable(true)
  override def write(
      kser: Kryo,
      out: Output,
      obj: Tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
    kser.writeClassAndObject(out, obj._11); out.flush;
    kser.writeClassAndObject(out, obj._12); out.flush;
    kser.writeClassAndObject(out, obj._13); out.flush;
    kser.writeClassAndObject(out, obj._14); out.flush;
    kser.writeClassAndObject(out, obj._15); out.flush;
    kser.writeClassAndObject(out, obj._16); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]])
      : Tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P] = {
    new Tuple16[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J],
      kser.readClassAndObject(in).asInstanceOf[K],
      kser.readClassAndObject(in).asInstanceOf[L],
      kser.readClassAndObject(in).asInstanceOf[M],
      kser.readClassAndObject(in).asInstanceOf[N],
      kser.readClassAndObject(in).asInstanceOf[O],
      kser.readClassAndObject(in).asInstanceOf[P])
  }
}
class Tuple17Serializer[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]
  extends Serializer[Tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]]
  with Serializable {
  setImmutable(true)
  override def write(
      kser: Kryo,
      out: Output,
      obj: Tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
    kser.writeClassAndObject(out, obj._11); out.flush;
    kser.writeClassAndObject(out, obj._12); out.flush;
    kser.writeClassAndObject(out, obj._13); out.flush;
    kser.writeClassAndObject(out, obj._14); out.flush;
    kser.writeClassAndObject(out, obj._15); out.flush;
    kser.writeClassAndObject(out, obj._16); out.flush;
    kser.writeClassAndObject(out, obj._17); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]])
      : Tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q] = {
    new Tuple17[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J],
      kser.readClassAndObject(in).asInstanceOf[K],
      kser.readClassAndObject(in).asInstanceOf[L],
      kser.readClassAndObject(in).asInstanceOf[M],
      kser.readClassAndObject(in).asInstanceOf[N],
      kser.readClassAndObject(in).asInstanceOf[O],
      kser.readClassAndObject(in).asInstanceOf[P],
      kser.readClassAndObject(in).asInstanceOf[Q])
  }
}
class Tuple18Serializer[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]
  extends Serializer[Tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]]
  with Serializable {
  setImmutable(true)
  override def write(
      kser: Kryo,
      out: Output,
      obj: Tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
    kser.writeClassAndObject(out, obj._11); out.flush;
    kser.writeClassAndObject(out, obj._12); out.flush;
    kser.writeClassAndObject(out, obj._13); out.flush;
    kser.writeClassAndObject(out, obj._14); out.flush;
    kser.writeClassAndObject(out, obj._15); out.flush;
    kser.writeClassAndObject(out, obj._16); out.flush;
    kser.writeClassAndObject(out, obj._17); out.flush;
    kser.writeClassAndObject(out, obj._18); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R]])
      : Tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R] = {
    new Tuple18[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J],
      kser.readClassAndObject(in).asInstanceOf[K],
      kser.readClassAndObject(in).asInstanceOf[L],
      kser.readClassAndObject(in).asInstanceOf[M],
      kser.readClassAndObject(in).asInstanceOf[N],
      kser.readClassAndObject(in).asInstanceOf[O],
      kser.readClassAndObject(in).asInstanceOf[P],
      kser.readClassAndObject(in).asInstanceOf[Q],
      kser.readClassAndObject(in).asInstanceOf[R])
  }
}
class Tuple19Serializer[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]
  extends Serializer[Tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]]
  with Serializable {
  setImmutable(true)
  override def write(
      kser: Kryo,
      out: Output,
      obj: Tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
    kser.writeClassAndObject(out, obj._11); out.flush;
    kser.writeClassAndObject(out, obj._12); out.flush;
    kser.writeClassAndObject(out, obj._13); out.flush;
    kser.writeClassAndObject(out, obj._14); out.flush;
    kser.writeClassAndObject(out, obj._15); out.flush;
    kser.writeClassAndObject(out, obj._16); out.flush;
    kser.writeClassAndObject(out, obj._17); out.flush;
    kser.writeClassAndObject(out, obj._18); out.flush;
    kser.writeClassAndObject(out, obj._19); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S]])
      : Tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S] = {
    new Tuple19[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J],
      kser.readClassAndObject(in).asInstanceOf[K],
      kser.readClassAndObject(in).asInstanceOf[L],
      kser.readClassAndObject(in).asInstanceOf[M],
      kser.readClassAndObject(in).asInstanceOf[N],
      kser.readClassAndObject(in).asInstanceOf[O],
      kser.readClassAndObject(in).asInstanceOf[P],
      kser.readClassAndObject(in).asInstanceOf[Q],
      kser.readClassAndObject(in).asInstanceOf[R],
      kser.readClassAndObject(in).asInstanceOf[S])
  }
}
class Tuple20Serializer[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]
  extends Serializer[Tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]]
  with Serializable {
  setImmutable(true)
  override def write(
      kser: Kryo,
      out: Output,
      obj: Tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
    kser.writeClassAndObject(out, obj._11); out.flush;
    kser.writeClassAndObject(out, obj._12); out.flush;
    kser.writeClassAndObject(out, obj._13); out.flush;
    kser.writeClassAndObject(out, obj._14); out.flush;
    kser.writeClassAndObject(out, obj._15); out.flush;
    kser.writeClassAndObject(out, obj._16); out.flush;
    kser.writeClassAndObject(out, obj._17); out.flush;
    kser.writeClassAndObject(out, obj._18); out.flush;
    kser.writeClassAndObject(out, obj._19); out.flush;
    kser.writeClassAndObject(out, obj._20); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T]])
      : Tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T] = {
    new Tuple20[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J],
      kser.readClassAndObject(in).asInstanceOf[K],
      kser.readClassAndObject(in).asInstanceOf[L],
      kser.readClassAndObject(in).asInstanceOf[M],
      kser.readClassAndObject(in).asInstanceOf[N],
      kser.readClassAndObject(in).asInstanceOf[O],
      kser.readClassAndObject(in).asInstanceOf[P],
      kser.readClassAndObject(in).asInstanceOf[Q],
      kser.readClassAndObject(in).asInstanceOf[R],
      kser.readClassAndObject(in).asInstanceOf[S],
      kser.readClassAndObject(in).asInstanceOf[T])
  }
}
class Tuple21Serializer[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]
  extends Serializer[Tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]]
  with Serializable {
  setImmutable(true)
  override def write(
      kser: Kryo,
      out: Output,
      obj: Tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
    kser.writeClassAndObject(out, obj._11); out.flush;
    kser.writeClassAndObject(out, obj._12); out.flush;
    kser.writeClassAndObject(out, obj._13); out.flush;
    kser.writeClassAndObject(out, obj._14); out.flush;
    kser.writeClassAndObject(out, obj._15); out.flush;
    kser.writeClassAndObject(out, obj._16); out.flush;
    kser.writeClassAndObject(out, obj._17); out.flush;
    kser.writeClassAndObject(out, obj._18); out.flush;
    kser.writeClassAndObject(out, obj._19); out.flush;
    kser.writeClassAndObject(out, obj._20); out.flush;
    kser.writeClassAndObject(out, obj._21); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U]])
      : Tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U] = {
    new Tuple21[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J],
      kser.readClassAndObject(in).asInstanceOf[K],
      kser.readClassAndObject(in).asInstanceOf[L],
      kser.readClassAndObject(in).asInstanceOf[M],
      kser.readClassAndObject(in).asInstanceOf[N],
      kser.readClassAndObject(in).asInstanceOf[O],
      kser.readClassAndObject(in).asInstanceOf[P],
      kser.readClassAndObject(in).asInstanceOf[Q],
      kser.readClassAndObject(in).asInstanceOf[R],
      kser.readClassAndObject(in).asInstanceOf[S],
      kser.readClassAndObject(in).asInstanceOf[T],
      kser.readClassAndObject(in).asInstanceOf[U])
  }
}
class Tuple22Serializer[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]
  extends Serializer[Tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]]
  with Serializable {
  setImmutable(true)
  override def write(
      kser: Kryo,
      out: Output,
      obj: Tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]): Unit = {
    kser.writeClassAndObject(out, obj._1); out.flush;
    kser.writeClassAndObject(out, obj._2); out.flush;
    kser.writeClassAndObject(out, obj._3); out.flush;
    kser.writeClassAndObject(out, obj._4); out.flush;
    kser.writeClassAndObject(out, obj._5); out.flush;
    kser.writeClassAndObject(out, obj._6); out.flush;
    kser.writeClassAndObject(out, obj._7); out.flush;
    kser.writeClassAndObject(out, obj._8); out.flush;
    kser.writeClassAndObject(out, obj._9); out.flush;
    kser.writeClassAndObject(out, obj._10); out.flush;
    kser.writeClassAndObject(out, obj._11); out.flush;
    kser.writeClassAndObject(out, obj._12); out.flush;
    kser.writeClassAndObject(out, obj._13); out.flush;
    kser.writeClassAndObject(out, obj._14); out.flush;
    kser.writeClassAndObject(out, obj._15); out.flush;
    kser.writeClassAndObject(out, obj._16); out.flush;
    kser.writeClassAndObject(out, obj._17); out.flush;
    kser.writeClassAndObject(out, obj._18); out.flush;
    kser.writeClassAndObject(out, obj._19); out.flush;
    kser.writeClassAndObject(out, obj._20); out.flush;
    kser.writeClassAndObject(out, obj._21); out.flush;
    kser.writeClassAndObject(out, obj._22); out.flush;
  }
  override def read(
      kser: Kryo,
      in: Input,
      cls: Class[_ <: Tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V]])
      : Tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V] = {
    new Tuple22[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V](
      kser.readClassAndObject(in).asInstanceOf[A],
      kser.readClassAndObject(in).asInstanceOf[B],
      kser.readClassAndObject(in).asInstanceOf[C],
      kser.readClassAndObject(in).asInstanceOf[D],
      kser.readClassAndObject(in).asInstanceOf[E],
      kser.readClassAndObject(in).asInstanceOf[F],
      kser.readClassAndObject(in).asInstanceOf[G],
      kser.readClassAndObject(in).asInstanceOf[H],
      kser.readClassAndObject(in).asInstanceOf[I],
      kser.readClassAndObject(in).asInstanceOf[J],
      kser.readClassAndObject(in).asInstanceOf[K],
      kser.readClassAndObject(in).asInstanceOf[L],
      kser.readClassAndObject(in).asInstanceOf[M],
      kser.readClassAndObject(in).asInstanceOf[N],
      kser.readClassAndObject(in).asInstanceOf[O],
      kser.readClassAndObject(in).asInstanceOf[P],
      kser.readClassAndObject(in).asInstanceOf[Q],
      kser.readClassAndObject(in).asInstanceOf[R],
      kser.readClassAndObject(in).asInstanceOf[S],
      kser.readClassAndObject(in).asInstanceOf[T],
      kser.readClassAndObject(in).asInstanceOf[U],
      kser.readClassAndObject(in).asInstanceOf[V])
  }
}

class Tuple1LongSerializer extends Serializer[Tuple1[Long]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, tup: Tuple1[Long]): Unit = {
    output.writeLong(tup._1)
  }

  override def read(kryo: Kryo, input: Input, cls: Class[_ <: Tuple1[Long]]): Tuple1[Long] = {
    new Tuple1[Long](input.readLong)
  }
}

class Tuple1IntSerializer extends Serializer[Tuple1[Int]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, tup: Tuple1[Int]): Unit = {
    output.writeInt(tup._1)
  }

  override def read(kryo: Kryo, input: Input, cls: Class[_ <: Tuple1[Int]]): Tuple1[Int] = {
    new Tuple1[Int](input.readInt)
  }
}

class Tuple1DoubleSerializer extends Serializer[Tuple1[Double]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, tup: Tuple1[Double]): Unit = {
    output.writeDouble(tup._1)
  }

  override def read(kryo: Kryo, input: Input, cls: Class[_ <: Tuple1[Double]]): Tuple1[Double] = {
    new Tuple1[Double](input.readDouble)
  }
}

class Tuple2LongLongSerializer extends Serializer[Tuple2[Long, Long]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, tup: Tuple2[Long, Long]): Unit = {
    output.writeLong(tup._1)
    output.writeLong(tup._2)
  }

  override def read(
      kryo: Kryo,
      input: Input,
      cls: Class[_ <: Tuple2[Long, Long]]): Tuple2[Long, Long] = {
    new Tuple2[Long, Long](input.readLong, input.readLong)
  }
}

class Tuple2LongIntSerializer extends Serializer[Tuple2[Long, Int]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, tup: Tuple2[Long, Int]): Unit = {
    output.writeLong(tup._1)
    output.writeInt(tup._2)
  }

  override def read(
      kryo: Kryo,
      input: Input,
      cls: Class[_ <: Tuple2[Long, Int]]): Tuple2[Long, Int] = {
    new Tuple2[Long, Int](input.readLong, input.readInt)
  }
}

class Tuple2LongDoubleSerializer extends Serializer[Tuple2[Long, Double]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, tup: Tuple2[Long, Double]): Unit = {
    output.writeLong(tup._1)
    output.writeDouble(tup._2)
  }

  override def read(
      kryo: Kryo,
      input: Input,
      cls: Class[_ <: Tuple2[Long, Double]]): Tuple2[Long, Double] = {
    new Tuple2[Long, Double](input.readLong, input.readDouble)
  }
}

class Tuple2IntLongSerializer extends Serializer[Tuple2[Int, Long]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, tup: Tuple2[Int, Long]): Unit = {
    output.writeInt(tup._1)
    output.writeLong(tup._2)
  }

  override def read(
      kryo: Kryo,
      input: Input,
      cls: Class[_ <: Tuple2[Int, Long]]): Tuple2[Int, Long] = {
    new Tuple2[Int, Long](input.readInt, input.readLong)
  }
}

class Tuple2IntIntSerializer extends Serializer[Tuple2[Int, Int]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, tup: Tuple2[Int, Int]): Unit = {
    output.writeInt(tup._1)
    output.writeInt(tup._2)
  }

  override def read(
      kryo: Kryo,
      input: Input,
      cls: Class[_ <: Tuple2[Int, Int]]): Tuple2[Int, Int] = {
    new Tuple2[Int, Int](input.readInt, input.readInt)
  }
}

class Tuple2IntDoubleSerializer extends Serializer[Tuple2[Int, Double]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, tup: Tuple2[Int, Double]): Unit = {
    output.writeInt(tup._1)
    output.writeDouble(tup._2)
  }

  override def read(
      kryo: Kryo,
      input: Input,
      cls: Class[_ <: Tuple2[Int, Double]]): Tuple2[Int, Double] = {
    new Tuple2[Int, Double](input.readInt, input.readDouble)
  }
}

class Tuple2DoubleLongSerializer extends Serializer[Tuple2[Double, Long]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, tup: Tuple2[Double, Long]): Unit = {
    output.writeDouble(tup._1)
    output.writeLong(tup._2)
  }

  override def read(
      kryo: Kryo,
      input: Input,
      cls: Class[_ <: Tuple2[Double, Long]]): Tuple2[Double, Long] = {
    new Tuple2[Double, Long](input.readDouble, input.readLong)
  }
}

class Tuple2DoubleIntSerializer extends Serializer[Tuple2[Double, Int]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, tup: Tuple2[Double, Int]): Unit = {
    output.writeDouble(tup._1)
    output.writeInt(tup._2)
  }

  override def read(
      kryo: Kryo,
      input: Input,
      cls: Class[_ <: Tuple2[Double, Int]]): Tuple2[Double, Int] = {
    new Tuple2[Double, Int](input.readDouble, input.readInt)
  }
}

class Tuple2DoubleDoubleSerializer extends Serializer[Tuple2[Double, Double]] with Serializable {
  setImmutable(true)

  override def write(kryo: Kryo, output: Output, tup: Tuple2[Double, Double]): Unit = {
    output.writeDouble(tup._1)
    output.writeDouble(tup._2)
  }

  override def read(
      kryo: Kryo,
      input: Input,
      cls: Class[_ <: Tuple2[Double, Double]]): Tuple2[Double, Double] = {
    new Tuple2[Double, Double](input.readDouble, input.readDouble)
  }
}

object ScalaTupleKryo5Serialization extends Serializable {
  def register: IKryo5Registrar = new IKryo5Registrar {
    def apply(newK: Kryo) {

      newK.register(classOf[Tuple1[Any]], new Tuple1Serializer[Any])
      newK.register(classOf[Tuple2[Any, Any]], new Tuple2Serializer[Any, Any])
      newK.register(classOf[Tuple3[Any, Any, Any]], new Tuple3Serializer[Any, Any, Any])
      newK.register(classOf[Tuple4[Any, Any, Any, Any]], new Tuple4Serializer[Any, Any, Any, Any])
      newK.register(
        classOf[Tuple5[Any, Any, Any, Any, Any]],
        new Tuple5Serializer[Any, Any, Any, Any, Any])
      newK.register(
        classOf[Tuple6[Any, Any, Any, Any, Any, Any]],
        new Tuple6Serializer[Any, Any, Any, Any, Any, Any])
      newK.register(
        classOf[Tuple7[Any, Any, Any, Any, Any, Any, Any]],
        new Tuple7Serializer[Any, Any, Any, Any, Any, Any, Any])
      newK.register(
        classOf[Tuple8[Any, Any, Any, Any, Any, Any, Any, Any]],
        new Tuple8Serializer[Any, Any, Any, Any, Any, Any, Any, Any])
      newK.register(
        classOf[Tuple9[Any, Any, Any, Any, Any, Any, Any, Any, Any]],
        new Tuple9Serializer[Any, Any, Any, Any, Any, Any, Any, Any, Any])
      newK.register(
        classOf[Tuple10[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]],
        new Tuple10Serializer[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any])
      newK.register(
        classOf[Tuple11[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]],
        new Tuple11Serializer[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any])
      newK.register(
        classOf[Tuple12[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]],
        new Tuple12Serializer[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any])
      newK.register(
        classOf[Tuple13[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]],
        new Tuple13Serializer[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any])
      newK.register(
        classOf[Tuple14[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]],
        new Tuple14Serializer[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]
      )
      newK.register(
        classOf[Tuple15[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]],
        new Tuple15Serializer[
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any]
      )
      newK.register(
        classOf[
          Tuple16[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]],
        new Tuple16Serializer[
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any]
      )
      newK.register(
        classOf[
          Tuple17[
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any]],
        new Tuple17Serializer[
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any]
      )
      newK.register(
        classOf[
          Tuple18[
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any]],
        new Tuple18Serializer[
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any]
      )
      newK.register(
        classOf[
          Tuple19[
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any]],
        new Tuple19Serializer[
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any]
      )
      newK.register(
        classOf[
          Tuple20[
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any]],
        new Tuple20Serializer[
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any]
      )
      newK.register(
        classOf[
          Tuple21[
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any]],
        new Tuple21Serializer[
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any]
      )
      newK.register(
        classOf[
          Tuple22[
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any,
            Any]],
        new Tuple22Serializer[
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any,
          Any]
      )

      // The Kryo v2 branch of this code registered these specialized serializers for
      // Tuple1 and and Tuple2 with primitive Scala types. These cause problems with the
      // Kryo v5 branch.
      // When Java code tries to serialize a scala Tuple2[Object, Object], the Kryo v5
      // framework somehow picks Tuple2DoubleDoubleSerializer, and results in runtime
      // errors. Without these custom serializers, the Kryo framework automatically works.
      // So, these are being commented out for now.
//      newK.register(classOf[Tuple1[Long]], new Tuple1LongSerializer)
//      newK.register(classOf[Tuple1[Int]], new Tuple1IntSerializer)
//      newK.register(classOf[Tuple1[Double]], new Tuple1DoubleSerializer)
//      newK.register(classOf[Tuple2[Long, Long]], new Tuple2LongLongSerializer)
//      newK.register(classOf[Tuple2[Long, Int]], new Tuple2LongIntSerializer)
//      newK.register(classOf[Tuple2[Long, Double]], new Tuple2LongDoubleSerializer)
//      newK.register(classOf[Tuple2[Int, Long]], new Tuple2IntLongSerializer)
//      newK.register(classOf[Tuple2[Int, Int]], new Tuple2IntIntSerializer)
//      newK.register(classOf[Tuple2[Int, Double]], new Tuple2IntDoubleSerializer)
//      newK.register(classOf[Tuple2[Double, Long]], new Tuple2DoubleLongSerializer)
//      newK.register(classOf[Tuple2[Double, Int]], new Tuple2DoubleIntSerializer)
//      newK.register(classOf[Tuple2[Double, Double]], new Tuple2DoubleDoubleSerializer)
    }
  }
}
