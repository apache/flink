/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.flink.tests.util.util;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.List;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Collection of file-related utilities.
 */
public class FileUtils {

	/**
	 * Matches the given {@link Pattern} against all lines in the given file, and replaces all matches with the replacement
	 * generated by the given {@link Function}.
	 * All unmatched lines and provided replacements are written into the file, with the order corresponding to the
	 * original content. Newlines are automatically added to each line; this implies that an empty replacement string
	 * will result in an empty line to be written.
	 */
	public static void replace(Path file, Pattern pattern, Function<Matcher, String> replacer) throws IOException {
		final List<String> fileLines = Files.readAllLines(file);
		try (PrintWriter pw = new PrintWriter(new OutputStreamWriter(Files.newOutputStream(file, StandardOpenOption.TRUNCATE_EXISTING), StandardCharsets.UTF_8.name()))) {
			for (String fileLine : fileLines) {
				Matcher matcher = pattern.matcher(fileLine);
				if (matcher.matches()) {
					String replacement = replacer.apply(matcher);
					pw.println(replacement);
				} else {
					pw.println(fileLine);
				}
			}
		}
	}
}
