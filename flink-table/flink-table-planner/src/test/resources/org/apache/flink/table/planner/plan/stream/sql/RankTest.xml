<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testCorrelateSortToRank">
    <Resource name="sql">
      <![CDATA[
SELECT a, b
FROM
  (SELECT DISTINCT a FROM MyTable) T1,
  LATERAL (
    SELECT b, c
    FROM MyTable
    WHERE a = T1.a
    ORDER BY c
    DESC LIMIT 3
  )
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{0}])
   :- LogicalAggregate(group=[{0}])
   :  +- LogicalProject(a=[$0])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalSort(sort0=[$1], dir0=[DESC-nulls-last], fetch=[3])
      +- LogicalProject(b=[$1], c=[$2])
         +- LogicalFilter(condition=[=($0, $cor0.a)])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=3], partitionBy=[a], orderBy=[c DESC], select=[a, b, c])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testCorrelateSortToRankWithMultipleGroupKeys">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM
  (SELECT DISTINCT a, b FROM T) T1,
  LATERAL (
    SELECT c, d
    FROM T
    WHERE a = T1.a and b = T1.b
    ORDER BY d
    DESC LIMIT 3
  )
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{0, 1}])
   :- LogicalAggregate(group=[{0, 1}])
   :  +- LogicalProject(a=[$0], b=[$1])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
   +- LogicalSort(sort0=[$1], dir0=[DESC-nulls-last], fetch=[3])
      +- LogicalProject(c=[$2], d=[$3])
         +- LogicalFilter(condition=[AND(=($0, $cor0.a), =($1, $cor0.b))])
            +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=3], partitionBy=[a, b], orderBy=[d DESC], select=[a, b, c, d])
   +- Exchange(distribution=[hash[a, b]])
      +- Calc(select=[a, b, c, d])
         +- DataStreamScan(table=[[default_catalog, default_database, T]], fields=[a, b, c, d, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testCreateViewWithRowNumber">
    <Resource name="sql">
      <![CDATA[insert into sink select name, eat, cnt
from view2 where row_num <= 3]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.sink], fields=[name, eat, cnt])
+- LogicalProject(name=[$0], eat=[$1], cnt=[$2])
   +- LogicalFilter(condition=[<=($3, 3)])
      +- LogicalProject(name=[$0], eat=[$1], cnt=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
         +- LogicalAggregate(group=[{0, 1}], cnt=[SUM($2)])
            +- LogicalTableScan(table=[[default_catalog, default_database, test_source]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.sink], fields=[name, eat, cnt])
+- Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=3], partitionBy=[name], orderBy=[cnt DESC], select=[name, eat, cnt])
   +- Exchange(distribution=[hash[name]])
      +- GroupAggregate(groupBy=[name, eat], select=[name, eat, SUM(age) AS cnt])
         +- Exchange(distribution=[hash[name, eat]])
            +- TableSourceScan(table=[[default_catalog, default_database, test_source]], fields=[name, eat, age])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNestedTopN">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, count_c,
    ROW_NUMBER() OVER (ORDER BY count_c DESC) as rank_num
  FROM (
SELECT *
FROM (
  SELECT a, b, count_c,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY count_c DESC) AS row_num
  FROM (
SELECT a, b, COUNT(*) as count_c
FROM (
SELECT *, 'cn' as cn
FROM MyTable
)
GROUP BY a, b, cn
      ))
WHERE row_num <= 10
      ))
WHERE rank_num <= 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], count_c=[$2], rank_num=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], count_c=[$2], rank_num=[ROW_NUMBER() OVER (ORDER BY $2 DESC NULLS LAST)])
      +- LogicalProject(a=[$0], b=[$1], count_c=[$2], row_num=[$3])
         +- LogicalFilter(condition=[<=($3, 10)])
            +- LogicalProject(a=[$0], b=[$1], count_c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
               +- LogicalProject(a=[$0], b=[$1], count_c=[$3])
                  +- LogicalAggregate(group=[{0, 1, 2}], count_c=[COUNT()])
                     +- LogicalProject(a=[$0], b=[$1], cn=[$5])
                        +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], cn=[_UTF-16LE'cn'])
                           +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[a, b, count_c, w0$o0_0 AS w0$o0], changelogMode=[I,UA,D])
+- Rank(strategy=[UpdateFastStrategy[0,1]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[], orderBy=[count_c DESC], select=[a, b, count_c, w0$o0, w0$o0_0], changelogMode=[I,UA,D])
   +- Exchange(distribution=[single], changelogMode=[I,UA,D])
      +- Rank(strategy=[UpdateFastStrategy[0,1]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a], orderBy=[count_c DESC], select=[a, b, count_c, w0$o0], changelogMode=[I,UA,D])
         +- Exchange(distribution=[hash[a]], changelogMode=[I,UA])
            +- GroupAggregate(groupBy=[a, b], select=[a, b, COUNT(*) AS count_c], changelogMode=[I,UA])
               +- Exchange(distribution=[hash[a, b]], changelogMode=[I])
                  +- Calc(select=[a, b], changelogMode=[I])
                     +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRankEndLessThan1">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, c,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY b DESC) as row_num
  FROM MyTable)
WHERE row_num <= 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c, 1 AS w0$o0])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[b DESC], select=[a, b, c])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRankFunctionInMiddle">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM (
 SELECT a, RANK() OVER (PARTITION BY a ORDER BY a) rk, b, c FROM MyTable) t
WHERE rk < 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], rk=[$1], b=[$2], c=[$3])
+- LogicalFilter(condition=[<($1, 10)])
   +- LogicalProject(a=[$0], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST)], b=[$1], c=[$2])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, rk, b, c])
+- Rank(strategy=[AppendFastStrategy], rankType=[RANK], rankRange=[rankStart=1, rankEnd=9], partitionBy=[a], orderBy=[a ASC], select=[a, b, c, rk])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRankOutputLostUpsertKeyWithSinkPk">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalSink(table=[default_catalog.default_database.sink], fields=[a, c, rn])
+- LogicalProject(a=[$0], c=[$2], rn=[$5])
   +- LogicalFilter(condition=[<=($5, 100)])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rn=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST)])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

== Optimized Physical Plan ==
Sink(table=[default_catalog.default_database.sink], fields=[a, c, w0$o0], upsertMaterialize=[true], changelogMode=[NONE])
+- Calc(select=[a, c, w0$o0], changelogMode=[I,UB,UA,D])
   +- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=100], partitionBy=[b], orderBy=[c DESC], select=[a, b, c, w0$o0], changelogMode=[I,UB,UA,D])
      +- Exchange(distribution=[hash[b]], changelogMode=[I])
         +- Calc(select=[a, b, c], changelogMode=[I])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
Sink(table=[default_catalog.default_database.sink], fields=[a, c, w0$o0], upsertMaterialize=[true])
+- Calc(select=[a, c, w0$o0])
   +- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=100], partitionBy=[b], orderBy=[c DESC], select=[a, b, c, w0$o0])
      +- Exchange(distribution=[hash[b]])
         +- Calc(select=[a, b, c])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRankOutputUpsertKeyInSinkPk">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalSink(table=[default_catalog.default_database.sink], fields=[a, b, c])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalFilter(condition=[<=($5, 100)])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rn=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

== Optimized Physical Plan ==
Sink(table=[default_catalog.default_database.sink], fields=[a, b, c], upsertMaterialize=[true], changelogMode=[NONE])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=100], partitionBy=[a], orderBy=[c DESC], select=[a, b, c], changelogMode=[I,UB,UA,D])
   +- Exchange(distribution=[hash[a]], changelogMode=[I])
      +- Calc(select=[a, b, c], changelogMode=[I])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
Sink(table=[default_catalog.default_database.sink], fields=[a, b, c], upsertMaterialize=[true])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=100], partitionBy=[a], orderBy=[c DESC], select=[a, b, c])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRankOutputUpsertKeyNotMatchSinkPk">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalSink(table=[default_catalog.default_database.sink], fields=[a, b, c])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalFilter(condition=[<=($5, 100)])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rn=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST)])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

== Optimized Physical Plan ==
Sink(table=[default_catalog.default_database.sink], fields=[a, b, c], upsertMaterialize=[true], changelogMode=[NONE])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=100], partitionBy=[b], orderBy=[c DESC], select=[a, b, c], changelogMode=[I,UB,UA,D])
   +- Exchange(distribution=[hash[b]], changelogMode=[I])
      +- Calc(select=[a, b, c], changelogMode=[I])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
Sink(table=[default_catalog.default_database.sink], fields=[a, b, c], upsertMaterialize=[true])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=100], partitionBy=[b], orderBy=[c DESC], select=[a, b, c])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[a, b, c])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRankWithAnotherRankAsInput">
    <Resource name="sql">
      <![CDATA[
SELECT CAST(rna AS INT) AS rn1, CAST(rnb AS INT) AS rn2 FROM (
  SELECT *, row_number() over (partition by a order by b desc) AS rnb
  FROM (
    SELECT *, row_number() over (partition by a, c order by b desc) AS rna
    FROM MyTable
  )
  WHERE rna <= 100
)
WHERE rnb <= 200
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(rn1=[CAST($5):INTEGER NOT NULL], rn2=[CAST($6):INTEGER NOT NULL])
+- LogicalFilter(condition=[<=($6, 200)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rna=[$5], rnb=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST)])
      +- LogicalFilter(condition=[<=($5, 100)])
         +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rna=[ROW_NUMBER() OVER (PARTITION BY $0, $2 ORDER BY $1 DESC NULLS LAST)])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[CAST(w0$o0 AS INTEGER) AS rn1, CAST(w0$o0_0 AS INTEGER) AS rn2])
+- Rank(strategy=[UpdateFastStrategy[0,2,3]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=200], partitionBy=[a], orderBy=[b DESC], select=[a, b, c, w0$o0, w0$o0_0])
   +- Exchange(distribution=[hash[a]])
      +- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=100], partitionBy=[a, c], orderBy=[b DESC], select=[a, b, c, w0$o0])
         +- Exchange(distribution=[hash[a, c]])
            +- Calc(select=[a, b, c])
               +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRankWithRankEndLessThan1OrderByProctimeAsc">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT a, b, c, proctime,
       RANK() OVER (PARTITION BY a ORDER BY proctime ASC) as rk
  FROM MyTable)
WHERE rk <= 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $3 NULLS FIRST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c])
+- Rank(strategy=[AppendFastStrategy], rankType=[RANK], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[proctime ASC], select=[a, b, c, proctime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c, proctime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRankWithRankEndLessThan1OrderByProctimeDesc">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT a, b, c, proctime,
       RANK() OVER (PARTITION BY a ORDER BY proctime DESC) as rk
  FROM MyTable)
WHERE rk <= 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c])
+- Rank(strategy=[AppendFastStrategy], rankType=[RANK], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[proctime DESC], select=[a, b, c, proctime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c, proctime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRedundantRankNumberColumnRemove">
    <Resource name="sql">
      <![CDATA[
SELECT
  CONCAT('http://txmov2.a.yximgs.com', uri) AS url,
  reqcount AS download_count,
  start_time AS `timestamp`
FROM
  (
    SELECT
      uri,
      reqcount,
      rownum_2,
      start_time
    FROM
      (
        SELECT
          uri,
          reqcount,
          start_time,
          ROW_NUMBER() OVER (
            PARTITION BY start_time
            ORDER BY
              reqcount DESC
          ) AS rownum_2
        FROM
          (
            SELECT
            uri,
            reqcount,
            start_time,
            ROW_NUMBER() OVER (
                PARTITION BY start_time, bucket_id
                ORDER BY
                reqcount DESC
            ) AS rownum_1
            FROM MyTable1
          )
        WHERE
          rownum_1 <= 100000
      )
    WHERE
      rownum_2 <= 100000
  )
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(url=[CONCAT(_UTF-16LE'http://txmov2.a.yximgs.com', $0)], download_count=[$1], timestamp=[$3])
+- LogicalProject(uri=[$0], reqcount=[$1], rownum_2=[$3], start_time=[$2])
   +- LogicalFilter(condition=[<=($3, 100000)])
      +- LogicalProject(uri=[$0], reqcount=[$1], start_time=[$2], rownum_2=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY $1 DESC NULLS LAST)])
         +- LogicalFilter(condition=[<=($3, 100000)])
            +- LogicalProject(uri=[$0], reqcount=[$1], start_time=[$2], rownum_1=[ROW_NUMBER() OVER (PARTITION BY $2, $3 ORDER BY $1 DESC NULLS LAST)])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[CONCAT('http://txmov2.a.yximgs.com', uri) AS url, reqcount AS download_count, start_time AS timestamp])
+- Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=100000], partitionBy=[start_time], orderBy=[reqcount DESC], select=[uri, reqcount, start_time])
   +- Exchange(distribution=[hash[start_time]])
      +- Calc(select=[uri, reqcount, start_time])
         +- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=100000], partitionBy=[start_time, bucket_id], orderBy=[reqcount DESC], select=[uri, reqcount, start_time, bucket_id])
            +- Exchange(distribution=[hash[start_time, bucket_id]])
               +- DataStreamScan(table=[[default_catalog, default_database, MyTable1]], fields=[uri, reqcount, start_time, bucket_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowNumberWithRankEndLessThan1OrderByProctimeAsc">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT a, b, c, proctime,
       ROW_NUMBER() OVER (PARTITION BY a ORDER BY proctime ASC) as row_num
  FROM MyTable)
WHERE row_num <= 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 NULLS FIRST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c])
+- Deduplicate(keep=[FirstRow], key=[a], order=[PROCTIME])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c, proctime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowNumberWithRankEndLessThan1OrderByProctimeDesc">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT a, b, c, proctime,
       ROW_NUMBER() OVER (PARTITION BY a ORDER BY proctime DESC) as row_num
  FROM MyTable)
WHERE row_num <= 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c])
+- Deduplicate(keep=[LastRow], key=[a], order=[PROCTIME])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c, proctime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowNumberWithRankEndLessThan1OrderByRowtimeAsc">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT a, b, c, rowtime,
       ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime ASC) as row_num
  FROM MyTable)
WHERE row_num <= 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], rowtime=[$4], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 NULLS FIRST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c])
+- Deduplicate(keep=[FirstRow], key=[a], order=[ROWTIME])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c, rowtime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowNumberWithRankEndLessThan1OrderByRowtimeDesc">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT a, b, c, rowtime,
       ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime DESC) as row_num
  FROM MyTable)
WHERE row_num <= 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], rowtime=[$4], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c])
+- Deduplicate(keep=[LastRow], key=[a], order=[ROWTIME])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c, rowtime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopN">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, c,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY b DESC) as row_num
  FROM MyTable)
WHERE row_num <= 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a], orderBy=[b DESC], select=[a, b, c, w0$o0], changelogMode=[I,UA,D])
+- Exchange(distribution=[hash[a]], changelogMode=[I])
   +- Calc(select=[a, b, c], changelogMode=[I])
      +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopN2">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, c,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY b DESC) as row_num
  FROM MyTable)
WHERE 10 >= row_num
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[$3])
+- LogicalFilter(condition=[>=(10, $3)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a], orderBy=[b DESC], select=[a, b, c, w0$o0], changelogMode=[I,UA,D])
+- Exchange(distribution=[hash[a]], changelogMode=[I])
   +- Calc(select=[a, b, c], changelogMode=[I])
      +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderByCountAndOtherField">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, count_c,
      ROW_NUMBER() OVER (PARTITION BY b ORDER BY count_c DESC, a ASC) AS row_num
  FROM (
SELECT a, b, COUNT(*) AS count_c
FROM MyTable
GROUP BY a, b
      ))
WHERE row_num <= 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], count_c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], count_c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST, $0 NULLS FIRST)])
      +- LogicalAggregate(group=[{0, 1}], count_c=[COUNT()])
         +- LogicalProject(a=[$0], b=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Rank(strategy=[UpdateFastStrategy[0,1]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[b], orderBy=[count_c DESC, a ASC], select=[a, b, count_c, w0$o0], changelogMode=[I,UA,D])
+- Exchange(distribution=[hash[b]], changelogMode=[I,UA])
   +- GroupAggregate(groupBy=[a, b], select=[a, b, COUNT(*) AS count_c], changelogMode=[I,UA])
      +- Exchange(distribution=[hash[a, b]], changelogMode=[I])
         +- Calc(select=[a, b], changelogMode=[I])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNAfterAgg">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, sum_c,
      ROW_NUMBER() OVER (PARTITION BY b ORDER BY sum_c DESC) as row_num
  FROM (
SELECT a, b, SUM(c) as sum_c
FROM MyTable
GROUP BY a, b
      ))
WHERE row_num <= 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST)])
      +- LogicalAggregate(group=[{0, 1}], sum_c=[SUM($2)])
         +- LogicalProject(a=[$0], b=[$1], c=[$2])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[b], orderBy=[sum_c DESC], select=[a, b, sum_c, w0$o0], changelogMode=[I,UA,D])
+- Exchange(distribution=[hash[b]], changelogMode=[I,UB,UA])
   +- GroupAggregate(groupBy=[a, b], select=[a, b, SUM(c) AS sum_c], changelogMode=[I,UB,UA])
      +- Exchange(distribution=[hash[a, b]], changelogMode=[I])
         +- Calc(select=[a, b, c], changelogMode=[I])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUpdatableRankAfterLookupJoin">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT name, ids,
      ROW_NUMBER() OVER (PARTITION BY name ORDER BY ids DESC) as rank_num
  FROM (
     SELECT name, SUM(id) FILTER (WHERE id > 0) as ids
     FROM V1
     GROUP BY name
  ))
WHERE rank_num <= 3
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(name=[$0], ids=[$1], rank_num=[$2])
+- LogicalFilter(condition=[<=($2, 3)])
   +- LogicalProject(name=[$0], ids=[$1], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST)])
      +- LogicalAggregate(group=[{0}], ids=[SUM($1) FILTER $2])
         +- LogicalProject(name=[$6], id=[$5], $f2=[IS TRUE(>($5, 0))])
            +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], id=[$5], name=[$6], age=[$7])
               +- LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{0, 3}])
                  :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
                  +- LogicalFilter(condition=[=($cor1.a, $0)])
                     +- LogicalSnapshot(period=[$cor1.proctime])
                        +- LogicalTableScan(table=[[default_catalog, default_database, LookupTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Rank(strategy=[UpdateFastStrategy[0]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=3], partitionBy=[name], orderBy=[ids DESC], select=[name, ids, w0$o0])
+- Exchange(distribution=[hash[name]])
   +- GroupAggregate(groupBy=[name], select=[name, SUM(id) FILTER $f2 AS ids])
      +- Exchange(distribution=[hash[name]])
         +- Calc(select=[name, id, IS TRUE(>(id, 0)) AS $f2])
            +- LookupJoin(table=[default_catalog.default_database.LookupTable], joinType=[InnerJoin], lookup=[id=a], select=[a, id, name])
               +- Calc(select=[a])
                  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderByCount">
    <Resource name="sql">
      <![CDATA[
SELECT max(a) FROM (
SELECT *
FROM (
  SELECT a, b, count_c,
      ROW_NUMBER() OVER (PARTITION BY b ORDER BY count_c DESC) as row_num
  FROM (
SELECT a, b, COUNT(*) as count_c
FROM MyTable
GROUP BY a, b
      ))
WHERE row_num <= 10
      )
       ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
+- LogicalProject(a=[$0])
   +- LogicalProject(a=[$0], b=[$1], count_c=[$2], row_num=[$3])
      +- LogicalFilter(condition=[<=($3, 10)])
         +- LogicalProject(a=[$0], b=[$1], count_c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST)])
            +- LogicalAggregate(group=[{0, 1}], count_c=[COUNT()])
               +- LogicalProject(a=[$0], b=[$1])
                  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
GroupAggregate(select=[MAX_RETRACT(a) AS EXPR$0], changelogMode=[I,UA,D])
+- Exchange(distribution=[single], changelogMode=[I,UB,UA,D])
   +- Calc(select=[a], changelogMode=[I,UB,UA,D])
      +- Rank(strategy=[UpdateFastStrategy[0,1]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[b], orderBy=[count_c DESC], select=[a, b, count_c], changelogMode=[I,UB,UA,D])
         +- Exchange(distribution=[hash[b]], changelogMode=[I,UA])
            +- GroupAggregate(groupBy=[a, b], select=[a, b, COUNT(*) AS count_c], changelogMode=[I,UA])
               +- Exchange(distribution=[hash[a, b]], changelogMode=[I])
                  +- Calc(select=[a, b], changelogMode=[I])
                     +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderBySumWithCaseWhen">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, sum_c,
      ROW_NUMBER() OVER (PARTITION BY b ORDER BY sum_c DESC) AS row_num
  FROM (
SELECT a, b, SUM(CASE WHEN c > 10 THEN 1 WHEN c < 0 THEN 0 ELSE null END) AS sum_c
FROM MyTable
GROUP BY a, b
      ))
WHERE row_num <= 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST)])
      +- LogicalAggregate(group=[{0, 1}], sum_c=[SUM($2)])
         +- LogicalProject(a=[$0], b=[$1], $f2=[CASE(>($2, 10), 1, <($2, 0), 0, null:INTEGER)])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Rank(strategy=[UpdateFastStrategy[0,1]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[b], orderBy=[sum_c DESC], select=[a, b, sum_c, w0$o0])
+- Exchange(distribution=[hash[b]])
   +- GroupAggregate(groupBy=[a, b], select=[a, b, SUM($f2) AS sum_c])
      +- Exchange(distribution=[hash[a, b]])
         +- Calc(select=[a, b, CASE((c > 10), 1, (c < 0), 0, null:INTEGER) AS $f2])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderBySumWithCond">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, sum_c,
      ROW_NUMBER() OVER (PARTITION BY b ORDER BY sum_c DESC) AS row_num
  FROM (
SELECT a, b, SUM(c) AS sum_c
FROM MyTable
WHERE c >= 0
GROUP BY a, b
      ))
WHERE row_num <= 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST)])
      +- LogicalAggregate(group=[{0, 1}], sum_c=[SUM($2)])
         +- LogicalProject(a=[$0], b=[$1], c=[$2])
            +- LogicalFilter(condition=[>=($2, 0)])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Rank(strategy=[UpdateFastStrategy[0,1]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[b], orderBy=[sum_c DESC], select=[a, b, sum_c, w0$o0], changelogMode=[I,UA,D])
+- Exchange(distribution=[hash[b]], changelogMode=[I,UA])
   +- GroupAggregate(groupBy=[a, b], select=[a, b, SUM(c) AS sum_c], changelogMode=[I,UA])
      +- Exchange(distribution=[hash[a, b]], changelogMode=[I])
         +- Calc(select=[a, b, c], where=[>=(c, 0)], changelogMode=[I])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderBySumWithFilterClause">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, sum_c,
      ROW_NUMBER() OVER (PARTITION BY b ORDER BY sum_c DESC) AS row_num
  FROM (
SELECT a, b, SUM(c) filter (where c >= 0 and a < 0) as sum_c
FROM MyTable
GROUP BY a, b
      ))
WHERE row_num <= 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST)])
      +- LogicalAggregate(group=[{0, 1}], sum_c=[SUM($2) FILTER $3])
         +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[IS TRUE(AND(>=($2, 0), <($0, 0)))])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Rank(strategy=[UpdateFastStrategy[0,1]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[b], orderBy=[sum_c DESC], select=[a, b, sum_c, w0$o0])
+- Exchange(distribution=[hash[b]])
   +- GroupAggregate(groupBy=[a, b], select=[a, b, SUM(c) FILTER $f3 AS sum_c])
      +- Exchange(distribution=[hash[a, b]])
         +- Calc(select=[a, b, c, ((c >= 0) AND (a < 0)) IS TRUE AS $f3])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderBySumWithFilterClause2">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, sum_c,
      ROW_NUMBER() OVER (PARTITION BY b ORDER BY sum_c ASC) AS row_num
  FROM (
SELECT a, b, SUM(c) FILTER (WHERE c <= 0 AND a < 0) AS sum_c
FROM MyTable
GROUP BY a, b
      ))
WHERE row_num <= 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 NULLS FIRST)])
      +- LogicalAggregate(group=[{0, 1}], sum_c=[SUM($2) FILTER $3])
         +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[IS TRUE(AND(<=($2, 0), <($0, 0)))])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Rank(strategy=[UpdateFastStrategy[0,1]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[b], orderBy=[sum_c ASC], select=[a, b, sum_c, w0$o0])
+- Exchange(distribution=[hash[b]])
   +- GroupAggregate(groupBy=[a, b], select=[a, b, SUM(c) FILTER $f3 AS sum_c])
      +- Exchange(distribution=[hash[a, b]])
         +- Calc(select=[a, b, c, ((c <= 0) AND (a < 0)) IS TRUE AS $f3])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNOrderBySumWithIf">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, sum_c,
      ROW_NUMBER() OVER (PARTITION BY b ORDER BY sum_c DESC) as row_num
  FROM (
SELECT a, b, SUM(IF(c > 10, 1, 0)) as sum_c
FROM MyTable
GROUP BY a, b
      ))
WHERE row_num <= 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST)])
      +- LogicalAggregate(group=[{0, 1}], sum_c=[SUM($2)])
         +- LogicalProject(a=[$0], b=[$1], $f2=[IF(>($2, 10), 1, 0)])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[b], orderBy=[sum_c DESC], select=[a, b, sum_c, w0$o0])
+- Exchange(distribution=[hash[b]])
   +- GroupAggregate(groupBy=[a, b], select=[a, b, SUM($f2) AS sum_c])
      +- Exchange(distribution=[hash[a, b]])
         +- Calc(select=[a, b, IF((c > 10), 1, 0) AS $f2])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNth">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, c,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY b DESC) as row_num
  FROM MyTable)
WHERE row_num = 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[$3])
+- LogicalFilter(condition=[=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[a, b, c, 10 AS $3], changelogMode=[I,UA,D])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=10, rankEnd=10], partitionBy=[a], orderBy=[b DESC], select=[a, b, c], changelogMode=[I,UA,D])
   +- Exchange(distribution=[hash[a]], changelogMode=[I])
      +- Calc(select=[a, b, c], changelogMode=[I])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNWithGroupByConstantKey">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, count_c,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY count_c DESC) AS row_num
  FROM (
SELECT a, b, COUNT(*) AS count_c
FROM (
SELECT *, 'cn' AS cn
FROM MyTable
)
GROUP BY a, b, cn
      ))
WHERE row_num <= 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], count_c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], count_c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
      +- LogicalProject(a=[$0], b=[$1], count_c=[$3])
         +- LogicalAggregate(group=[{0, 1, 2}], count_c=[COUNT()])
            +- LogicalProject(a=[$0], b=[$1], cn=[$5])
               +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], cn=[_UTF-16LE'cn'])
                  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Rank(strategy=[UpdateFastStrategy[0,1]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a], orderBy=[count_c DESC], select=[a, b, count_c, w0$o0], changelogMode=[I,UA,D])
+- Exchange(distribution=[hash[a]], changelogMode=[I,UA])
   +- GroupAggregate(groupBy=[a, b], select=[a, b, COUNT(*) AS count_c], changelogMode=[I,UA])
      +- Exchange(distribution=[hash[a, b]], changelogMode=[I])
         +- Calc(select=[a, b], changelogMode=[I])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNWithKeyChanged">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, sum_c,
      ROW_NUMBER() OVER (PARTITION BY b ORDER BY sum_c DESC) as row_num
  FROM (
SELECT a, last_value(b) as b, SUM(c) as sum_c
FROM MyTable
GROUP BY a
      ))
WHERE row_num <= 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], sum_c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST)])
      +- LogicalAggregate(group=[{0}], b=[LAST_VALUE($1)], sum_c=[SUM($2)])
         +- LogicalProject(a=[$0], b=[$1], c=[$2])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[b], orderBy=[sum_c DESC], select=[a, b, sum_c, w0$o0], changelogMode=[I,UA,D])
+- Exchange(distribution=[hash[b]], changelogMode=[I,UB,UA])
   +- GroupAggregate(groupBy=[a], select=[a, LAST_VALUE(b) AS b, SUM(c) AS sum_c], changelogMode=[I,UB,UA])
      +- Exchange(distribution=[hash[a]], changelogMode=[I])
         +- Calc(select=[a, b, c], changelogMode=[I])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNWithFilter">
    <Resource name="sql">
      <![CDATA[
SELECT row_num, a, c
FROM (
  SELECT a, b, c,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY b DESC) as row_num
  FROM MyTable
  WHERE c > 1000)
WHERE row_num <= 10 AND b IS NOT NULL
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(row_num=[$3], a=[$0], c=[$2])
+- LogicalFilter(condition=[AND(<=($3, 10), IS NOT NULL($1))])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST)])
      +- LogicalFilter(condition=[>($2, 1000)])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[row_num, a, c], where=[IS NOT NULL(b)], changelogMode=[I,UB,UA,D])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a], orderBy=[b DESC], select=[a, b, c, row_num], changelogMode=[I,UB,UA,D])
   +- Exchange(distribution=[hash[a]], changelogMode=[I])
      +- Calc(select=[a, b, c], where=[>(c, 1000)], changelogMode=[I])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnarySortTopNOnString">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT category, shopId, max_price,
      ROW_NUMBER() OVER (PARTITION BY category ORDER BY max_price ASC) as row_num
  FROM (
     SELECT category, shopId, MAX(price) as max_price
     FROM T
     GROUP BY category, shopId
  ))
WHERE row_num <= 3
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(category=[$0], shopId=[$1], max_price=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 3)])
   +- LogicalProject(category=[$0], shopId=[$1], max_price=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 NULLS FIRST)])
      +- LogicalAggregate(group=[{0, 1}], max_price=[MAX($2)])
         +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestTableSource(category, shopId, price)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=3], partitionBy=[category], orderBy=[max_price ASC], select=[category, shopId, max_price, w0$o0], changelogMode=[I,UA,D])
+- Exchange(distribution=[hash[category]], changelogMode=[I,UB,UA])
   +- GroupAggregate(groupBy=[category, shopId], select=[category, shopId, MAX(price) AS max_price], changelogMode=[I,UB,UA])
      +- Exchange(distribution=[hash[category, shopId]], changelogMode=[I])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [TestTableSource(category, shopId, price)]]], fields=[category, shopId, price], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUpdatableRankWithDeduplicate">
    <Resource name="sql">
      <![CDATA[
SELECT c, b, d
FROM (
    SELECT
       c, b, d,
       ROW_NUMBER() OVER (PARTITION BY c, b ORDER BY d DESC) AS rn FROM v1
) WHERE rn < 10
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$0], b=[$1], d=[$2])
+- LogicalFilter(condition=[<($3, 10)])
   +- LogicalProject(c=[$0], b=[$1], d=[$2], rn=[ROW_NUMBER() OVER (PARTITION BY $0, $1 ORDER BY $2 DESC NULLS LAST)])
      +- LogicalAggregate(group=[{0, 1}], d=[SUM($2) FILTER $3])
         +- LogicalProject(c=[$2], b=[$1], a=[$0], $f3=[IS TRUE(>($0, 0))])
            +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rowNum=[$5])
               +- LogicalFilter(condition=[=($5, 1)])
                  +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rowNum=[ROW_NUMBER() OVER (PARTITION BY $2 ORDER BY PROCTIME() NULLS FIRST)])
                     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Rank(strategy=[UpdateFastStrategy[0,1]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=9], partitionBy=[c, b], orderBy=[d DESC], select=[c, b, d])
+- Exchange(distribution=[hash[c, b]])
   +- GroupAggregate(groupBy=[c, b], select=[c, b, SUM(a) FILTER $f3 AS d])
      +- Exchange(distribution=[hash[c, b]])
         +- Calc(select=[c, b, a, IS TRUE(>(a, 0)) AS $f3])
            +- Deduplicate(keep=[FirstRow], key=[c], order=[PROCTIME])
               +- Exchange(distribution=[hash[c]])
                  +- Calc(select=[a, b, c, PROCTIME() AS $5])
                     +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUpdatableRankAfterIntermediateScan">
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.sink], fields=[a, b, c])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalAggregate(group=[{0}], b=[MAX($1)], c=[MIN($2)])
      +- LogicalProject(a=[$0], b=[$1], c=[$2])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

LogicalSink(table=[default_catalog.default_database.sink], fields=[a, b, c])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalFilter(condition=[<($3, 3)])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], rn=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST)])
         +- LogicalAggregate(group=[{0}], b=[MAX($1)], c=[MIN($2)])
            +- LogicalProject(a=[$0], b=[$1], c=[$2])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
GroupAggregate(groupBy=[a], select=[a, MAX(b) AS b, MIN(c) AS c])(reuse_id=[1])
+- Exchange(distribution=[hash[a]])
   +- Calc(select=[a, b, c])
      +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])

Sink(table=[default_catalog.default_database.sink], fields=[a, b, c])
+- Reused(reference_id=[1])

Sink(table=[default_catalog.default_database.sink], fields=[a, b, c])
+- Rank(strategy=[UpdateFastStrategy[0]], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[a], orderBy=[b DESC], select=[a, b, c])
   +- Exchange(distribution=[hash[a]])
      +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
</Root>
