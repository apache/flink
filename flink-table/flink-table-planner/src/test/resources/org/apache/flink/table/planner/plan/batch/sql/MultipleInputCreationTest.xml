<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testAvoidIncludingCalcAfterNonChainableSource[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM x
  LEFT JOIN y ON x.a = y.d
  LEFT JOIN t ON x.a = t.a
  WHERE x.b > 10
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], nx=[$3], d=[$4], e=[$5], f=[$6], ny=[$7], a0=[$8], b0=[$9], c0=[$10])
+- LogicalFilter(condition=[>($1, 10)])
   +- LogicalJoin(condition=[=($0, $8)], joinType=[left])
      :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, t]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a0)], select=[a, b, c, nx, d, e, f, ny, a0, b0, c0], build=[right])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, b, c, nx, d, e, f, ny], build=[right])\n:  :- [#2] Calc(select=[a, b, c, nx], where=[(b > 10)])\n:  +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
:- Exchange(distribution=[broadcast])
:  +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
:- Calc(select=[a, b, c, nx], where=[(b > 10)])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
+- Exchange(distribution=[broadcast])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAvoidIncludingCalcAfterNonChainableSource[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM x
  LEFT JOIN y ON x.a = y.d
  LEFT JOIN t ON x.a = t.a
  WHERE x.b > 10
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], nx=[$3], d=[$4], e=[$5], f=[$6], ny=[$7], a0=[$8], b0=[$9], c0=[$10])
+- LogicalFilter(condition=[>($1, 10)])
   +- LogicalJoin(condition=[=($0, $8)], joinType=[left])
      :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, t]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a0)], select=[a, b, c, nx, d, e, f, ny, a0, b0, c0], build=[right])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, b, c, nx, d, e, f, ny], build=[right])\n:  :- [#2] Calc(select=[a, b, c, nx], where=[(b > 10)])\n:  +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
:- Exchange(distribution=[broadcast])
:  +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
:- Calc(select=[a, b, c, nx], where=[(b > 10)])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
+- Exchange(distribution=[broadcast])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testIncludeCalcForChainableSource[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM chainable
  LEFT JOIN y ON chainable.a = y.d
  LEFT JOIN t ON chainable.a = t.a
  WHERE chainable.a > 10
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], d=[$1], e=[$2], f=[$3], ny=[$4], a0=[$5], b=[$6], c=[$7])
+- LogicalFilter(condition=[>($0, 10)])
   +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :- LogicalJoin(condition=[=($0, $1)], joinType=[left])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, chainable]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, t]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[0,0,1], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a0)], select=[a, d, e, f, ny, a0, b, c], build=[right])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, d, e, f, ny], build=[right])\n:  :- Calc(select=[a], where=[(a > 10)])\n:  :  +- [#3] BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])\n:  +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
:- Exchange(distribution=[broadcast])
:  +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
:- Exchange(distribution=[broadcast])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
+- BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAvoidIncludingSingleton[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT COUNT(*) AS cnt FROM z),
  T2 AS (
    SELECT a FROM
      (SELECT a FROM x INNER JOIN y ON x.a = y.d)
      UNION ALL
      (SELECT a FROM t FULL JOIN T1 ON t.a > T1.cnt))
SELECT a FROM T2 LEFT JOIN z ON T2.a = z.g
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[=($0, $1)], joinType=[left])
   :- LogicalUnion(all=[true])
   :  :- LogicalProject(a=[$0])
   :  :  +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :  :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   :  +- LogicalProject(a=[$0])
   :     +- LogicalJoin(condition=[>($0, $3)], joinType=[full])
   :        :- LogicalTableScan(table=[[default_catalog, default_database, t]])
   :        +- LogicalAggregate(group=[{}], cnt=[COUNT()])
   :           +- LogicalProject($f0=[0])
   :              +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(g, h, i, nz)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(g, h, i, nz)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a])
+- MultipleInput(readOrder=[0,1,0,1], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = g)], select=[a, g], build=[right])\n:- Union(all=[true], union=[a])\n:  :- Calc(select=[a])\n:  :  +- NestedLoopJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[left])\n:  :     :- [#3] Exchange(distribution=[broadcast])\n:  :     +- [#4] Calc(select=[d])\n:  +- [#2] Calc(select=[a])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[g])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, z, source: [TestTableSource(g, h, i, nz)]]], fields=[g, h, i, nz])(reuse_id=[1])
   :- Calc(select=[a])
   :  +- NestedLoopJoin(joinType=[FullOuterJoin], where=[(a > cnt)], select=[a, cnt], build=[right], singleRowJoin=[true])
   :     :- Exchange(distribution=[single])
   :     :  +- Calc(select=[a])
   :     :     +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
   :     +- SortAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS cnt])
   :        +- Exchange(distribution=[single])
   :           +- LocalSortAggregate(select=[Partial_COUNT(*) AS count1$0])
   :              +- Calc(select=[0 AS $f0])
   :                 +- Reused(reference_id=[1])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
   +- Calc(select=[d])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAvoidIncludingSingleton[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT COUNT(*) AS cnt FROM z),
  T2 AS (
    SELECT a FROM
      (SELECT a FROM x INNER JOIN y ON x.a = y.d)
      UNION ALL
      (SELECT a FROM t FULL JOIN T1 ON t.a > T1.cnt))
SELECT a FROM T2 LEFT JOIN z ON T2.a = z.g
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[=($0, $1)], joinType=[left])
   :- LogicalUnion(all=[true])
   :  :- LogicalProject(a=[$0])
   :  :  +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :  :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :  :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   :  +- LogicalProject(a=[$0])
   :     +- LogicalJoin(condition=[>($0, $3)], joinType=[full])
   :        :- LogicalTableScan(table=[[default_catalog, default_database, t]])
   :        +- LogicalAggregate(group=[{}], cnt=[COUNT()])
   :           +- LogicalProject($f0=[0])
   :              +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(g, h, i, nz)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(g, h, i, nz)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a])
+- MultipleInput(readOrder=[0,1,0,1], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = g)], select=[a, g], build=[right])\n:- Union(all=[true], union=[a])\n:  :- Calc(select=[a])\n:  :  +- NestedLoopJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[left])\n:  :     :- [#3] Exchange(distribution=[broadcast])\n:  :     +- [#4] Calc(select=[d])\n:  +- [#2] Calc(select=[a])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[g])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, z, source: [TestTableSource(g, h, i, nz)]]], fields=[g, h, i, nz])(reuse_id=[1])
   :- Calc(select=[a])
   :  +- NestedLoopJoin(joinType=[FullOuterJoin], where=[(a > cnt)], select=[a, cnt], build=[right], singleRowJoin=[true])
   :     :- Exchange(distribution=[single])
   :     :  +- Calc(select=[a])
   :     :     +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
   :     +- SortAggregate(isMerge=[true], select=[Final_COUNT(count1$0) AS cnt])
   :        +- Exchange(distribution=[single])
   :           +- LocalSortAggregate(select=[Partial_COUNT(*) AS count1$0])
   :              +- Calc(select=[0 AS $f0])
   :                 +- Reused(reference_id=[1])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
   +- Calc(select=[d])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAvoidIncludingUnionFromInputSide[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
  (SELECT a FROM (SELECT a FROM x) UNION ALL (SELECT a FROM t)) T1
  LEFT JOIN y ON T1.a = y.d
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], d=[$1], e=[$2], f=[$3], ny=[$4])
+- LogicalJoin(condition=[=($0, $1)], joinType=[left])
   :- LogicalUnion(all=[true])
   :  :- LogicalProject(a=[$0])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :  +- LogicalProject(a=[$0])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, t]])
   +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, d, e, f, ny], build=[right])
:- Union(all=[true], union=[a])
:  :- Calc(select=[a])
:  :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:  +- Calc(select=[a])
:     +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
+- Exchange(distribution=[broadcast])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAvoidIncludingUnionFromInputSide[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
  (SELECT a FROM (SELECT a FROM x) UNION ALL (SELECT a FROM t)) T1
  LEFT JOIN y ON T1.a = y.d
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], d=[$1], e=[$2], f=[$3], ny=[$4])
+- LogicalJoin(condition=[=($0, $1)], joinType=[left])
   :- LogicalUnion(all=[true])
   :  :- LogicalProject(a=[$0])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :  +- LogicalProject(a=[$0])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, t]])
   +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, d, e, f, ny], build=[right])
:- Union(all=[true], union=[a])
:  :- Calc(select=[a])
:  :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:  +- Calc(select=[a])
:     +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
+- Exchange(distribution=[broadcast])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testBasicMultipleInput[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
  (SELECT a FROM x INNER JOIN y ON x.a = y.d) T1
  INNER JOIN
  (SELECT d FROM y INNER JOIN t ON y.d = t.a) T2
  ON T1.a = T2.d
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], d=[$1])
+- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
   :- LogicalProject(a=[$0])
   :  +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   +- LogicalProject(d=[$0])
      +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
         :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
         +- LogicalTableScan(table=[[default_catalog, default_database, t]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[2,1,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[right])\n:- Calc(select=[a])\n:  +- HashJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[right])\n:     :- [#1] Exchange(distribution=[hash[a]])\n:     +- [#2] Exchange(distribution=[hash[d]])\n+- Calc(select=[d])\n   +- HashJoin(joinType=[InnerJoin], where=[(d = a)], select=[d, a], build=[right])\n      :- [#2] Exchange(distribution=[hash[d]])\n      +- [#4] Exchange(distribution=[hash[a]])\n])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:- Exchange(distribution=[hash[d]])(reuse_id=[1])
:  +- Calc(select=[d])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
:- Reused(reference_id=[1])
+- Exchange(distribution=[hash[a]])
   +- Calc(select=[a])
      +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testCleanUpMultipleInputWithOneMember[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT a FROM x INNER JOIN y ON x.a = y.d)
SELECT * FROM
  (SELECT a, a + 1 FROM T1)
  UNION ALL
  (SELECT a, b FROM x)
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(a=[$0], EXPR$1=[+($0, 1)])
:  +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
:     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
:     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Union(all=[true], union=[a, EXPR$1])
:- Calc(select=[a, CAST((a + 1)) AS EXPR$1])
:  +- HashJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[right])
:     :- Exchange(distribution=[hash[a]])
:     :  +- Calc(select=[a])
:     :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])(reuse_id=[1])
:     +- Exchange(distribution=[hash[d]])
:        +- Calc(select=[d])
:           +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
+- Calc(select=[a, b])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testCleanUpMultipleInputWithOneMember[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT a FROM x INNER JOIN y ON x.a = y.d)
SELECT * FROM
  (SELECT a, a + 1 FROM T1)
  UNION ALL
  (SELECT a, b FROM x)
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(a=[$0], EXPR$1=[+($0, 1)])
:  +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
:     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
:     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Union(all=[true], union=[a, EXPR$1])
:- Calc(select=[a, CAST((a + 1)) AS EXPR$1])
:  +- HashJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[right])
:     :- Exchange(distribution=[hash[a]])
:     :  +- Calc(select=[a])
:     :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])(reuse_id=[1])
:     +- Exchange(distribution=[hash[d]])
:        +- Calc(select=[d])
:           +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
+- Calc(select=[a, b])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDeadlockCausedByExchangeInAncestor[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
WITH T1 AS (
  SELECT x1.*, x2.a AS k, (x1.b + x2.b) AS v
  FROM x x1 LEFT JOIN x x2 ON x1.a = x2.a WHERE x2.a > 0)
SELECT x.a, x.b, T1.* FROM x LEFT JOIN T1 ON x.a = T1.k WHERE x.a > 0 AND T1.v = 0
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], a0=[$4], b0=[$5], c=[$6], nx=[$7], k=[$8], v=[$9])
+- LogicalFilter(condition=[AND(>($0, 0), =($9, 0))])
   +- LogicalJoin(condition=[=($0, $8)], joinType=[left])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], nx=[$3], k=[$4], v=[+($1, $5)])
         +- LogicalFilter(condition=[>($4, 0)])
            +- LogicalJoin(condition=[=($0, $4)], joinType=[left])
               :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
               +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, a0, b0, c, nx, k, CAST(0:BIGINT) AS v])
+- MultipleInput(readOrder=[2,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(a = k)], select=[a, b, a0, b0, c, nx, k], build=[right])\n:- [#1] Exchange(distribution=[hash[a]], shuffle_mode=[BATCH])\n+- Calc(select=[a, b, c, nx, a0 AS k])\n   +- HashJoin(joinType=[InnerJoin], where=[((a = a0) AND ((b + b0) = 0:BIGINT))], select=[a, b, c, nx, a0, b0], build=[right])\n      :- [#2] Exchange(distribution=[hash[a]])\n      +- [#3] Exchange(distribution=[hash[a]])\n])
   :- Exchange(distribution=[hash[a]], shuffle_mode=[BATCH])
   :  +- Calc(select=[a, b], where=[(a > 0)])(reuse_id=[2])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])(reuse_id=[1])
   :- Exchange(distribution=[hash[a]])
   :  +- Reused(reference_id=[1])
   +- Exchange(distribution=[hash[a]])
      +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDeadlockCausedByExchangeInAncestor[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
WITH T1 AS (
  SELECT x1.*, x2.a AS k, (x1.b + x2.b) AS v
  FROM x x1 LEFT JOIN x x2 ON x1.a = x2.a WHERE x2.a > 0)
SELECT x.a, x.b, T1.* FROM x LEFT JOIN T1 ON x.a = T1.k WHERE x.a > 0 AND T1.v = 0
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], a0=[$4], b0=[$5], c=[$6], nx=[$7], k=[$8], v=[$9])
+- LogicalFilter(condition=[AND(>($0, 0), =($9, 0))])
   +- LogicalJoin(condition=[=($0, $8)], joinType=[left])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], nx=[$3], k=[$4], v=[+($1, $5)])
         +- LogicalFilter(condition=[>($4, 0)])
            +- LogicalJoin(condition=[=($0, $4)], joinType=[left])
               :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
               +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, a0, b0, c, nx, k, CAST(0:BIGINT) AS v])
+- MultipleInput(readOrder=[2,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(a = k)], select=[a, b, a0, b0, c, nx, k], build=[right])\n:- [#1] Exchange(distribution=[hash[a]], shuffle_mode=[BATCH])\n+- Calc(select=[a, b, c, nx, a0 AS k])\n   +- HashJoin(joinType=[InnerJoin], where=[((a = a0) AND ((b + b0) = 0:BIGINT))], select=[a, b, c, nx, a0, b0], build=[right])\n      :- [#2] Exchange(distribution=[hash[a]], shuffle_mode=[BATCH])\n      +- [#3] Exchange(distribution=[hash[a]])\n])
   :- Exchange(distribution=[hash[a]], shuffle_mode=[BATCH])
   :  +- Calc(select=[a, b], where=[(a > 0)])(reuse_id=[2])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])(reuse_id=[1])
   :- Exchange(distribution=[hash[a]], shuffle_mode=[BATCH])
   :  +- Reused(reference_id=[1])
   +- Exchange(distribution=[hash[a]])
      +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNoPriorityConstraint[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM x
  INNER JOIN y ON x.a = y.d
  INNER JOIN t ON x.a = t.a
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], nx=[$3], d=[$4], e=[$5], f=[$6], ny=[$7], a0=[$8], b0=[$9], c0=[$10])
+- LogicalJoin(condition=[=($0, $8)], joinType=[inner])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, t]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(members=[\nSortMergeJoin(joinType=[InnerJoin], where=[(a = a0)], select=[a, b, c, nx, d, e, f, ny, a0, b0, c0])\n:- SortMergeJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, b, c, nx, d, e, f, ny])\n:  :- [#2] Exchange(distribution=[hash[a]])\n:  +- [#3] Exchange(distribution=[hash[d]])\n+- [#1] Exchange(distribution=[hash[a]])\n])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
:- Exchange(distribution=[hash[a]])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
+- Exchange(distribution=[hash[d]])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testBasicMultipleInput[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
  (SELECT a FROM x INNER JOIN y ON x.a = y.d) T1
  INNER JOIN
  (SELECT d FROM y INNER JOIN t ON y.d = t.a) T2
  ON T1.a = T2.d
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], d=[$1])
+- LogicalJoin(condition=[=($0, $1)], joinType=[inner])
   :- LogicalProject(a=[$0])
   :  +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   +- LogicalProject(d=[$0])
      +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
         :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
         +- LogicalTableScan(table=[[default_catalog, default_database, t]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[2,1,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[right])\n:- Calc(select=[a])\n:  +- HashJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[right])\n:     :- [#1] Exchange(distribution=[hash[a]])\n:     +- [#2] Exchange(distribution=[hash[d]])\n+- Calc(select=[d])\n   +- HashJoin(joinType=[InnerJoin], where=[(d = a)], select=[d, a], build=[right])\n      :- [#2] Exchange(distribution=[hash[d]])\n      +- [#4] Exchange(distribution=[hash[a]])\n])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:- Exchange(distribution=[hash[d]])(reuse_id=[1])
:  +- Calc(select=[d])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
:- Reused(reference_id=[1])
+- Exchange(distribution=[hash[a]])
   +- Calc(select=[a])
      +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testIncludeCalcForChainableSource[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM chainable
  LEFT JOIN y ON chainable.a = y.d
  LEFT JOIN t ON chainable.a = t.a
  WHERE chainable.a > 10
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], d=[$1], e=[$2], f=[$3], ny=[$4], a0=[$5], b=[$6], c=[$7])
+- LogicalFilter(condition=[>($0, 10)])
   +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :- LogicalJoin(condition=[=($0, $1)], joinType=[left])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, chainable]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, t]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[0,0,1], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a0)], select=[a, d, e, f, ny, a0, b, c], build=[right])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, d, e, f, ny], build=[right])\n:  :- Calc(select=[a], where=[(a > 10)])\n:  :  +- [#3] BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])\n:  +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
:- Exchange(distribution=[broadcast])
:  +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
:- Exchange(distribution=[broadcast])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
+- BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testIncludeUnionForChainableSource[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
  (SELECT a FROM (SELECT a FROM chainable) UNION ALL (SELECT a FROM t)) T1
  LEFT JOIN y ON T1.a = y.d
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], d=[$1], e=[$2], f=[$3], ny=[$4])
+- LogicalJoin(condition=[=($0, $1)], joinType=[left])
   :- LogicalUnion(all=[true])
   :  :- LogicalProject(a=[$0])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, chainable]])
   :  +- LogicalProject(a=[$0])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, t]])
   +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[0,1,1], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, d, e, f, ny], build=[right])\n:- Union(all=[true], union=[a])\n:  :- [#2] BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])\n:  +- [#3] Calc(select=[a])\n+- [#1] Exchange(distribution=[broadcast])\n])
:- Exchange(distribution=[broadcast])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
:- BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])
+- Calc(select=[a])
   +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testIncludeUnionForChainableSource[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
  (SELECT a FROM (SELECT a FROM chainable) UNION ALL (SELECT a FROM t)) T1
  LEFT JOIN y ON T1.a = y.d
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], d=[$1], e=[$2], f=[$3], ny=[$4])
+- LogicalJoin(condition=[=($0, $1)], joinType=[left])
   :- LogicalUnion(all=[true])
   :  :- LogicalProject(a=[$0])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, chainable]])
   :  +- LogicalProject(a=[$0])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, t]])
   +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[0,1,1], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, d, e, f, ny], build=[right])\n:- Union(all=[true], union=[a])\n:  :- [#2] BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])\n:  +- [#3] Calc(select=[a])\n+- [#1] Exchange(distribution=[broadcast])\n])
:- Exchange(distribution=[broadcast])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
:- BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])
+- Calc(select=[a])
   +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinWithAggAsProbe[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
WITH T AS (SELECT a, d FROM x INNER JOIN y ON x.a = y.d)
SELECT * FROM
  (SELECT a, COUNT(*) AS cnt FROM T GROUP BY a) T1
  LEFT JOIN
  (SELECT d, SUM(a) AS sm FROM T GROUP BY d) T2
  ON T1.a = T2.d
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], cnt=[$1], d=[$2], sm=[$3])
+- LogicalJoin(condition=[=($0, $2)], joinType=[left])
   :- LogicalAggregate(group=[{0}], cnt=[COUNT()])
   :  +- LogicalProject(a=[$0])
   :     +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :        :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   +- LogicalAggregate(group=[{0}], sm=[SUM($1)])
      +- LogicalProject(d=[$4], a=[$0])
         +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
HashJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, cnt, d, sm], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- HashAggregate(isMerge=[false], groupBy=[a], select=[a, COUNT(*) AS cnt])
:     +- Calc(select=[a])
:        +- HashJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[right])(reuse_id=[1])
:           :- Exchange(distribution=[hash[a]])
:           :  +- Calc(select=[a])
:           :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:           +- Exchange(distribution=[hash[d]])
:              +- Calc(select=[d])
:                 +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
+- HashAggregate(isMerge=[false], groupBy=[d], select=[d, SUM(a) AS sm])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinWithAggAsProbe[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
WITH T AS (SELECT a, d FROM x INNER JOIN y ON x.a = y.d)
SELECT * FROM
  (SELECT a, COUNT(*) AS cnt FROM T GROUP BY a) T1
  LEFT JOIN
  (SELECT d, SUM(a) AS sm FROM T GROUP BY d) T2
  ON T1.a = T2.d
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], cnt=[$1], d=[$2], sm=[$3])
+- LogicalJoin(condition=[=($0, $2)], joinType=[left])
   :- LogicalAggregate(group=[{0}], cnt=[COUNT()])
   :  +- LogicalProject(a=[$0])
   :     +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :        :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   +- LogicalAggregate(group=[{0}], sm=[SUM($1)])
      +- LogicalProject(d=[$4], a=[$0])
         +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
HashJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, cnt, d, sm], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- HashAggregate(isMerge=[false], groupBy=[a], select=[a, COUNT(*) AS cnt])
:     +- Calc(select=[a])
:        +- HashJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[right])(reuse_id=[1])
:           :- Exchange(distribution=[hash[a]])
:           :  +- Calc(select=[a])
:           :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:           +- Exchange(distribution=[hash[d]])
:              +- Calc(select=[d])
:                 +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
+- HashAggregate(isMerge=[false], groupBy=[d], select=[d, SUM(a) AS sm])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testKeepMultipleInputWithOneMemberForChainableSource[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM chainable LEFT JOIN x ON chainable.a = x.a]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], a0=[$1], b=[$2], c=[$3], nx=[$4])
+- LogicalJoin(condition=[=($0, $1)], joinType=[left])
   :- LogicalTableScan(table=[[default_catalog, default_database, chainable]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[1,0], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a0)], select=[a, a0, b, c, nx], build=[right])\n:- [#1] BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])\n+- [#2] Exchange(distribution=[broadcast])\n])
:- BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])
+- Exchange(distribution=[broadcast])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testKeepMultipleInputWithOneMemberForChainableSource[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[SELECT * FROM chainable LEFT JOIN x ON chainable.a = x.a]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], a0=[$1], b=[$2], c=[$3], nx=[$4])
+- LogicalJoin(condition=[=($0, $1)], joinType=[left])
   :- LogicalTableScan(table=[[default_catalog, default_database, chainable]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[1,0], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a0)], select=[a, a0, b, c, nx], build=[right])\n:- [#1] BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])\n+- [#2] Exchange(distribution=[broadcast])\n])
:- BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])
+- Exchange(distribution=[broadcast])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testKeepUsefulUnion[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT chainable.a AS a FROM chainable LEFT JOIN x ON chainable.a = x.a),
  T2 AS (SELECT chainable.a AS a FROM chainable LEFT JOIN y ON chainable.a = y.d)
SELECT * FROM
  (SELECT a FROM T1)
  UNION ALL
  (SELECT a FROM T2)
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(a=[$0])
:  +- LogicalJoin(condition=[=($0, $1)], joinType=[left])
:     :- LogicalTableScan(table=[[default_catalog, default_database, chainable]])
:     +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
+- LogicalProject(a=[$0])
   +- LogicalJoin(condition=[=($0, $1)], joinType=[left])
      :- LogicalTableScan(table=[[default_catalog, default_database, chainable]])
      +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[1,0,1,0], members=[\nUnion(all=[true], union=[a])\n:- Calc(select=[a])\n:  +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a0)], select=[a, a0], build=[right])\n:     :- [#1] BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[a])\n   +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, d], build=[right])\n      :- [#1] BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])\n      +- [#4] Exchange(distribution=[broadcast])\n])
:- BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])(reuse_id=[1])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[a])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:- Reused(reference_id=[1])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[d])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testManyMultipleInputs[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (
    SELECT a, ny, nz FROM x
      LEFT JOIN y ON x.a = y.ny
      LEFT JOIN z ON x.a = z.nz),
  T2 AS (
    SELECT T1.a AS a, t.b AS b, d, T1.ny AS ny, nz FROM T1
      LEFT JOIN t ON T1.a = t.a
      INNER JOIN y ON T1.a = y.d),
  T3 AS (
    SELECT T1.a AS a, t.b AS b, d, T1.ny AS ny, nz FROM T1
      LEFT JOIN y ON T1.a = y.d
      INNER JOIN t ON T1.a = t.a),
  T4 AS (SELECT b, SUM(d) AS sd, SUM(ny) AS sy, SUM(nz) AS sz FROM T2 GROUP BY b),
  T5 AS (SELECT b, SUM(d) AS sd, SUM(ny) AS sy, SUM(nz) AS sz FROM T3 GROUP BY b)
SELECT * FROM
  (SELECT t.b, sd, sy, sz FROM T4 LEFT JOIN t ON T4.b = t.b)
  UNION ALL
  (SELECT y.e, sd, sy, sz FROM T5 LEFT JOIN y ON T5.b = y.e)
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(b=[$5], sd=[$1], sy=[$2], sz=[$3])
:  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
:     :- LogicalAggregate(group=[{0}], sd=[SUM($1)], sy=[SUM($2)], sz=[SUM($3)])
:     :  +- LogicalProject(b=[$4], d=[$6], ny=[$1], nz=[$2])
:     :     +- LogicalJoin(condition=[=($0, $6)], joinType=[inner])
:     :        :- LogicalJoin(condition=[=($0, $3)], joinType=[left])
:     :        :  :- LogicalProject(a=[$0], ny=[$7], nz=[$11])
:     :        :  :  +- LogicalJoin(condition=[=($0, $11)], joinType=[left])
:     :        :  :     :- LogicalJoin(condition=[=($0, $7)], joinType=[left])
:     :        :  :     :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
:     :        :  :     :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
:     :        :  :     +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(g, h, i, nz)]]])
:     :        :  +- LogicalTableScan(table=[[default_catalog, default_database, t]])
:     :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
:     +- LogicalTableScan(table=[[default_catalog, default_database, t]])
+- LogicalProject(e=[$5], sd=[$1], sy=[$2], sz=[$3])
   +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :- LogicalAggregate(group=[{0}], sd=[SUM($1)], sy=[SUM($2)], sz=[SUM($3)])
      :  +- LogicalProject(b=[$8], d=[$3], ny=[$1], nz=[$2])
      :     +- LogicalJoin(condition=[=($0, $7)], joinType=[inner])
      :        :- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :        :  :- LogicalProject(a=[$0], ny=[$7], nz=[$11])
      :        :  :  +- LogicalJoin(condition=[=($0, $11)], joinType=[left])
      :        :  :     :- LogicalJoin(condition=[=($0, $7)], joinType=[left])
      :        :  :     :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
      :        :  :     :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
      :        :  :     +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(g, h, i, nz)]]])
      :        :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, t]])
      +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[0,0,1,1], members=[\nUnion(all=[true], union=[b, sd, sy, sz])\n:- Calc(select=[b0 AS b, sd, sy, sz])\n:  +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(b = b0)], select=[b, sd, sy, sz, b0], build=[right])\n:     :- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_SUM(sum$0) AS sd, Final_SUM(sum$1) AS sy, Final_SUM(sum$2) AS sz])\n:     :  +- [#3] Exchange(distribution=[hash[b]])\n:     +- [#1] Exchange(distribution=[broadcast])\n+- Calc(select=[e, sd, sy, sz])\n   +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(b = e)], select=[b, sd, sy, sz, e], build=[right])\n      :- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_SUM(sum$0) AS sd, Final_SUM(sum$1) AS sy, Final_SUM(sum$2) AS sz])\n      :  +- [#4] Exchange(distribution=[hash[b]])\n      +- [#2] Exchange(distribution=[broadcast])\n])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[b])
:     +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])(reuse_id=[1])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[e])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
:- Exchange(distribution=[hash[b]])
:  +- LocalHashAggregate(groupBy=[b], select=[b, Partial_SUM(d) AS sum$0, Partial_SUM(ny) AS sum$1, Partial_SUM(nz) AS sum$2])
:     +- Calc(select=[b, d, ny, nz])
:        +- MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, ny, nz, b, d], build=[right])\n:- Calc(select=[a, ny, nz, b])\n:  +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a0)], select=[a, ny, nz, a0, b], build=[right])\n:     :- [#2] MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = nz)], select=[a, ny, nz], build=[right])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = ny)], select=[a, ny], build=[right])\n:  :- [#2] Calc(select=[a])\n:  +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])\n:     +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
:           :- Exchange(distribution=[broadcast])(reuse_id=[4])
:           :  +- Calc(select=[d])
:           :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
:           :- MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = nz)], select=[a, ny, nz], build=[right])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = ny)], select=[a, ny], build=[right])\n:  :- [#2] Calc(select=[a])\n:  +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])(reuse_id=[3])
:           :  :- Exchange(distribution=[broadcast])
:           :  :  +- Calc(select=[nz])
:           :  :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, z, source: [TestTableSource(g, h, i, nz)]]], fields=[g, h, i, nz])
:           :  :- Calc(select=[a])
:           :  :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:           :  +- Exchange(distribution=[broadcast])
:           :     +- Calc(select=[ny])
:           :        +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
:           +- Exchange(distribution=[broadcast])(reuse_id=[2])
:              +- Calc(select=[a, b])
:                 +- Reused(reference_id=[1])
+- Exchange(distribution=[hash[b]])
   +- LocalHashAggregate(groupBy=[b], select=[b, Partial_SUM(d) AS sum$0, Partial_SUM(ny) AS sum$1, Partial_SUM(nz) AS sum$2])
      +- Calc(select=[b, d, ny, nz])
         +- MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[(a = a0)], select=[a, ny, nz, d, a0, b], build=[right])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, ny, nz, d], build=[right])\n:  :- [#2] MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = nz)], select=[a, ny, nz], build=[right])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = ny)], select=[a, ny], build=[right])\n:  :- [#2] Calc(select=[a])\n:  +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])\n:  +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :- Reused(reference_id=[2])
            :- Reused(reference_id=[3])
            +- Reused(reference_id=[4])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testManyMultipleInputs[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (
    SELECT a, ny, nz FROM x
      LEFT JOIN y ON x.a = y.ny
      LEFT JOIN z ON x.a = z.nz),
  T2 AS (
    SELECT T1.a AS a, t.b AS b, d, T1.ny AS ny, nz FROM T1
      LEFT JOIN t ON T1.a = t.a
      INNER JOIN y ON T1.a = y.d),
  T3 AS (
    SELECT T1.a AS a, t.b AS b, d, T1.ny AS ny, nz FROM T1
      LEFT JOIN y ON T1.a = y.d
      INNER JOIN t ON T1.a = t.a),
  T4 AS (SELECT b, SUM(d) AS sd, SUM(ny) AS sy, SUM(nz) AS sz FROM T2 GROUP BY b),
  T5 AS (SELECT b, SUM(d) AS sd, SUM(ny) AS sy, SUM(nz) AS sz FROM T3 GROUP BY b)
SELECT * FROM
  (SELECT t.b, sd, sy, sz FROM T4 LEFT JOIN t ON T4.b = t.b)
  UNION ALL
  (SELECT y.e, sd, sy, sz FROM T5 LEFT JOIN y ON T5.b = y.e)
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(b=[$5], sd=[$1], sy=[$2], sz=[$3])
:  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
:     :- LogicalAggregate(group=[{0}], sd=[SUM($1)], sy=[SUM($2)], sz=[SUM($3)])
:     :  +- LogicalProject(b=[$4], d=[$6], ny=[$1], nz=[$2])
:     :     +- LogicalJoin(condition=[=($0, $6)], joinType=[inner])
:     :        :- LogicalJoin(condition=[=($0, $3)], joinType=[left])
:     :        :  :- LogicalProject(a=[$0], ny=[$7], nz=[$11])
:     :        :  :  +- LogicalJoin(condition=[=($0, $11)], joinType=[left])
:     :        :  :     :- LogicalJoin(condition=[=($0, $7)], joinType=[left])
:     :        :  :     :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
:     :        :  :     :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
:     :        :  :     +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(g, h, i, nz)]]])
:     :        :  +- LogicalTableScan(table=[[default_catalog, default_database, t]])
:     :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
:     +- LogicalTableScan(table=[[default_catalog, default_database, t]])
+- LogicalProject(e=[$5], sd=[$1], sy=[$2], sz=[$3])
   +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :- LogicalAggregate(group=[{0}], sd=[SUM($1)], sy=[SUM($2)], sz=[SUM($3)])
      :  +- LogicalProject(b=[$8], d=[$3], ny=[$1], nz=[$2])
      :     +- LogicalJoin(condition=[=($0, $7)], joinType=[inner])
      :        :- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :        :  :- LogicalProject(a=[$0], ny=[$7], nz=[$11])
      :        :  :  +- LogicalJoin(condition=[=($0, $11)], joinType=[left])
      :        :  :     :- LogicalJoin(condition=[=($0, $7)], joinType=[left])
      :        :  :     :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
      :        :  :     :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
      :        :  :     +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(g, h, i, nz)]]])
      :        :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, t]])
      +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[0,0,1,1], members=[\nUnion(all=[true], union=[b, sd, sy, sz])\n:- Calc(select=[b0 AS b, sd, sy, sz])\n:  +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(b = b0)], select=[b, sd, sy, sz, b0], build=[right])\n:     :- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_SUM(sum$0) AS sd, Final_SUM(sum$1) AS sy, Final_SUM(sum$2) AS sz])\n:     :  +- [#3] Exchange(distribution=[hash[b]])\n:     +- [#1] Exchange(distribution=[broadcast])\n+- Calc(select=[e, sd, sy, sz])\n   +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(b = e)], select=[b, sd, sy, sz, e], build=[right])\n      :- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_SUM(sum$0) AS sd, Final_SUM(sum$1) AS sy, Final_SUM(sum$2) AS sz])\n      :  +- [#4] Exchange(distribution=[hash[b]])\n      +- [#2] Exchange(distribution=[broadcast])\n])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[b])
:     +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])(reuse_id=[1])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[e])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
:- Exchange(distribution=[hash[b]])
:  +- LocalHashAggregate(groupBy=[b], select=[b, Partial_SUM(d) AS sum$0, Partial_SUM(ny) AS sum$1, Partial_SUM(nz) AS sum$2])
:     +- Calc(select=[b, d, ny, nz])
:        +- MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, ny, nz, b, d], build=[right])\n:- Calc(select=[a, ny, nz, b])\n:  +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a0)], select=[a, ny, nz, a0, b], build=[right])\n:     :- [#2] MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = nz)], select=[a, ny, nz], build=[right])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = ny)], select=[a, ny], build=[right])\n:  :- [#2] Calc(select=[a])\n:  +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])\n:     +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
:           :- Exchange(distribution=[broadcast])(reuse_id=[4])
:           :  +- Calc(select=[d])
:           :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
:           :- MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = nz)], select=[a, ny, nz], build=[right])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = ny)], select=[a, ny], build=[right])\n:  :- [#2] Calc(select=[a])\n:  +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])(reuse_id=[3])
:           :  :- Exchange(distribution=[broadcast])
:           :  :  +- Calc(select=[nz])
:           :  :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, z, source: [TestTableSource(g, h, i, nz)]]], fields=[g, h, i, nz])
:           :  :- Calc(select=[a])
:           :  :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:           :  +- Exchange(distribution=[broadcast])
:           :     +- Calc(select=[ny])
:           :        +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
:           +- Exchange(distribution=[broadcast])(reuse_id=[2])
:              +- Calc(select=[a, b])
:                 +- Reused(reference_id=[1])
+- Exchange(distribution=[hash[b]])
   +- LocalHashAggregate(groupBy=[b], select=[b, Partial_SUM(d) AS sum$0, Partial_SUM(ny) AS sum$1, Partial_SUM(nz) AS sum$2])
      +- Calc(select=[b, d, ny, nz])
         +- MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[(a = a0)], select=[a, ny, nz, d, a0, b], build=[right])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, ny, nz, d], build=[right])\n:  :- [#2] MultipleInput(readOrder=[0,1,0], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = nz)], select=[a, ny, nz], build=[right])\n:- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = ny)], select=[a, ny], build=[right])\n:  :- [#2] Calc(select=[a])\n:  +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])\n:  +- [#3] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
            :- Reused(reference_id=[2])
            :- Reused(reference_id=[3])
            +- Reused(reference_id=[4])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRelatedInputsWithAgg[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT x.a AS a, y.d AS b FROM y LEFT JOIN x ON y.d = x.a),
  T2 AS (
    SELECT a, b FROM
      (SELECT a, b FROM T1)
      UNION ALL
      (SELECT COUNT(x.a) AS a, x.b AS b FROM x GROUP BY x.b))
SELECT * FROM T2 LEFT JOIN t ON T2.a = t.a
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], a0=[$2], b0=[$3], c=[$4])
+- LogicalJoin(condition=[=($0, $5)], joinType=[left])
   :- LogicalUnion(all=[true])
   :  :- LogicalProject(a=[$4], b=[$0])
   :  :  +- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :     :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   :  :     +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :  +- LogicalProject(a=[$1], b=[$0])
   :     +- LogicalAggregate(group=[{0}], a=[COUNT($1)])
   :        +- LogicalProject(b=[$1], a=[$0])
   :           +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], a0=[CAST($0):BIGINT])
      +- LogicalTableScan(table=[[default_catalog, default_database, t]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, a0, b0, c])
+- MultipleInput(readOrder=[0,1,0,1], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a00)], select=[a, b, a0, b0, c, a00], build=[right])\n:- Union(all=[true], union=[a, b])\n:  :- Calc(select=[CAST(a) AS a, CAST(d) AS b])\n:  :  +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(d = a)], select=[d, a], build=[right])\n:  :     :- [#2] Calc(select=[d])\n:  :     +- [#3] Exchange(distribution=[broadcast])\n:  +- Calc(select=[CAST(a) AS a, b])\n:     +- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_COUNT(count$0) AS a])\n:        +- [#4] Exchange(distribution=[hash[b]])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a, b, c, CAST(a) AS a0])
   :     +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
   :- Calc(select=[d])
   :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])(reuse_id=[1])
   +- Exchange(distribution=[hash[b]])
      +- LocalHashAggregate(groupBy=[b], select=[b, Partial_COUNT(a) AS count$0])
         +- Calc(select=[b, a])
            +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testKeepUsefulUnion[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT chainable.a AS a FROM chainable LEFT JOIN x ON chainable.a = x.a),
  T2 AS (SELECT chainable.a AS a FROM chainable LEFT JOIN y ON chainable.a = y.d)
SELECT * FROM
  (SELECT a FROM T1)
  UNION ALL
  (SELECT a FROM T2)
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(a=[$0])
:  +- LogicalJoin(condition=[=($0, $1)], joinType=[left])
:     :- LogicalTableScan(table=[[default_catalog, default_database, chainable]])
:     +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
+- LogicalProject(a=[$0])
   +- LogicalJoin(condition=[=($0, $1)], joinType=[left])
      :- LogicalTableScan(table=[[default_catalog, default_database, chainable]])
      +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[1,0,1,0], members=[\nUnion(all=[true], union=[a])\n:- Calc(select=[a])\n:  +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a0)], select=[a, a0], build=[right])\n:     :- [#1] BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- Calc(select=[a])\n   +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, d], build=[right])\n      :- [#1] BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])\n      +- [#4] Exchange(distribution=[broadcast])\n])
:- BoundedStreamScan(table=[[default_catalog, default_database, chainable]], fields=[a])(reuse_id=[1])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[a])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:- Reused(reference_id=[1])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[d])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNoPriorityConstraint[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM x
  INNER JOIN y ON x.a = y.d
  INNER JOIN t ON x.a = t.a
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], nx=[$3], d=[$4], e=[$5], f=[$6], ny=[$7], a0=[$8], b0=[$9], c0=[$10])
+- LogicalJoin(condition=[=($0, $8)], joinType=[inner])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, t]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(members=[\nSortMergeJoin(joinType=[InnerJoin], where=[(a = a0)], select=[a, b, c, nx, d, e, f, ny, a0, b0, c0])\n:- SortMergeJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, b, c, nx, d, e, f, ny])\n:  :- [#2] Exchange(distribution=[hash[a]])\n:  +- [#3] Exchange(distribution=[hash[d]])\n+- [#1] Exchange(distribution=[hash[a]])\n])
:- Exchange(distribution=[hash[a]])
:  +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
:- Exchange(distribution=[hash[a]])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
+- Exchange(distribution=[hash[d]])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRelatedInputs[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT x.a AS a, y.d AS b FROM y LEFT JOIN x ON y.d = x.a),
  T2 AS (
    SELECT a, b FROM
      (SELECT a, b FROM T1)
      UNION ALL
      (SELECT x.a AS a, x.b AS b FROM x))
SELECT * FROM T2 LEFT JOIN t ON T2.a = t.a
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], a0=[$2], b0=[$3], c=[$4])
+- LogicalJoin(condition=[=($0, $2)], joinType=[left])
   :- LogicalUnion(all=[true])
   :  :- LogicalProject(a=[$4], b=[$0])
   :  :  +- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :     :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   :  :     +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :  +- LogicalProject(a=[$0], b=[$1])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, t]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[0,1,2,1], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a0)], select=[a, b, a0, b0, c], build=[right])\n:- Union(all=[true], union=[a, b])\n:  :- Calc(select=[a, CAST(d) AS b])\n:  :  +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(d = a)], select=[d, a], build=[right])\n:  :     :- [#3] Calc(select=[d])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- [#2] Calc(select=[a, b])\n+- [#1] Exchange(distribution=[broadcast])\n])
:- Exchange(distribution=[broadcast])
:  +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
:- Calc(select=[a, b])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])(reuse_id=[1])
:- Calc(select=[d])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[a])
      +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveRedundantUnion[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT COUNT(*) AS cnt FROM x GROUP BY a),
  T2 AS (SELECT COUNT(*) AS cnt FROM y GROUP BY d),
  T3 AS (SELECT a AS cnt FROM x INNER JOIN y ON x.a = y.d),
  T4 AS (SELECT b AS cnt FROM x INNER JOIN y ON x.b = y.e)
SELECT cnt FROM
  (SELECT cnt FROM (SELECT cnt FROM T1) UNION ALL (SELECT cnt FROM T2))
  UNION ALL
  (SELECT cnt FROM (SELECT cnt FROM T3) UNION ALL (SELECT cnt FROM T4))
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(cnt=[$0])
:  +- LogicalUnion(all=[true])
:     :- LogicalProject(cnt=[$1])
:     :  +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
:     :     +- LogicalProject(a=[$0])
:     :        +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
:     +- LogicalProject(cnt=[$1])
:        +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
:           +- LogicalProject(d=[$0])
:              +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
+- LogicalUnion(all=[true])
   :- LogicalProject(cnt=[$0])
   :  +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   +- LogicalProject(cnt=[$1])
      +- LogicalJoin(condition=[=($1, $5)], joinType=[inner])
         :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Union(all=[true], union=[cnt])
:- Union(all=[true], union=[cnt])
:  :- Calc(select=[CAST(cnt) AS cnt])
:  :  +- HashAggregate(isMerge=[true], groupBy=[a], select=[a, Final_COUNT(count1$0) AS cnt])
:  :     +- Exchange(distribution=[hash[a]])
:  :        +- LocalHashAggregate(groupBy=[a], select=[a, Partial_COUNT(*) AS count1$0])
:  :           +- Calc(select=[a])(reuse_id=[1])
:  :              +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:  +- Calc(select=[CAST(cnt) AS cnt])
:     +- HashAggregate(isMerge=[true], groupBy=[d], select=[d, Final_COUNT(count1$0) AS cnt])
:        +- Exchange(distribution=[hash[d]])
:           +- LocalHashAggregate(groupBy=[d], select=[d, Partial_COUNT(*) AS count1$0])
:              +- Calc(select=[d])(reuse_id=[2])
:                 +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
+- MultipleInput(readOrder=[1,0,1,0], members=[\nUnion(all=[true], union=[cnt])\n:- Calc(select=[CAST(a) AS cnt])\n:  +- HashJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[right])\n:     :- [#1] Exchange(distribution=[hash[a]])\n:     +- [#2] Exchange(distribution=[hash[d]])\n+- Calc(select=[b AS cnt])\n   +- HashJoin(joinType=[InnerJoin], where=[(b = e)], select=[b, e], build=[right])\n      :- [#3] Exchange(distribution=[hash[b]])\n      +- [#4] Exchange(distribution=[hash[e]])\n])
   :- Exchange(distribution=[hash[a]])
   :  +- Reused(reference_id=[1])
   :- Exchange(distribution=[hash[d]])
   :  +- Reused(reference_id=[2])
   :- Exchange(distribution=[hash[b]])
   :  +- Calc(select=[b])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
   +- Exchange(distribution=[hash[e]])
      +- Calc(select=[e])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRelatedInputs[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT x.a AS a, y.d AS b FROM y LEFT JOIN x ON y.d = x.a),
  T2 AS (
    SELECT a, b FROM
      (SELECT a, b FROM T1)
      UNION ALL
      (SELECT x.a AS a, x.b AS b FROM x))
SELECT * FROM T2 LEFT JOIN t ON T2.a = t.a
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], a0=[$2], b0=[$3], c=[$4])
+- LogicalJoin(condition=[=($0, $2)], joinType=[left])
   :- LogicalUnion(all=[true])
   :  :- LogicalProject(a=[$4], b=[$0])
   :  :  +- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :     :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   :  :     +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :  +- LogicalProject(a=[$0], b=[$1])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, t]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[0,1,2,1], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a0)], select=[a, b, a0, b0, c], build=[right])\n:- Union(all=[true], union=[a, b])\n:  :- Calc(select=[a, CAST(d) AS b])\n:  :  +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(d = a)], select=[d, a], build=[right])\n:  :     :- [#3] Calc(select=[d])\n:  :     +- [#4] Exchange(distribution=[broadcast])\n:  +- [#2] Calc(select=[a, b])\n+- [#1] Exchange(distribution=[broadcast])\n])
:- Exchange(distribution=[broadcast])
:  +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
:- Calc(select=[a, b])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])(reuse_id=[1])
:- Calc(select=[d])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[a])
      +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveOneInputOperatorFromRoot[shuffleMode: ALL_EXCHANGES_BLOCKING]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT a FROM x INNER JOIN y ON x.a = y.d),
  T2 AS (SELECT b FROM x INNER JOIN y ON x.b = y.e)
SELECT * FROM
  (SELECT a, b FROM T1 LEFT JOIN T2 ON T1.a = T2.b)
  UNION ALL
  (SELECT a, b FROM x)
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(a=[$0], b=[$2])
:  +- LogicalJoin(condition=[=($1, $2)], joinType=[left])
:     :- LogicalProject(a=[$0], a0=[CAST($0):BIGINT])
:     :  +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
:     :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
:     :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
:     +- LogicalProject(b=[$1])
:        +- LogicalJoin(condition=[=($1, $5)], joinType=[inner])
:           :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
:           +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Union(all=[true], union=[a, b])
:- Calc(select=[a, b])
:  +- MultipleInput(readOrder=[2,1,0], members=[\nHashJoin(joinType=[LeftOuterJoin], where=[(a0 = b)], select=[a, a0, b], build=[right])\n:- [#1] Exchange(distribution=[hash[a0]])\n+- Calc(select=[b])\n   +- HashJoin(joinType=[InnerJoin], where=[(b = e)], select=[b, e], build=[right])\n      :- [#2] Exchange(distribution=[hash[b]])\n      +- [#3] Exchange(distribution=[hash[e]])\n])
:     :- Exchange(distribution=[hash[a0]])
:     :  +- Calc(select=[a, CAST(a) AS a0])
:     :     +- HashJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[right])
:     :        :- Exchange(distribution=[hash[a]])
:     :        :  +- Calc(select=[a])
:     :        :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:     :        +- Exchange(distribution=[hash[d]])
:     :           +- Calc(select=[d])
:     :              +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
:     :- Exchange(distribution=[hash[b]])
:     :  +- Calc(select=[b])
:     :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:     +- Exchange(distribution=[hash[e]])
:        +- Calc(select=[e])
:           +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
+- Calc(select=[a, b])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRelatedInputsWithAgg[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT x.a AS a, y.d AS b FROM y LEFT JOIN x ON y.d = x.a),
  T2 AS (
    SELECT a, b FROM
      (SELECT a, b FROM T1)
      UNION ALL
      (SELECT COUNT(x.a) AS a, x.b AS b FROM x GROUP BY x.b))
SELECT * FROM T2 LEFT JOIN t ON T2.a = t.a
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], a0=[$2], b0=[$3], c=[$4])
+- LogicalJoin(condition=[=($0, $5)], joinType=[left])
   :- LogicalUnion(all=[true])
   :  :- LogicalProject(a=[$4], b=[$0])
   :  :  +- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :     :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   :  :     +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :  +- LogicalProject(a=[$1], b=[$0])
   :     +- LogicalAggregate(group=[{0}], a=[COUNT($1)])
   :        +- LogicalProject(b=[$1], a=[$0])
   :           +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], a0=[CAST($0):BIGINT])
      +- LogicalTableScan(table=[[default_catalog, default_database, t]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, a0, b0, c])
+- MultipleInput(readOrder=[0,2,1,1], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = a00)], select=[a, b, a0, b0, c, a00], build=[right])\n:- Union(all=[true], union=[a, b])\n:  :- Calc(select=[CAST(a) AS a, CAST(d) AS b])\n:  :  +- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(d = a)], select=[d, a], build=[right])\n:  :     :- [#2] Calc(select=[d])\n:  :     +- [#3] Exchange(distribution=[broadcast])\n:  +- Calc(select=[CAST(a) AS a, b])\n:     +- HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_COUNT(count$0) AS a])\n:        +- [#4] Exchange(distribution=[hash[b]])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a, b, c, CAST(a) AS a0])
   :     +- BoundedStreamScan(table=[[default_catalog, default_database, t]], fields=[a, b, c])
   :- Calc(select=[d])
   :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])(reuse_id=[1])
   +- Exchange(distribution=[hash[b]])
      +- LocalHashAggregate(groupBy=[b], select=[b, Partial_COUNT(a) AS count$0])
         +- Calc(select=[b, a])
            +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveRedundantUnion[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT COUNT(*) AS cnt FROM x GROUP BY a),
  T2 AS (SELECT COUNT(*) AS cnt FROM y GROUP BY d),
  T3 AS (SELECT a AS cnt FROM x INNER JOIN y ON x.a = y.d),
  T4 AS (SELECT b AS cnt FROM x INNER JOIN y ON x.b = y.e)
SELECT cnt FROM
  (SELECT cnt FROM (SELECT cnt FROM T1) UNION ALL (SELECT cnt FROM T2))
  UNION ALL
  (SELECT cnt FROM (SELECT cnt FROM T3) UNION ALL (SELECT cnt FROM T4))
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(cnt=[$0])
:  +- LogicalUnion(all=[true])
:     :- LogicalProject(cnt=[$1])
:     :  +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
:     :     +- LogicalProject(a=[$0])
:     :        +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
:     +- LogicalProject(cnt=[$1])
:        +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
:           +- LogicalProject(d=[$0])
:              +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
+- LogicalUnion(all=[true])
   :- LogicalProject(cnt=[$0])
   :  +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
   +- LogicalProject(cnt=[$1])
      +- LogicalJoin(condition=[=($1, $5)], joinType=[inner])
         :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Union(all=[true], union=[cnt])
:- Union(all=[true], union=[cnt])
:  :- Calc(select=[CAST(cnt) AS cnt])
:  :  +- HashAggregate(isMerge=[true], groupBy=[a], select=[a, Final_COUNT(count1$0) AS cnt])
:  :     +- Exchange(distribution=[hash[a]])
:  :        +- LocalHashAggregate(groupBy=[a], select=[a, Partial_COUNT(*) AS count1$0])
:  :           +- Calc(select=[a])(reuse_id=[1])
:  :              +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:  +- Calc(select=[CAST(cnt) AS cnt])
:     +- HashAggregate(isMerge=[true], groupBy=[d], select=[d, Final_COUNT(count1$0) AS cnt])
:        +- Exchange(distribution=[hash[d]])
:           +- LocalHashAggregate(groupBy=[d], select=[d, Partial_COUNT(*) AS count1$0])
:              +- Calc(select=[d])(reuse_id=[2])
:                 +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
+- MultipleInput(readOrder=[1,0,1,0], members=[\nUnion(all=[true], union=[cnt])\n:- Calc(select=[CAST(a) AS cnt])\n:  +- HashJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[right])\n:     :- [#1] Exchange(distribution=[hash[a]])\n:     +- [#2] Exchange(distribution=[hash[d]])\n+- Calc(select=[b AS cnt])\n   +- HashJoin(joinType=[InnerJoin], where=[(b = e)], select=[b, e], build=[right])\n      :- [#3] Exchange(distribution=[hash[b]])\n      +- [#4] Exchange(distribution=[hash[e]])\n])
   :- Exchange(distribution=[hash[a]])
   :  +- Reused(reference_id=[1])
   :- Exchange(distribution=[hash[d]])
   :  +- Reused(reference_id=[2])
   :- Exchange(distribution=[hash[b]])
   :  +- Calc(select=[b])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
   +- Exchange(distribution=[hash[e]])
      +- Calc(select=[e])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveOneInputOperatorFromRoot[shuffleMode: ALL_EXCHANGES_PIPELINED]">
    <Resource name="sql">
      <![CDATA[
WITH
  T1 AS (SELECT a FROM x INNER JOIN y ON x.a = y.d),
  T2 AS (SELECT b FROM x INNER JOIN y ON x.b = y.e)
SELECT * FROM
  (SELECT a, b FROM T1 LEFT JOIN T2 ON T1.a = T2.b)
  UNION ALL
  (SELECT a, b FROM x)
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(a=[$0], b=[$2])
:  +- LogicalJoin(condition=[=($1, $2)], joinType=[left])
:     :- LogicalProject(a=[$0], a0=[CAST($0):BIGINT])
:     :  +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
:     :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
:     :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
:     +- LogicalProject(b=[$1])
:        +- LogicalJoin(condition=[=($1, $5)], joinType=[inner])
:           :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
:           +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Union(all=[true], union=[a, b])
:- Calc(select=[a, b])
:  +- MultipleInput(readOrder=[2,1,0], members=[\nHashJoin(joinType=[LeftOuterJoin], where=[(a0 = b)], select=[a, a0, b], build=[right])\n:- [#1] Exchange(distribution=[hash[a0]])\n+- Calc(select=[b])\n   +- HashJoin(joinType=[InnerJoin], where=[(b = e)], select=[b, e], build=[right])\n      :- [#2] Exchange(distribution=[hash[b]])\n      +- [#3] Exchange(distribution=[hash[e]])\n])
:     :- Exchange(distribution=[hash[a0]])
:     :  +- Calc(select=[a, CAST(a) AS a0])
:     :     +- HashJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[right])
:     :        :- Exchange(distribution=[hash[a]])
:     :        :  +- Calc(select=[a])
:     :        :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:     :        +- Exchange(distribution=[hash[d]])
:     :           +- Calc(select=[d])
:     :              +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
:     :- Exchange(distribution=[hash[b]])
:     :  +- Calc(select=[b])
:     :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
:     +- Exchange(distribution=[hash[e]])
:        +- Calc(select=[e])
:           +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])
+- Calc(select=[a, b])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])
]]>
    </Resource>
  </TestCase>
</Root>
