<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testAggregationAndGroupingWithMultiJoin">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, pc.category_name, COUNT(DISTINCT o.order_id) as order_count, SUM(oi.quantity) as total_items, SUM(oi.quantity * oi.unit_price) as total_value, AVG(oi.unit_price) as avg_item_price, MAX(p.price) as max_payment, MIN(p.price) as min_payment, COUNT(CASE WHEN oi.quantity > 5 THEN 1 END) as bulk_orders FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id LEFT JOIN OrderItems oi ON o.order_id = oi.order_id LEFT JOIN ProductCategories pc ON oi.product_name = pc.category_id LEFT JOIN Payments p ON u.user_id = p.user_id GROUP BY u.user_id, u.name, pc.category_name HAVING COUNT(DISTINCT o.order_id) > 0]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalFilter(condition=[>($3, 0)])
+- LogicalAggregate(group=[{0, 1, 2}], order_count=[COUNT(DISTINCT $3)], total_items=[SUM($4)], total_value=[SUM($5)], avg_item_price=[AVG($6)], max_payment=[MAX($7)], min_payment=[MIN($7)], bulk_orders=[COUNT($8)])
   +- LogicalProject(user_id=[$0], name=[$1], category_name=[$12], order_id=[$3], quantity=[$9], $f5=[*($9, $10)], unit_price=[$10], price=[$15], $f8=[CASE(>($9, 5), 1, null:INTEGER)])
      +- LogicalJoin(condition=[=($0, $16)], joinType=[left])
         :- LogicalJoin(condition=[=($8, $11)], joinType=[left])
         :  :- LogicalJoin(condition=[=($3, $7)], joinType=[left])
         :  :  :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
         :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
         :  :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
         :  :  +- LogicalTableScan(table=[[default_catalog, default_database, OrderItems]])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, ProductCategories]])
         +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, category_name, order_count, total_items, total_value, avg_item_price, max_payment, min_payment, bulk_orders], where=[>(order_count, 0)])
+- GroupAggregate(groupBy=[user_id, name, category_name], select=[user_id, name, category_name, COUNT_RETRACT(DISTINCT order_id) AS order_count, SUM_RETRACT(quantity) AS total_items, SUM_RETRACT($f5) AS total_value, AVG_RETRACT(unit_price) AS avg_item_price, MAX_RETRACT(price) AS max_payment, MIN_RETRACT(price) AS min_payment, COUNT_RETRACT($f8) AS bulk_orders])
   +- Exchange(distribution=[hash[user_id, name, category_name]])
      +- Calc(select=[user_id, name, category_name, order_id, quantity, *(quantity, unit_price) AS $f5, unit_price, price, CASE(>(quantity, 5), 1, null:INTEGER) AS $f8])
         +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, noUniqueKey], joinConditions=[=(user_id, user_id1)], select=[user_id,name,order_id,quantity,unit_price,category_name,price,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, INTEGER quantity, DOUBLE unit_price, VARCHAR(2147483647) category_name, INTEGER price, VARCHAR(2147483647) user_id1)])
            :- Exchange(distribution=[hash[user_id]])
            :  +- Calc(select=[user_id, name, order_id, quantity, unit_price, category_name])
            :     +- MultiJoin(commonJoinKey=[product_name], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (category_id)], joinConditions=[=(product_name, category_id)], select=[user_id,name,order_id,product_name,quantity,unit_price,category_id,category_name], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) product_name, INTEGER quantity, DOUBLE unit_price, VARCHAR(2147483647) category_id, VARCHAR(2147483647) category_name)])
            :        :- Exchange(distribution=[hash[product_name]])
            :        :  +- Calc(select=[user_id, name, order_id, product_name, quantity, unit_price])
            :        :     +- MultiJoin(commonJoinKey=[order_id], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, noUniqueKey], joinConditions=[=(order_id, order_id0)], select=[user_id,name,order_id,order_id0,product_name,quantity,unit_price], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) order_id0, VARCHAR(2147483647) product_name, INTEGER quantity, DOUBLE unit_price)])
            :        :        :- Exchange(distribution=[hash[order_id]])
            :        :        :  +- Calc(select=[user_id, name, order_id])
            :        :        :     +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[(user_id), (order_id)], joinConditions=[=(user_id, user_id0)], select=[user_id,name,order_id,user_id0], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0)])
            :        :        :        :- Exchange(distribution=[hash[user_id]])
            :        :        :        :  +- ChangelogNormalize(key=[user_id])
            :        :        :        :     +- Exchange(distribution=[hash[user_id]])
            :        :        :        :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
            :        :        :        +- Exchange(distribution=[hash[user_id]])
            :        :        :           +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
            :        :        +- Exchange(distribution=[hash[order_id]])
            :        :           +- Calc(select=[order_id, product_name, quantity, unit_price])
            :        :              +- ChangelogNormalize(key=[item_id])
            :        :                 +- Exchange(distribution=[hash[item_id]])
            :        :                    +- TableSourceScan(table=[[default_catalog, default_database, OrderItems]], fields=[item_id, order_id, product_name, quantity, unit_price])
            :        +- Exchange(distribution=[hash[category_id]])
            :           +- ChangelogNormalize(key=[category_id])
            :              +- Exchange(distribution=[hash[category_id]])
            :                 +- TableSourceScan(table=[[default_catalog, default_database, ProductCategories, project=[category_id, category_name], metadata=[]]], fields=[category_id, category_name])
            +- Exchange(distribution=[hash[user_id]])
               +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[price, user_id], metadata=[]]], fields=[price, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAggregationAndGroupingWithMultiJoinV2">
    <Resource name="sql">
      <![CDATA[SELECT   c.category_name,   COUNT(DISTINCT u.user_id) AS unique_users,   COUNT(s.sale_id) AS total_sales,   SUM(s.amount) AS total_revenue,   AVG(s.amount) AS avg_sale_amount,   MAX(s.amount) AS max_sale_amount FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id LEFT JOIN Categories c ON o.product = c.category_id LEFT JOIN Sales s ON u.user_id = s.user_id GROUP BY c.category_name HAVING COUNT(s.sale_id) > 0]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalFilter(condition=[>($2, 0)])
+- LogicalAggregate(group=[{0}], unique_users=[COUNT(DISTINCT $1)], total_sales=[COUNT($2)], total_revenue=[SUM($3)], avg_sale_amount=[AVG($3)], max_sale_amount=[MAX($3)])
   +- LogicalProject(category_name=[$7], user_id=[$0], sale_id=[$9], amount=[$12])
      +- LogicalJoin(condition=[=($0, $10)], joinType=[left])
         :- LogicalJoin(condition=[=($5, $6)], joinType=[left])
         :  :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
         :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
         :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, Categories]])
         +- LogicalTableScan(table=[[default_catalog, default_database, Sales]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[category_name, unique_users, total_sales, total_revenue, avg_sale_amount, max_sale_amount], where=[>(total_sales, 0)])
+- GroupAggregate(groupBy=[category_name], select=[category_name, COUNT_RETRACT(DISTINCT user_id) AS unique_users, COUNT_RETRACT(sale_id) AS total_sales, SUM_RETRACT(amount) AS total_revenue, AVG_RETRACT(amount) AS avg_sale_amount, MAX_RETRACT(amount) AS max_sale_amount])
   +- Exchange(distribution=[hash[category_name]])
      +- Calc(select=[category_name, user_id, sale_id, amount])
         +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (sale_id)], joinConditions=[=(user_id, user_id1)], select=[user_id,category_name,sale_id,user_id1,amount], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) category_name, VARCHAR(2147483647) sale_id, VARCHAR(2147483647) user_id1, DOUBLE amount)])
            :- Exchange(distribution=[hash[user_id]])
            :  +- Calc(select=[user_id, category_name])
            :     +- MultiJoin(commonJoinKey=[product], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (category_id)], joinConditions=[=(product, category_id)], select=[user_id,product,category_id,category_name], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) product, VARCHAR(2147483647) category_id, VARCHAR(2147483647) category_name)])
            :        :- Exchange(distribution=[hash[product]])
            :        :  +- Calc(select=[user_id, product])
            :        :     +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[(user_id), noUniqueKey], joinConditions=[=(user_id, user_id0)], select=[user_id,user_id0,product], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) product)])
            :        :        :- Exchange(distribution=[hash[user_id]])
            :        :        :  +- ChangelogNormalize(key=[user_id])
            :        :        :     +- Exchange(distribution=[hash[user_id]])
            :        :        :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id], metadata=[]]], fields=[user_id])
            :        :        +- Exchange(distribution=[hash[user_id]])
            :        :           +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[user_id, product], metadata=[]]], fields=[user_id, product])
            :        +- Exchange(distribution=[hash[category_id]])
            :           +- ChangelogNormalize(key=[category_id])
            :              +- Exchange(distribution=[hash[category_id]])
            :                 +- TableSourceScan(table=[[default_catalog, default_database, Categories, project=[category_id, category_name], metadata=[]]], fields=[category_id, category_name])
            +- Exchange(distribution=[hash[user_id]])
               +- ChangelogNormalize(key=[sale_id])
                  +- Exchange(distribution=[hash[sale_id]])
                     +- TableSourceScan(table=[[default_catalog, default_database, Sales, project=[sale_id, user_id, amount], metadata=[]]], fields=[sale_id, user_id, amount])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComplexCommonJoinKey">
    <Resource name="sql">
      <![CDATA[SELECT *
    FROM Assignments assignments
    LEFT JOIN Customers AS customer
        ON assignments.user_id = customer.user_id
        AND assignments.common_id = customer.common_id
    LEFT JOIN Documents AS documents
        ON assignments.detail_id = documents.detail_id
        AND assignments.common_id = documents.common_id
    LEFT JOIN PhaseDetails AS phase_details
        ON documents.common_id = phase_details.common_id
    LEFT JOIN Organizations AS organizations
        ON customer.depart_num = organizations.org_id
        AND customer.common_id = organizations.common_id
    LEFT JOIN Customers AS creators
        ON documents.creator_nm = creators.depart_num
        AND documents.common_id = creators.common_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(assignment_id=[$0], user_id=[$1], detail_id=[$2], common_id=[$3], user_id0=[$4], name=[$5], depart_num=[$6], common_id0=[$7], detail_id0=[$8], creator_nm=[$9], common_id1=[$10], phase_id=[$11], common_id2=[$12], org_id=[$13], org_name=[$14], common_id3=[$15], user_id1=[$16], name0=[$17], depart_num0=[$18], common_id4=[$19])
+- LogicalJoin(condition=[AND(=($9, $18), =($10, $19))], joinType=[left])
   :- LogicalJoin(condition=[AND(=($6, $13), =($7, $15))], joinType=[left])
   :  :- LogicalJoin(condition=[=($10, $12)], joinType=[left])
   :  :  :- LogicalJoin(condition=[AND(=($2, $8), =($3, $10))], joinType=[left])
   :  :  :  :- LogicalJoin(condition=[AND(=($1, $4), =($3, $7))], joinType=[left])
   :  :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Assignments]])
   :  :  :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Customers]])
   :  :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Documents]])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, PhaseDetails]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Organizations]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Customers]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultiJoin(commonJoinKey=[common_id], joinTypes=[LEFT, LEFT, LEFT, LEFT, LEFT], inputUniqueKeys=[(assignment_id), (user_id), (detail_id), (phase_id), (org_id), (user_id)], joinConditions=[((user_id = user_id0) AND (common_id = common_id0)), ((detail_id = detail_id0) AND (common_id = common_id1)), (common_id1 = common_id2), ((depart_num = org_id) AND (common_id0 = common_id3)), ((creator_nm = depart_num0) AND (common_id1 = common_id4))], select=[assignment_id,user_id,detail_id,common_id,user_id0,name,depart_num,common_id0,detail_id0,creator_nm,common_id1,phase_id,common_id2,org_id,org_name,common_id3,user_id1,name0,depart_num0,common_id4], rowType=[RecordType(VARCHAR(2147483647) assignment_id, VARCHAR(2147483647) user_id, VARCHAR(2147483647) detail_id, VARCHAR(2147483647) common_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) name, VARCHAR(2147483647) depart_num, VARCHAR(2147483647) common_id0, VARCHAR(2147483647) detail_id0, VARCHAR(2147483647) creator_nm, VARCHAR(2147483647) common_id1, VARCHAR(2147483647) phase_id, VARCHAR(2147483647) common_id2, VARCHAR(2147483647) org_id, VARCHAR(2147483647) org_name, VARCHAR(2147483647) common_id3, VARCHAR(2147483647) user_id1, VARCHAR(2147483647) name0, VARCHAR(2147483647) depart_num0, VARCHAR(2147483647) common_id4)])
:- Exchange(distribution=[hash[common_id]])
:  +- ChangelogNormalize(key=[assignment_id])
:     +- Exchange(distribution=[hash[assignment_id]])
:        +- TableSourceScan(table=[[default_catalog, default_database, Assignments]], fields=[assignment_id, user_id, detail_id, common_id])
:- Exchange(distribution=[hash[common_id]])(reuse_id=[1])
:  +- ChangelogNormalize(key=[user_id])
:     +- Exchange(distribution=[hash[user_id]])
:        +- TableSourceScan(table=[[default_catalog, default_database, Customers]], fields=[user_id, name, depart_num, common_id])
:- Exchange(distribution=[hash[common_id]])
:  +- ChangelogNormalize(key=[detail_id])
:     +- Exchange(distribution=[hash[detail_id]])
:        +- TableSourceScan(table=[[default_catalog, default_database, Documents]], fields=[detail_id, creator_nm, common_id])
:- Exchange(distribution=[hash[common_id]])
:  +- ChangelogNormalize(key=[phase_id])
:     +- Exchange(distribution=[hash[phase_id]])
:        +- TableSourceScan(table=[[default_catalog, default_database, PhaseDetails]], fields=[phase_id, common_id])
:- Exchange(distribution=[hash[common_id]])
:  +- ChangelogNormalize(key=[org_id])
:     +- Exchange(distribution=[hash[org_id]])
:        +- TableSourceScan(table=[[default_catalog, default_database, Organizations]], fields=[org_id, org_name, common_id])
+- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComplexCommonJoinKeyMissingProjection">
    <Resource name="sql">
      <![CDATA[SELECT *
    FROM Assignments assignments
    LEFT JOIN Documents AS documents
        ON assignments.detail_id = documents.detail_id
        AND assignments.common_id = documents.common_id
    LEFT JOIN Documents AS other_documents
        ON assignments.user_id = other_documents.common_id
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(assignment_id=[$0], user_id=[$1], detail_id=[$2], common_id=[$3], detail_id0=[$4], creator_nm=[$5], common_id0=[$6], detail_id1=[$7], creator_nm0=[$8], common_id1=[$9])
+- LogicalJoin(condition=[=($1, $9)], joinType=[left])
   :- LogicalJoin(condition=[AND(=($2, $4), =($3, $6))], joinType=[left])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Assignments]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Documents]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Documents]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (detail_id)], joinConditions=[=(user_id, common_id1)], select=[assignment_id,user_id,detail_id,common_id,detail_id0,creator_nm,common_id0,detail_id1,creator_nm0,common_id1], rowType=[RecordType(VARCHAR(2147483647) assignment_id, VARCHAR(2147483647) user_id, VARCHAR(2147483647) detail_id, VARCHAR(2147483647) common_id, VARCHAR(2147483647) detail_id0, VARCHAR(2147483647) creator_nm, VARCHAR(2147483647) common_id0, VARCHAR(2147483647) detail_id1, VARCHAR(2147483647) creator_nm0, VARCHAR(2147483647) common_id1)])
:- Exchange(distribution=[hash[user_id]])
:  +- MultiJoin(commonJoinKey=[detail_id, common_id], joinTypes=[LEFT], inputUniqueKeys=[(assignment_id), (detail_id)], joinConditions=[AND(=(detail_id, detail_id0), =(common_id, common_id0))], select=[assignment_id,user_id,detail_id,common_id,detail_id0,creator_nm,common_id0], rowType=[RecordType(VARCHAR(2147483647) assignment_id, VARCHAR(2147483647) user_id, VARCHAR(2147483647) detail_id, VARCHAR(2147483647) common_id, VARCHAR(2147483647) detail_id0, VARCHAR(2147483647) creator_nm, VARCHAR(2147483647) common_id0)])
:     :- Exchange(distribution=[hash[detail_id, common_id]])
:     :  +- ChangelogNormalize(key=[assignment_id])
:     :     +- Exchange(distribution=[hash[assignment_id]])
:     :        +- TableSourceScan(table=[[default_catalog, default_database, Assignments]], fields=[assignment_id, user_id, detail_id, common_id])
:     +- Exchange(distribution=[hash[detail_id, common_id]])
:        +- ChangelogNormalize(key=[detail_id])
:           +- Exchange(distribution=[hash[detail_id]])
:              +- TableSourceScan(table=[[default_catalog, default_database, Documents]], fields=[detail_id, creator_nm, common_id])
+- Exchange(distribution=[hash[common_id]])
   +- ChangelogNormalize(key=[detail_id])
      +- Exchange(distribution=[hash[detail_id]])
         +- TableSourceScan(table=[[default_catalog, default_database, Documents]], fields=[detail_id, creator_nm, common_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComplexConditionalLogicWithMultiJoin">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, o.order_id, p.payment_id, pc.category_name, CASE   WHEN pc.is_premium = true AND p.price > 1000 THEN 'High-Value Premium'   WHEN pc.is_premium = true THEN 'Premium'   WHEN p.price > 500 THEN 'Standard High-Value'   ELSE 'Standard' END AS product_tier, CASE   WHEN pr.rating >= 4 AND pr.is_verified = true THEN 'Highly Recommended'   WHEN pr.rating >= 3 THEN 'Recommended'   WHEN pr.rating >= 2 THEN 'Average'   ELSE 'Not Recommended' END AS recommendation_status, CASE   WHEN pc.discount_rate > 0.2 THEN p.price * (1 - pc.discount_rate)   ELSE p.price END AS final_price FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id LEFT JOIN Payments p ON u.user_id = p.user_id LEFT JOIN ProductCategories pc ON o.product = pc.category_id LEFT JOIN ProductReviews pr ON o.product = pr.product_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], order_id=[$3], payment_id=[$6], category_name=[$10], product_tier=[CASE(AND($11, >($7, 1000)), _UTF-16LE'High-Value Premium':VARCHAR(19) CHARACTER SET "UTF-16LE", $11, _UTF-16LE'Premium':VARCHAR(19) CHARACTER SET "UTF-16LE", >($7, 500), _UTF-16LE'Standard High-Value':VARCHAR(19) CHARACTER SET "UTF-16LE", _UTF-16LE'Standard':VARCHAR(19) CHARACTER SET "UTF-16LE")], recommendation_status=[CASE(AND(>=($15, 4), $16), _UTF-16LE'Highly Recommended':VARCHAR(18) CHARACTER SET "UTF-16LE", >=($15, 3), _UTF-16LE'Recommended':VARCHAR(18) CHARACTER SET "UTF-16LE", >=($15, 2), _UTF-16LE'Average':VARCHAR(18) CHARACTER SET "UTF-16LE", _UTF-16LE'Not Recommended':VARCHAR(18) CHARACTER SET "UTF-16LE")], final_price=[CASE(>($12, 0.2:DECIMAL(2, 1)), *($7, -(1, $12)), CAST($7):DOUBLE)])
+- LogicalJoin(condition=[=($5, $14)], joinType=[left])
   :- LogicalJoin(condition=[=($5, $9)], joinType=[left])
   :  :- LogicalJoin(condition=[=($0, $8)], joinType=[left])
   :  :  :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, ProductCategories]])
   +- LogicalTableScan(table=[[default_catalog, default_database, ProductReviews]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, order_id, payment_id, category_name, CASE(AND(is_premium, >(price, 1000)), 'High-Value Premium', is_premium, 'Premium', >(price, 500), 'Standard High-Value', 'Standard') AS product_tier, CASE(AND(>=(rating, 4), is_verified), 'Highly Recommended', >=(rating, 3), 'Recommended', >=(rating, 2), 'Average', 'Not Recommended') AS recommendation_status, CASE(>(discount_rate, 0.2), *(price, -(1, discount_rate)), CAST(price AS DOUBLE)) AS final_price])
+- MultiJoin(commonJoinKey=[product], joinTypes=[LEFT, LEFT], inputUniqueKeys=[noUniqueKey, (category_id), noUniqueKey], joinConditions=[=(product, category_id), =(product, product_id)], select=[user_id,order_id,product,payment_id,price,category_id,category_name,is_premium,discount_rate,product_id,rating,is_verified], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) order_id, VARCHAR(2147483647) product, VARCHAR(2147483647) payment_id, INTEGER price, VARCHAR(2147483647) category_id, VARCHAR(2147483647) category_name, BOOLEAN is_premium, DOUBLE discount_rate, VARCHAR(2147483647) product_id, INTEGER rating, BOOLEAN is_verified)])
   :- Exchange(distribution=[hash[product]])
   :  +- Calc(select=[user_id, order_id, product, payment_id, price])
   :     +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, LEFT], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,order_id,user_id0,product,payment_id,price,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) product, VARCHAR(2147483647) payment_id, INTEGER price, VARCHAR(2147483647) user_id1)])
   :        :- Exchange(distribution=[hash[user_id]])
   :        :  +- ChangelogNormalize(key=[user_id])
   :        :     +- Exchange(distribution=[hash[user_id]])
   :        :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id], metadata=[]]], fields=[user_id])
   :        :- Exchange(distribution=[hash[user_id]])
   :        :  +- TableSourceScan(table=[[default_catalog, default_database, Orders]], fields=[order_id, user_id, product])
   :        +- Exchange(distribution=[hash[user_id]])
   :           +- TableSourceScan(table=[[default_catalog, default_database, Payments]], fields=[payment_id, price, user_id])
   :- Exchange(distribution=[hash[category_id]])
   :  +- ChangelogNormalize(key=[category_id])
   :     +- Exchange(distribution=[hash[category_id]])
   :        +- TableSourceScan(table=[[default_catalog, default_database, ProductCategories]], fields=[category_id, category_name, is_premium, discount_rate])
   +- Exchange(distribution=[hash[product_id]])
      +- Calc(select=[product_id, rating, is_verified])
         +- ChangelogNormalize(key=[review_id])
            +- Exchange(distribution=[hash[review_id]])
               +- TableSourceScan(table=[[default_catalog, default_database, ProductReviews]], fields=[review_id, product_id, rating, is_verified])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComplexCTEWithMultiJoin">
    <Resource name="sql">
      <![CDATA[WITH user_orders AS (  SELECT u.user_id, u.name, o.order_id, o.product, p.payment_id, p.price   FROM Users u   LEFT JOIN Orders o ON u.user_id = o.user_id   LEFT JOIN Payments p ON u.user_id = p.user_id), order_details AS (  SELECT uo.*, os.status_name, os.is_final, pm.method_name, pm.processing_fee   FROM user_orders uo   LEFT JOIN OrderStatus os ON uo.order_id = os.status_id   LEFT JOIN PaymentMethods pm ON uo.payment_id = pm.method_id), final_summary AS (  SELECT     user_id,     name,     COUNT(order_id) as total_orders,     SUM(price) as total_spent,     AVG(price) as avg_order_value,     COUNT(CASE WHEN is_final = true THEN 1 END) as completed_orders   FROM order_details   GROUP BY user_id, name) SELECT * FROM final_summary]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], total_orders=[$2], total_spent=[$3], avg_order_value=[$4], completed_orders=[$5])
+- LogicalAggregate(group=[{0, 1}], total_orders=[COUNT($2)], total_spent=[SUM($3)], avg_order_value=[AVG($3)], completed_orders=[COUNT($4)])
   +- LogicalProject(user_id=[$0], name=[$1], order_id=[$2], price=[$5], $f4=[CASE($7, 1, null:INTEGER)])
      +- LogicalProject(user_id=[$0], name=[$1], order_id=[$2], product=[$3], payment_id=[$4], price=[$5], status_name=[$7], is_final=[$8], method_name=[$10], processing_fee=[$11])
         +- LogicalJoin(condition=[=($4, $9)], joinType=[left])
            :- LogicalJoin(condition=[=($2, $6)], joinType=[left])
            :  :- LogicalProject(user_id=[$0], name=[$1], order_id=[$3], product=[$5], payment_id=[$6], price=[$7])
            :  :  +- LogicalJoin(condition=[=($0, $8)], joinType=[left])
            :  :     :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
            :  :     :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
            :  :     :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
            :  :     +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
            :  +- LogicalTableScan(table=[[default_catalog, default_database, OrderStatus]])
            +- LogicalTableScan(table=[[default_catalog, default_database, PaymentMethods]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
GroupAggregate(groupBy=[user_id, name], select=[user_id, name, COUNT_RETRACT(order_id) AS total_orders, SUM_RETRACT(price) AS total_spent, AVG_RETRACT(price) AS avg_order_value, COUNT_RETRACT($f4) AS completed_orders])
+- Exchange(distribution=[hash[user_id, name]])
   +- Calc(select=[user_id, name, order_id, price, CASE(is_final, 1, null:INTEGER) AS $f4])
      +- MultiJoin(commonJoinKey=[payment_id], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (method_id)], joinConditions=[=(payment_id, method_id)], select=[user_id,name,order_id,payment_id,price,is_final,method_id], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) payment_id, INTEGER price, BOOLEAN is_final, VARCHAR(2147483647) method_id)])
         :- Exchange(distribution=[hash[payment_id]])
         :  +- Calc(select=[user_id, name, order_id, payment_id, price, is_final])
         :     +- MultiJoin(commonJoinKey=[order_id], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (status_id)], joinConditions=[=(order_id, status_id)], select=[user_id,name,order_id,payment_id,price,status_id,is_final], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) payment_id, INTEGER price, VARCHAR(2147483647) status_id, BOOLEAN is_final)])
         :        :- Exchange(distribution=[hash[order_id]])
         :        :  +- Calc(select=[user_id, name, order_id, payment_id, price])
         :        :     +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, LEFT], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,name,order_id,user_id0,payment_id,price,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, INTEGER price, VARCHAR(2147483647) user_id1)])
         :        :        :- Exchange(distribution=[hash[user_id]])
         :        :        :  +- ChangelogNormalize(key=[user_id])
         :        :        :     +- Exchange(distribution=[hash[user_id]])
         :        :        :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
         :        :        :- Exchange(distribution=[hash[user_id]])
         :        :        :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
         :        :        +- Exchange(distribution=[hash[user_id]])
         :        :           +- TableSourceScan(table=[[default_catalog, default_database, Payments]], fields=[payment_id, price, user_id])
         :        +- Exchange(distribution=[hash[status_id]])
         :           +- ChangelogNormalize(key=[status_id])
         :              +- Exchange(distribution=[hash[status_id]])
         :                 +- TableSourceScan(table=[[default_catalog, default_database, OrderStatus, project=[status_id, is_final], metadata=[]]], fields=[status_id, is_final])
         +- Exchange(distribution=[hash[method_id]])
            +- ChangelogNormalize(key=[method_id])
               +- Exchange(distribution=[hash[method_id]])
                  +- TableSourceScan(table=[[default_catalog, default_database, PaymentMethods, project=[method_id], metadata=[]]], fields=[method_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComplexNestedCTEWithAggregationAndFunctions">
    <Resource name="sql">
      <![CDATA[WITH base_orders AS (  SELECT u.user_id, u.name, o.order_id, p.payment_id, p.price   FROM Users u   INNER JOIN Orders o ON u.user_id = o.user_id   INNER JOIN Payments p ON u.user_id = p.user_id), enriched_orders AS (  SELECT     bo.*,     om.metric_type,     om.metric_value,     CASE       WHEN bo.price > 1000 THEN 'Premium'       WHEN bo.price > 500 THEN 'Standard'       ELSE 'Basic'     END as order_tier   FROM base_orders bo   LEFT JOIN OrderMetrics om ON bo.order_id = om.order_id), aggregated_metrics AS (  SELECT     user_id,     name,     COUNT(DISTINCT order_id) as total_orders,     SUM(price) as total_spent,     AVG(price) as avg_order_value,     MAX(metric_value) as max_metric,     MIN(metric_value) as min_metric,     COUNT(CASE WHEN order_tier = 'Premium' THEN 1 END) as premium_orders   FROM enriched_orders   GROUP BY user_id, name) SELECT   user_id,   UPPER(name) as user_name,   total_orders,   ROUND(total_spent, 2) as total_spent_rounded,   ROUND(avg_order_value, 2) as avg_order_value_rounded,   CONCAT('User: ', name, ' has ', CAST(total_orders AS STRING), ' orders') as summary,   CASE     WHEN total_orders > 10 THEN 'Frequent Customer'     WHEN total_orders > 5 THEN 'Regular Customer'     ELSE 'Occasional Customer'   END as customer_type FROM aggregated_metrics WHERE total_spent > 0]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], user_name=[UPPER($1)], total_orders=[$2], total_spent_rounded=[ROUND($3, 2)], avg_order_value_rounded=[ROUND($4, 2)], summary=[CONCAT(_UTF-16LE'User: ', $1, _UTF-16LE' has ', CAST($2):VARCHAR(2147483647) CHARACTER SET "UTF-16LE" NOT NULL, _UTF-16LE' orders')], customer_type=[CASE(>($2, 10), _UTF-16LE'Frequent Customer':VARCHAR(19) CHARACTER SET "UTF-16LE", >($2, 5), _UTF-16LE'Regular Customer':VARCHAR(19) CHARACTER SET "UTF-16LE", _UTF-16LE'Occasional Customer':VARCHAR(19) CHARACTER SET "UTF-16LE")])
+- LogicalFilter(condition=[>($3, 0)])
   +- LogicalAggregate(group=[{0, 1}], total_orders=[COUNT(DISTINCT $2)], total_spent=[SUM($3)], avg_order_value=[AVG($3)], max_metric=[MAX($4)], min_metric=[MIN($4)], premium_orders=[COUNT($5)])
      +- LogicalProject(user_id=[$0], name=[$1], order_id=[$2], price=[$4], metric_value=[$6], $f5=[CASE(=($7, _UTF-16LE'Premium'), 1, null:INTEGER)])
         +- LogicalProject(user_id=[$0], name=[$1], order_id=[$2], payment_id=[$3], price=[$4], metric_type=[$7], metric_value=[$8], order_tier=[CASE(>($4, 1000), _UTF-16LE'Premium':VARCHAR(8) CHARACTER SET "UTF-16LE", >($4, 500), _UTF-16LE'Standard':VARCHAR(8) CHARACTER SET "UTF-16LE", _UTF-16LE'Basic':VARCHAR(8) CHARACTER SET "UTF-16LE")])
            +- LogicalJoin(condition=[=($2, $6)], joinType=[left])
               :- LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6], price=[$7])
               :  +- LogicalJoin(condition=[=($0, $8)], joinType=[inner])
               :     :- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
               :     :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
               :     :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
               :     +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
               +- LogicalTableScan(table=[[default_catalog, default_database, OrderMetrics]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, UPPER(name) AS user_name, total_orders, ROUND(total_spent, 2) AS total_spent_rounded, ROUND(avg_order_value, 2) AS avg_order_value_rounded, CONCAT('User: ', name, ' has ', CAST(total_orders AS VARCHAR(2147483647)), ' orders') AS summary, CASE(>(total_orders, 10), 'Frequent Customer', >(total_orders, 5), 'Regular Customer', 'Occasional Customer') AS customer_type], where=[>(total_spent, 0)])
+- GroupAggregate(groupBy=[user_id, name], select=[user_id, name, COUNT_RETRACT(DISTINCT order_id) AS total_orders, SUM_RETRACT(price) AS total_spent, AVG_RETRACT(price) AS avg_order_value])
   +- Exchange(distribution=[hash[user_id, name]])
      +- MultiJoin(commonJoinKey=[order_id], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, noUniqueKey], joinConditions=[=(order_id, order_id0)], select=[user_id,name,order_id,price,order_id0,metric_value], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, INTEGER price, VARCHAR(2147483647) order_id0, DOUBLE metric_value)])
         :- Exchange(distribution=[hash[order_id]])
         :  +- Calc(select=[user_id, name, order_id, price])
         :     +- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER, INNER], inputUniqueKeys=[(user_id), (order_id), noUniqueKey], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,name,order_id,user_id0,price,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, INTEGER price, VARCHAR(2147483647) user_id1)])
         :        :- Exchange(distribution=[hash[user_id]])
         :        :  +- ChangelogNormalize(key=[user_id])
         :        :     +- Exchange(distribution=[hash[user_id]])
         :        :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
         :        :- Exchange(distribution=[hash[user_id]])
         :        :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
         :        +- Exchange(distribution=[hash[user_id]])
         :           +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[price, user_id], metadata=[]]], fields=[price, user_id])
         +- Exchange(distribution=[hash[order_id]])
            +- Calc(select=[order_id, metric_value])
               +- ChangelogNormalize(key=[metric_id])
                  +- Exchange(distribution=[hash[metric_id]])
                     +- TableSourceScan(table=[[default_catalog, default_database, OrderMetrics, project=[order_id, metric_value, metric_id], metadata=[]]], fields=[order_id, metric_value, metric_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testCrossJoinUnnestWithMultiJoinInsert">
    <Resource name="sql">
      <![CDATA[INSERT INTO UnnestSink
(
    detail_id,
    element_data,
    data_value_id,
    user_id,
    order_id
)
SELECT
    d.detail_id,
    TRIM(REGEXP_REPLACE(edata, '[\[\]\"]', '')) AS element_data,
    ARRAY_POSITION(split(REGEXP_REPLACE(d.data, '^\["|"\]$', '') , '", "'), edata) as data_value_id,
    d.user_id,
    o.order_id
FROM Detail d
INNER JOIN Orders o
    ON o.user_id = d.user_id
INNER JOIN Payments p
    ON p.user_id = d.user_id
LEFT JOIN Shipments s
    ON s.user_id = d.user_id
CROSS JOIN UNNEST(split(REGEXP_REPLACE(d.data, '^\["|"\]$', '') , '", "')) AS T(edata)
WHERE NOT (s.location IS NOT NULL)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.UnnestSink], targetColumns=[[0],[1],[2],[3],[4]], fields=[detail_id, element_data, data_value_id, user_id, order_id])
+- LogicalProject(detail_id=[$0], element_data=[TRIM(FLAG(BOTH), _UTF-16LE' ', REGEXP_REPLACE($13, _UTF-16LE'[\[\]\"]', _UTF-16LE''))], data_value_id=[ARRAY_POSITION(split(REGEXP_REPLACE($3, _UTF-16LE'^\["|"\]$', _UTF-16LE''), _UTF-16LE'", "'), $13)], user_id=[$2], order_id=[$5])
   +- LogicalFilter(condition=[NOT(IS NOT NULL($11))])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
         :- LogicalJoin(condition=[=($12, $2)], joinType=[left])
         :  :- LogicalJoin(condition=[=($10, $2)], joinType=[inner])
         :  :  :- LogicalJoin(condition=[=($6, $2)], joinType=[inner])
         :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Detail]])
         :  :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
         :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, Shipments]])
         +- LogicalProject(edata=[$0])
            +- Uncollect
               +- LogicalProject(EXPR$0=[split(REGEXP_REPLACE($cor0.data, _UTF-16LE'^\["|"\]$', _UTF-16LE''), _UTF-16LE'", "')])
                  +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.UnnestSink], targetColumns=[[0],[1],[2],[3],[4]], fields=[detail_id, element_data, data_value_id, user_id, order_id])
+- Calc(select=[detail_id, TRIM(BOTH, ' ', REGEXP_REPLACE(f0, '[\[\]\"]', '')) AS element_data, ARRAY_POSITION(split(REGEXP_REPLACE(data, '^\["|"\]$', ''), '", "'), f0) AS data_value_id, user_id, order_id])
   +- Correlate(invocation=[$UNNEST_ROWS$1(split(REGEXP_REPLACE($cor0.data, _UTF-16LE'^\["|"\]$', _UTF-16LE''), _UTF-16LE'", "'))], correlate=[table($UNNEST_ROWS$1(split(REGEXP_REPLACE($cor0.data, '^\["|"\]$', ''), '", "')))], select=[detail_id,description,user_id,data,timestamp,order_id,user_id0,product,payment_id,price,user_id1,location,user_id2,f0], rowType=[RecordType(VARCHAR(2147483647) detail_id, VARCHAR(2147483647) description, VARCHAR(2147483647) user_id, VARCHAR(2147483647) data, BIGINT timestamp, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) product, VARCHAR(2147483647) payment_id, INTEGER price, VARCHAR(2147483647) user_id1, VARCHAR(2147483647) location, VARCHAR(2147483647) user_id2, VARCHAR(2147483647) f0)], joinType=[INNER])
      +- Calc(select=[detail_id, description, user_id, data, timestamp, order_id, user_id0, product, payment_id, price, user_id1, location, user_id2], where=[IS NULL(location)])
         +- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER, INNER, LEFT], inputUniqueKeys=[(detail_id), (order_id), (payment_id), noUniqueKey], joinConditions=[=(user_id0, user_id), =(user_id1, user_id), =(user_id2, user_id)], select=[detail_id,description,user_id,data,timestamp,order_id,user_id0,product,payment_id,price,user_id1,location,user_id2], rowType=[RecordType(VARCHAR(2147483647) detail_id, VARCHAR(2147483647) description, VARCHAR(2147483647) user_id, VARCHAR(2147483647) data, BIGINT timestamp, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) product, VARCHAR(2147483647) payment_id, INTEGER price, VARCHAR(2147483647) user_id1, VARCHAR(2147483647) location, VARCHAR(2147483647) user_id2)])
            :- Exchange(distribution=[hash[user_id]])
            :  +- TableSourceScan(table=[[default_catalog, default_database, Detail]], fields=[detail_id, description, user_id, data, timestamp])
            :- Exchange(distribution=[hash[user_id]])
            :  +- TableSourceScan(table=[[default_catalog, default_database, Orders]], fields=[order_id, user_id, product])
            :- Exchange(distribution=[hash[user_id]])
            :  +- TableSourceScan(table=[[default_catalog, default_database, Payments]], fields=[payment_id, price, user_id])
            +- Exchange(distribution=[hash[user_id]])
               +- TableSourceScan(table=[[default_catalog, default_database, Shipments]], fields=[location, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPreservesUpsertKeyThreeWayJoin">
    <Resource name="sql">
      <![CDATA[INSERT INTO sink_three_way SELECT    o.user_id,    o.order_id,    p.user_id,    p.payment_id,    u.user_id,    u.description FROM UsersPK u JOIN OrdersPK o  ON  o.user_id = u.user_id JOIN PaymentsPK p  ON  o.user_id = p.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.sink_three_way], fields=[user_id, order_id, user_id0, payment_id, user_id1, description])
+- LogicalProject(user_id=[$5], order_id=[$4], user_id0=[$8], payment_id=[$7], user_id1=[$0], description=[$3])
   +- LogicalJoin(condition=[=($5, $8)], joinType=[inner])
      :- LogicalJoin(condition=[=($5, $0)], joinType=[inner])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, UsersPK]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, OrdersPK]])
      +- LogicalTableScan(table=[[default_catalog, default_database, PaymentsPK]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.sink_three_way], fields=[user_id, order_id, user_id0, payment_id, user_id1, description])
+- Calc(select=[user_id0 AS user_id, order_id, user_id1 AS user_id0, payment_id, user_id AS user_id1, description])
   +- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER, INNER], inputUniqueKeys=[(user_id), (order_id, user_id), (payment_id, user_id)], joinConditions=[=(user_id0, user_id), =(user_id0, user_id1)], select=[user_id,description,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) description, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
      :- Exchange(distribution=[hash[user_id]])
      :  +- TableSourceScan(table=[[default_catalog, default_database, UsersPK, project=[user_id, description], metadata=[]]], fields=[user_id, description])
      :- Exchange(distribution=[hash[user_id]])
      :  +- TableSourceScan(table=[[default_catalog, default_database, OrdersPK, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
      +- Exchange(distribution=[hash[user_id]])
         +- TableSourceScan(table=[[default_catalog, default_database, PaymentsPK, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testCTEWithMultiJoinV2">
    <Resource name="sql">
      <![CDATA[WITH high_budget_depts AS (  SELECT dept_id, dept_name, budget   FROM Departments   WHERE budget > 600000), active_projects AS (  SELECT project_id, project_name, dept_id   FROM Projects   WHERE status = 'ACTIVE') SELECT   u.user_id,   u.name,   o.order_id,   hbd.dept_name,   ap.project_name,   hbd.budget FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id LEFT JOIN high_budget_depts hbd ON o.product = hbd.dept_id LEFT JOIN active_projects ap ON hbd.dept_id = ap.dept_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], dept_name=[$7], project_name=[$10], budget=[$8])
+- LogicalJoin(condition=[=($6, $11)], joinType=[left])
   :- LogicalJoin(condition=[=($5, $6)], joinType=[left])
   :  :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   :  +- LogicalProject(dept_id=[$0], dept_name=[$1], budget=[$2])
   :     +- LogicalFilter(condition=[>($2, 600000)])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, Departments]])
   +- LogicalProject(project_id=[$0], project_name=[$1], dept_id=[$2])
      +- LogicalFilter(condition=[=($3, _UTF-16LE'ACTIVE')])
         +- LogicalTableScan(table=[[default_catalog, default_database, Projects]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, dept_name, project_name, budget])
+- MultiJoin(commonJoinKey=[product], joinTypes=[LEFT, LEFT], inputUniqueKeys=[noUniqueKey, (dept_id), noUniqueKey], joinConditions=[=(product, dept_id), =(dept_id, dept_id0)], select=[user_id,name,order_id,product,dept_id,dept_name,budget,project_name,dept_id0], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) product, VARCHAR(2147483647) dept_id, VARCHAR(2147483647) dept_name, DOUBLE budget, VARCHAR(2147483647) project_name, VARCHAR(2147483647) dept_id0)])
   :- Exchange(distribution=[hash[product]])
   :  +- Calc(select=[user_id, name, order_id, product])
   :     +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[(user_id), (order_id)], joinConditions=[=(user_id, user_id0)], select=[user_id,name,order_id,user_id0,product], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) product)])
   :        :- Exchange(distribution=[hash[user_id]])
   :        :  +- ChangelogNormalize(key=[user_id])
   :        :     +- Exchange(distribution=[hash[user_id]])
   :        :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :        +- Exchange(distribution=[hash[user_id]])
   :           +- TableSourceScan(table=[[default_catalog, default_database, Orders]], fields=[order_id, user_id, product])
   :- Exchange(distribution=[hash[dept_id]])
   :  +- ChangelogNormalize(key=[dept_id], condition=[>(budget, 600000)])
   :     +- Exchange(distribution=[hash[dept_id]])
   :        +- TableSourceScan(table=[[default_catalog, default_database, Departments, filter=[]]], fields=[dept_id, dept_name, budget])
   +- Exchange(distribution=[hash[dept_id]])
      +- Calc(select=[project_name, dept_id])
         +- ChangelogNormalize(key=[project_id], condition=[=(status, 'ACTIVE')])
            +- Exchange(distribution=[hash[project_id]])
               +- TableSourceScan(table=[[default_catalog, default_database, Projects, filter=[]]], fields=[project_id, project_name, dept_id, status])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFourWayComplexJoinExecPlan">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id, s.location FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id INNER JOIN Payments p ON u.user_id = p.user_id AND (u.cash >= p.price OR p.price < 0) LEFT JOIN Shipments s ON p.user_id = s.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6], location=[$9])
+- LogicalJoin(condition=[=($8, $10)], joinType=[left])
   :- LogicalJoin(condition=[AND(=($0, $8), OR(>=($2, $7), <($7, 0)))], joinType=[inner])
   :  :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Shipments]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id, location])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, INNER, LEFT], inputUniqueKeys=[(user_id), (order_id), (payment_id), noUniqueKey], joinConditions=[(user_id = user_id0), ((user_id = user_id1) AND ((cash >= price) OR (price < 0))), (user_id1 = user_id2)], select=[user_id,name,cash,order_id,user_id0,payment_id,price,user_id1,location,user_id2], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, INTEGER cash, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, INTEGER price, VARCHAR(2147483647) user_id1, VARCHAR(2147483647) location, VARCHAR(2147483647) user_id2)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- ChangelogNormalize(key=[user_id])
   :     +- Exchange(distribution=[hash[user_id]])
   :        +- TableSourceScan(table=[[default_catalog, default_database, Users]], fields=[user_id, name, cash])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Payments]], fields=[payment_id, price, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Shipments]], fields=[location, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFourWayComplexJoinExplain">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6], location=[$9])
+- LogicalJoin(condition=[=($8, $10)], joinType=[left])
   :- LogicalJoin(condition=[AND(=($0, $8), OR(>=($2, $7), <($7, 0)))], joinType=[inner])
   :  :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Shipments]])

== Optimized Physical Plan ==
Calc(select=[user_id, name, order_id, payment_id, location])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, INNER, LEFT], inputUniqueKeys=[(user_id), (order_id), (payment_id), noUniqueKey], joinConditions=[=(user_id, user_id0), AND(=(user_id, user_id1), OR(>=(cash, price), <(price, 0))), =(user_id1, user_id2)], select=[user_id,name,cash,order_id,user_id0,payment_id,price,user_id1,location,user_id2], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, INTEGER cash, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, INTEGER price, VARCHAR(2147483647) user_id1, VARCHAR(2147483647) location, VARCHAR(2147483647) user_id2)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- ChangelogNormalize(key=[user_id])
   :     +- Exchange(distribution=[hash[user_id]])
   :        +- TableSourceScan(table=[[default_catalog, default_database, Users]], fields=[user_id, name, cash])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Payments]], fields=[payment_id, price, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Shipments]], fields=[location, user_id])

== Optimized Execution Plan ==
Calc(select=[user_id, name, order_id, payment_id, location])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, INNER, LEFT], inputUniqueKeys=[(user_id), (order_id), (payment_id), noUniqueKey], joinConditions=[(user_id = user_id0), ((user_id = user_id1) AND ((cash >= price) OR (price < 0))), (user_id1 = user_id2)], select=[user_id,name,cash,order_id,user_id0,payment_id,price,user_id1,location,user_id2], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, INTEGER cash, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, INTEGER price, VARCHAR(2147483647) user_id1, VARCHAR(2147483647) location, VARCHAR(2147483647) user_id2)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- ChangelogNormalize(key=[user_id])
   :     +- Exchange(distribution=[hash[user_id]])
   :        +- TableSourceScan(table=[[default_catalog, default_database, Users]], fields=[user_id, name, cash])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Payments]], fields=[payment_id, price, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Shipments]], fields=[location, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFourWayComplexJoinRelPlan">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id, s.location FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id INNER JOIN Payments p ON u.user_id = p.user_id AND (u.cash >= p.price OR p.price < 0) LEFT JOIN Shipments s ON p.user_id = s.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6], location=[$9])
+- LogicalJoin(condition=[=($8, $10)], joinType=[left])
   :- LogicalJoin(condition=[AND(=($0, $8), OR(>=($2, $7), <($7, 0)))], joinType=[inner])
   :  :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Shipments]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id, location])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, INNER, LEFT], inputUniqueKeys=[(user_id), (order_id), (payment_id), noUniqueKey], joinConditions=[=(user_id, user_id0), AND(=(user_id, user_id1), OR(>=(cash, price), <(price, 0))), =(user_id1, user_id2)], select=[user_id,name,cash,order_id,user_id0,payment_id,price,user_id1,location,user_id2], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, INTEGER cash, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, INTEGER price, VARCHAR(2147483647) user_id1, VARCHAR(2147483647) location, VARCHAR(2147483647) user_id2)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- ChangelogNormalize(key=[user_id])
   :     +- Exchange(distribution=[hash[user_id]])
   :        +- TableSourceScan(table=[[default_catalog, default_database, Users]], fields=[user_id, name, cash])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Payments]], fields=[payment_id, price, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Shipments]], fields=[location, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFourWayJoinNoCommonJoinKeyRelPlan">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id, s.location FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id LEFT JOIN LookupTable ON u.name = LookupTable.name LEFT JOIN Payments p ON u.user_id = p.user_id LEFT JOIN Shipments s ON o.user_id = s.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$9], location=[$12])
+- LogicalJoin(condition=[=($4, $13)], joinType=[left])
   :- LogicalJoin(condition=[=($0, $11)], joinType=[left])
   :  :- LogicalJoin(condition=[=($1, $7)], joinType=[left])
   :  :  :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, LookupTable]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Shipments]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id, location])
+- MultiJoin(commonJoinKey=[user_id0], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, noUniqueKey], joinConditions=[=(user_id0, user_id2)], select=[user_id,name,order_id,user_id0,payment_id,location,user_id2], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) location, VARCHAR(2147483647) user_id2)])
   :- Exchange(distribution=[hash[user_id0]])
   :  +- Calc(select=[user_id, name, order_id, user_id0, payment_id])
   :     +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (payment_id)], joinConditions=[=(user_id, user_id1)], select=[user_id,name,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :        :- Exchange(distribution=[hash[user_id]])
   :        :  +- Calc(select=[user_id, name, order_id, user_id0])
   :        :     +- MultiJoin(commonJoinKey=[name], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, noUniqueKey], joinConditions=[=(name, name0)], select=[user_id,name,order_id,user_id0,name0], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) name0)])
   :        :        :- Exchange(distribution=[hash[name]])
   :        :        :  +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[(user_id), (order_id)], joinConditions=[=(user_id, user_id0)], select=[user_id,name,order_id,user_id0], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0)])
   :        :        :     :- Exchange(distribution=[hash[user_id]])
   :        :        :     :  +- ChangelogNormalize(key=[user_id])
   :        :        :     :     +- Exchange(distribution=[hash[user_id]])
   :        :        :     :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :        :        :     +- Exchange(distribution=[hash[user_id]])
   :        :        :        +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   :        :        +- Exchange(distribution=[hash[name]])
   :        :           +- TableSourceScan(table=[[default_catalog, default_database, LookupTable, project=[name], metadata=[]]], fields=[name])
   :        +- Exchange(distribution=[hash[user_id]])
   :           +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Shipments]], fields=[location, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFourWayJoinNoCommonJoinKeyWithFunctionInCondition">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id, s.location FROM Users u LEFT JOIN Orders o ON o.user_id = u.user_id LEFT JOIN Payments p ON u.user_id = p.user_id      AND UPPER(u.name) = UPPER(p.payment_id)      AND (FLOOR(u.cash) >= FLOOR(p.price) OR p.price < 0) LEFT JOIN Shipments s ON p.payment_id = s.location ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6], location=[$9])
+- LogicalJoin(condition=[=($6, $9)], joinType=[left])
   :- LogicalProject(user_id=[$0], name=[$1], cash=[$2], order_id=[$3], user_id0=[$4], product=[$5], payment_id=[$7], price=[$8], user_id1=[$9])
   :  +- LogicalJoin(condition=[AND(=($0, $9), =($6, $10), OR(>=(FLOOR($2), FLOOR($8)), <($8, 0)))], joinType=[left])
   :     :- LogicalProject(user_id=[$0], name=[$1], cash=[$2], order_id=[$3], user_id0=[$4], product=[$5], $f6=[UPPER($1)])
   :     :  +- LogicalJoin(condition=[=($4, $0)], joinType=[left])
   :     :     :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :     :     +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   :     +- LogicalProject(payment_id=[$0], price=[$1], user_id=[$2], $f3=[UPPER($0)])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Shipments]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
MultiJoin(commonJoinKey=[payment_id], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, noUniqueKey], joinConditions=[=(payment_id, location)], select=[user_id,name,order_id,payment_id,location], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) location)])
:- Exchange(distribution=[hash[payment_id]])
:  +- Calc(select=[user_id, name, order_id, payment_id])
:     +- MultiJoin(commonJoinKey=[user_id, $f6], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (payment_id)], joinConditions=[AND(=(user_id, user_id1), =($f6, $f3), OR(>=(FLOOR(cash), FLOOR(price)), <(price, 0)))], select=[user_id,name,cash,order_id,$f6,payment_id,price,user_id1,$f3], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, INTEGER cash, VARCHAR(2147483647) order_id, VARCHAR(2147483647) $f6, VARCHAR(2147483647) payment_id, INTEGER price, VARCHAR(2147483647) user_id1, VARCHAR(2147483647) $f3)])
:        :- Exchange(distribution=[hash[user_id, $f6]])
:        :  +- Calc(select=[user_id, name, cash, order_id, UPPER(name) AS $f6])
:        :     +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[(user_id), (order_id)], joinConditions=[=(user_id0, user_id)], select=[user_id,name,cash,order_id,user_id0], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, INTEGER cash, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0)])
:        :        :- Exchange(distribution=[hash[user_id]])
:        :        :  +- ChangelogNormalize(key=[user_id])
:        :        :     +- Exchange(distribution=[hash[user_id]])
:        :        :        +- TableSourceScan(table=[[default_catalog, default_database, Users]], fields=[user_id, name, cash])
:        :        +- Exchange(distribution=[hash[user_id]])
:        :           +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
:        +- Exchange(distribution=[hash[user_id, $f3]])
:           +- Calc(select=[payment_id, price, user_id, UPPER(payment_id) AS $f3])
:              +- TableSourceScan(table=[[default_catalog, default_database, Payments]], fields=[payment_id, price, user_id])
+- Exchange(distribution=[hash[location]])
   +- TableSourceScan(table=[[default_catalog, default_database, Shipments, project=[location], metadata=[]]], fields=[location])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFourWayJoinTransitiveCommonJoinKeyRelPlan">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id, s.location FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id LEFT JOIN Payments p ON o.user_id = p.user_id LEFT JOIN Shipments s ON p.user_id = s.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6], location=[$9])
+- LogicalJoin(condition=[=($8, $10)], joinType=[left])
   :- LogicalJoin(condition=[=($4, $8)], joinType=[left])
   :  :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Shipments]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id, location])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, LEFT, LEFT], inputUniqueKeys=[(user_id), (order_id), (payment_id), noUniqueKey], joinConditions=[=(user_id, user_id0), =(user_id0, user_id1), =(user_id1, user_id2)], select=[user_id,name,order_id,user_id0,payment_id,user_id1,location,user_id2], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1, VARCHAR(2147483647) location, VARCHAR(2147483647) user_id2)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- ChangelogNormalize(key=[user_id])
   :     +- Exchange(distribution=[hash[user_id]])
   :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Shipments]], fields=[location, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFullOuterNotSupported">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id FROM Users u FULL OUTER JOIN Orders o ON u.user_id = o.user_id FULL OUTER JOIN Payments p ON o.user_id = p.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalJoin(condition=[=($4, $8)], joinType=[full])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[full])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id])
+- Join(joinType=[FullOuterJoin], where=[=(user_id0, user_id1)], select=[user_id, name, order_id, user_id0, payment_id, user_id1], leftInputSpec=[NoUniqueKey], rightInputSpec=[HasUniqueKey])
   :- Exchange(distribution=[hash[user_id0]])
   :  +- Join(joinType=[FullOuterJoin], where=[=(user_id, user_id0)], select=[user_id, name, order_id, user_id0], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[HasUniqueKey])
   :     :- Exchange(distribution=[hash[user_id]])
   :     :  +- ChangelogNormalize(key=[user_id])
   :     :     +- Exchange(distribution=[hash[user_id]])
   :     :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :     +- Exchange(distribution=[hash[user_id]])
   :        +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFunctionAndExpressionWithMultiJoin">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, UPPER(u.name) as user_name_upper, LOWER(o.product) as product_lower, CONCAT(u.name, ' - ', o.product) as user_product, SUBSTRING(pd.description, 1, 50) as description_preview, CHAR_LENGTH(pd.description) as description_length, FLOOR(p.price / 100.0) * 100 as price_rounded, CASE   WHEN p.price > 1000 THEN 'High'   WHEN p.price > 500 THEN 'Medium'   ELSE 'Low' END as price_tier, REGEXP_REPLACE(pd.tags, ',', ' | ') as formatted_tags, TO_TIMESTAMP_LTZ(pd.created_date, 3) as product_created, COALESCE(up.preferred_category, 'None') as user_preference, CASE   WHEN up.notification_level = 'HIGH' THEN 'Frequent Updates'   WHEN up.notification_level = 'MEDIUM' THEN 'Daily Updates'   ELSE 'Weekly Updates' END as notification_frequency FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id LEFT JOIN Payments p ON u.user_id = p.user_id LEFT JOIN ProductDetails pd ON o.product = pd.product_id LEFT JOIN UserPreferences up ON u.user_id = up.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], user_name_upper=[UPPER($1)], product_lower=[LOWER($5)], user_product=[CONCAT($1, _UTF-16LE' - ', $5)], description_preview=[SUBSTRING($11, 1, 50)], description_length=[CHAR_LENGTH($11)], price_rounded=[*(FLOOR(/($7, 100.0:DECIMAL(4, 1))), 100)], price_tier=[CASE(>($7, 1000), _UTF-16LE'High':VARCHAR(6) CHARACTER SET "UTF-16LE", >($7, 500), _UTF-16LE'Medium':VARCHAR(6) CHARACTER SET "UTF-16LE", _UTF-16LE'Low':VARCHAR(6) CHARACTER SET "UTF-16LE")], formatted_tags=[REGEXP_REPLACE($13, _UTF-16LE',', _UTF-16LE' | ')], product_created=[TO_TIMESTAMP_LTZ($12, 3)], user_preference=[COALESCE($15, _UTF-16LE'None')], notification_frequency=[CASE(=($16, _UTF-16LE'HIGH'), _UTF-16LE'Frequent Updates':VARCHAR(16) CHARACTER SET "UTF-16LE", =($16, _UTF-16LE'MEDIUM'), _UTF-16LE'Daily Updates':VARCHAR(16) CHARACTER SET "UTF-16LE", _UTF-16LE'Weekly Updates':VARCHAR(16) CHARACTER SET "UTF-16LE")])
+- LogicalJoin(condition=[=($0, $14)], joinType=[left])
   :- LogicalJoin(condition=[=($5, $9)], joinType=[left])
   :  :- LogicalJoin(condition=[=($0, $8)], joinType=[left])
   :  :  :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, ProductDetails]])
   +- LogicalTableScan(table=[[default_catalog, default_database, UserPreferences]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, UPPER(name) AS user_name_upper, LOWER(product) AS product_lower, CONCAT(name, ' - ', product) AS user_product, SUBSTRING(description, 1, 50) AS description_preview, CHAR_LENGTH(description) AS description_length, *(FLOOR(/(price, 100.0)), 100) AS price_rounded, CASE(>(price, 1000), 'High', >(price, 500), 'Medium', 'Low') AS price_tier, REGEXP_REPLACE(tags, ',', ' | ') AS formatted_tags, TO_TIMESTAMP_LTZ(created_date, 3) AS product_created, COALESCE(preferred_category, 'None') AS user_preference, CASE(=(notification_level, 'HIGH'), 'Frequent Updates', =(notification_level, 'MEDIUM'), 'Daily Updates', 'Weekly Updates') AS notification_frequency])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (user_id)], joinConditions=[=(user_id, user_id2)], select=[user_id,name,product,price,description,created_date,tags,user_id2,preferred_category,notification_level], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) product, INTEGER price, VARCHAR(2147483647) description, BIGINT created_date, VARCHAR(2147483647) tags, VARCHAR(2147483647) user_id2, VARCHAR(2147483647) preferred_category, VARCHAR(2147483647) notification_level)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- Calc(select=[user_id, name, product, price, description, created_date, tags])
   :     +- MultiJoin(commonJoinKey=[product], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (product_id)], joinConditions=[=(product, product_id)], select=[user_id,name,product,price,product_id,description,created_date,tags], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) product, INTEGER price, VARCHAR(2147483647) product_id, VARCHAR(2147483647) description, BIGINT created_date, VARCHAR(2147483647) tags)])
   :        :- Exchange(distribution=[hash[product]])
   :        :  +- Calc(select=[user_id, name, product, price])
   :        :     +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, LEFT], inputUniqueKeys=[(user_id), noUniqueKey, noUniqueKey], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,name,user_id0,product,price,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) product, INTEGER price, VARCHAR(2147483647) user_id1)])
   :        :        :- Exchange(distribution=[hash[user_id]])
   :        :        :  +- ChangelogNormalize(key=[user_id])
   :        :        :     +- Exchange(distribution=[hash[user_id]])
   :        :        :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :        :        :- Exchange(distribution=[hash[user_id]])
   :        :        :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[user_id, product], metadata=[]]], fields=[user_id, product])
   :        :        +- Exchange(distribution=[hash[user_id]])
   :        :           +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[price, user_id], metadata=[]]], fields=[price, user_id])
   :        +- Exchange(distribution=[hash[product_id]])
   :           +- ChangelogNormalize(key=[product_id])
   :              +- Exchange(distribution=[hash[product_id]])
   :                 +- TableSourceScan(table=[[default_catalog, default_database, ProductDetails, project=[product_id, description, created_date, tags], metadata=[]]], fields=[product_id, description, created_date, tags])
   +- Exchange(distribution=[hash[user_id]])
      +- ChangelogNormalize(key=[user_id])
         +- Exchange(distribution=[hash[user_id]])
            +- TableSourceScan(table=[[default_catalog, default_database, UserPreferences]], fields=[user_id, preferred_category, notification_level])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFunctionAndExpressionWithMultiJoinV2">
    <Resource name="sql">
      <![CDATA[SELECT   u.user_id,   u.name,   o.order_id,   pd.product_name,   pd.price,   ROUND(pd.price * 1.1, 2) AS price_with_tax,   CONCAT('Product: ', pd.product_name) AS product_description,   CHAR_LENGTH(r.review_text) AS review_length,   UPPER(SUBSTRING(r.review_text, 1, 10)) AS review_preview,   CASE     WHEN r.rating >= 4 THEN 'High Rating'     WHEN r.rating >= 3 THEN 'Medium Rating'     ELSE 'Low Rating'   END AS rating_category,   TIMESTAMPDIFF(DAY, pd.created_date, CURRENT_DATE) AS days_since_created FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id LEFT JOIN ProductDetails pd ON o.product = pd.product_id LEFT JOIN Reviews r ON pd.product_id = r.product_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], product_name=[$7], price=[$8], price_with_tax=[ROUND(*($8, 1.1:DECIMAL(2, 1)), 2)], product_description=[CONCAT(_UTF-16LE'Product: ', $7)], review_length=[CHAR_LENGTH($14)], review_preview=[UPPER(SUBSTRING($14, 1, 10))], rating_category=[CASE(>=($13, 4), _UTF-16LE'High Rating':VARCHAR(13) CHARACTER SET "UTF-16LE", >=($13, 3), _UTF-16LE'Medium Rating':VARCHAR(13) CHARACTER SET "UTF-16LE", _UTF-16LE'Low Rating':VARCHAR(13) CHARACTER SET "UTF-16LE")], days_since_created=[CAST(/INT(Reinterpret(-(CURRENT_DATE, $10)), 86400000)):INTEGER])
+- LogicalJoin(condition=[=($6, $12)], joinType=[left])
   :- LogicalJoin(condition=[=($5, $6)], joinType=[left])
   :  :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, ProductDetails]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Reviews]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, product_name, price, ROUND(*(price, 1.1), 2) AS price_with_tax, CONCAT('Product: ', product_name) AS product_description, CHAR_LENGTH(review_text) AS review_length, UPPER(SUBSTRING(review_text, 1, 10)) AS review_preview, CASE(>=(rating, 4), 'High Rating', >=(rating, 3), 'Medium Rating', 'Low Rating') AS rating_category, CAST(/INT(Reinterpret(-(CURRENT_DATE(), created_date)), 86400000) AS INTEGER) AS days_since_created])
+- MultiJoin(commonJoinKey=[product], joinTypes=[LEFT, LEFT], inputUniqueKeys=[noUniqueKey, (product_id), noUniqueKey], joinConditions=[=(product, product_id), =(product_id, product_id0)], select=[user_id,name,order_id,product,product_id,product_name,price,created_date,product_id0,rating,review_text], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) product, VARCHAR(2147483647) product_id, VARCHAR(2147483647) product_name, DOUBLE price, DATE created_date, VARCHAR(2147483647) product_id0, INTEGER rating, VARCHAR(2147483647) review_text)])
   :- Exchange(distribution=[hash[product]])
   :  +- Calc(select=[user_id, name, order_id, product])
   :     +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[(user_id), (order_id)], joinConditions=[=(user_id, user_id0)], select=[user_id,name,order_id,user_id0,product], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) product)])
   :        :- Exchange(distribution=[hash[user_id]])
   :        :  +- ChangelogNormalize(key=[user_id])
   :        :     +- Exchange(distribution=[hash[user_id]])
   :        :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :        +- Exchange(distribution=[hash[user_id]])
   :           +- TableSourceScan(table=[[default_catalog, default_database, Orders]], fields=[order_id, user_id, product])
   :- Exchange(distribution=[hash[product_id]])
   :  +- ChangelogNormalize(key=[product_id])
   :     +- Exchange(distribution=[hash[product_id]])
   :        +- TableSourceScan(table=[[default_catalog, default_database, ProductDetails, project=[product_id, product_name, price, created_date], metadata=[]]], fields=[product_id, product_name, price, created_date])
   +- Exchange(distribution=[hash[product_id]])
      +- Calc(select=[product_id, rating, review_text])
         +- ChangelogNormalize(key=[review_id])
            +- Exchange(distribution=[hash[review_id]])
               +- TableSourceScan(table=[[default_catalog, default_database, Reviews, project=[product_id, rating, review_text, review_id], metadata=[]]], fields=[product_id, rating, review_text, review_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testIntervalJoinExcludedFromMultiJoin">
    <Resource name="sql">
      <![CDATA[SELECT e1.id, e1.val, e2.price FROM EventTable1 e1 JOIN EventTable2 e2 ON e1.id = e2.id AND e1.`$rowtime` BETWEEN e2.`$rowtime` - INTERVAL '1' MINUTE AND e2.`$rowtime` + INTERVAL '1' MINUTE]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], val=[$1], price=[$4])
+- LogicalJoin(condition=[AND(=($0, $3), >=($2, -($5, 60000:INTERVAL MINUTE)), <=($2, +($5, 60000:INTERVAL MINUTE)))], joinType=[inner])
   :- LogicalWatermarkAssigner(rowtime=[$rowtime], watermark=[-($2, 5000:INTERVAL SECOND)])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, EventTable1]])
   +- LogicalWatermarkAssigner(rowtime=[$rowtime], watermark=[-($2, 5000:INTERVAL SECOND)])
      +- LogicalTableScan(table=[[default_catalog, default_database, EventTable2]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[id, val, price])
+- IntervalJoin(joinType=[InnerJoin], windowBounds=[isRowTime=true, leftLowerBound=-60000, leftUpperBound=60000, leftTimeIndex=2, rightTimeIndex=2], where=[AND(=(id, id0), >=($rowtime, -($rowtime0, 60000:INTERVAL MINUTE)), <=($rowtime, +($rowtime0, 60000:INTERVAL MINUTE)))], select=[id, val, $rowtime, id0, price, $rowtime0])
   :- Exchange(distribution=[hash[id]])
   :  +- WatermarkAssigner(rowtime=[$rowtime], watermark=[-($rowtime, 5000:INTERVAL SECOND)])
   :     +- TableSourceScan(table=[[default_catalog, default_database, EventTable1]], fields=[id, val, $rowtime])
   +- Exchange(distribution=[hash[id]])
      +- WatermarkAssigner(rowtime=[$rowtime], watermark=[-($rowtime, 5000:INTERVAL SECOND)])
         +- TableSourceScan(table=[[default_catalog, default_database, EventTable2]], fields=[id, price, $rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinConditionHasNestedFields">
    <Resource name="sql">
      <![CDATA[SELECT   d.developer_id,   d.person.info.name AS developer_name,   s.ticket_id,   s.reporter.info.priority AS ticket_priority,   f.feedback_id,   f.author.info.rating AS feedback_rating,   sub.sub_id,   sub.subscriber.info.plan AS subscription_plan FROM Developers AS d LEFT JOIN SupportTickets AS s   ON d.person.info.id = s.reporter.info.id LEFT JOIN Feedback AS f   ON d.person.info.id = f.author.info.id LEFT JOIN Subscriptions AS sub   ON d.person.info.id = sub.subscriber.info.id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(developer_id=[$0], developer_name=[$1.info.name], ticket_id=[$3], ticket_priority=[$4.info.priority], feedback_id=[$6], feedback_rating=[$7.info.rating], sub_id=[$9], subscription_plan=[$10.info.plan])
+- LogicalProject(developer_id=[$0], person=[$1], experience_years=[$2], ticket_id=[$3], reporter=[$4], issue=[$5], feedback_id=[$6], author=[$7], message=[$8], sub_id=[$10], subscriber=[$11], active=[$12])
   +- LogicalJoin(condition=[=($9, $13)], joinType=[left])
      :- LogicalProject(developer_id=[$0], person=[$1], experience_years=[$2], ticket_id=[$3], reporter=[$4], issue=[$5], feedback_id=[$6], author=[$7], message=[$8], $f9=[$1.info.id])
      :  +- LogicalProject(developer_id=[$0], person=[$1], experience_years=[$2], ticket_id=[$3], reporter=[$4], issue=[$5], feedback_id=[$7], author=[$8], message=[$9])
      :     +- LogicalJoin(condition=[=($6, $10)], joinType=[left])
      :        :- LogicalProject(developer_id=[$0], person=[$1], experience_years=[$2], ticket_id=[$3], reporter=[$4], issue=[$5], $f6=[$1.info.id])
      :        :  +- LogicalProject(developer_id=[$0], person=[$1], experience_years=[$2], ticket_id=[$4], reporter=[$5], issue=[$6])
      :        :     +- LogicalJoin(condition=[=($3, $7)], joinType=[left])
      :        :        :- LogicalProject(developer_id=[$0], person=[$1], experience_years=[$2], $f3=[$1.info.id])
      :        :        :  +- LogicalTableScan(table=[[default_catalog, default_database, Developers]])
      :        :        +- LogicalProject(ticket_id=[$0], reporter=[$1], issue=[$2], $f3=[$1.info.id])
      :        :           +- LogicalTableScan(table=[[default_catalog, default_database, SupportTickets]])
      :        +- LogicalProject(feedback_id=[$0], author=[$1], message=[$2], $f3=[$1.info.id])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, Feedback]])
      +- LogicalProject(sub_id=[$0], subscriber=[$1], active=[$2], $f3=[$1.info.id])
         +- LogicalTableScan(table=[[default_catalog, default_database, Subscriptions]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[developer_id, person.info.name AS developer_name, ticket_id, reporter.info.priority AS ticket_priority, feedback_id, author.info.rating AS feedback_rating, sub_id, subscriber.info.plan AS subscription_plan])
+- MultiJoin(commonJoinKey=[$f9], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (sub_id)], joinConditions=[=($f9, $f3)], select=[developer_id,person,ticket_id,reporter,feedback_id,author,$f9,sub_id,subscriber,$f3], rowType=[RecordType(VARCHAR(2147483647) developer_id, RecordType:peek_no_expand(RecordType:peek_no_expand(VARCHAR(2147483647) id, VARCHAR(2147483647) name, VARCHAR(2147483647) region) info) person, VARCHAR(2147483647) ticket_id, RecordType:peek_no_expand(RecordType:peek_no_expand(VARCHAR(2147483647) id, VARCHAR(2147483647) priority) info) reporter, VARCHAR(2147483647) feedback_id, RecordType:peek_no_expand(RecordType:peek_no_expand(VARCHAR(2147483647) id, INTEGER rating) info) author, VARCHAR(2147483647) $f9, VARCHAR(2147483647) sub_id, RecordType:peek_no_expand(RecordType:peek_no_expand(VARCHAR(2147483647) id, VARCHAR(2147483647) plan) info) subscriber, VARCHAR(2147483647) $f3)])
   :- Exchange(distribution=[hash[$f9]])
   :  +- Calc(select=[developer_id, person, ticket_id, reporter, feedback_id, author, person.info.id AS $f9])
   :     +- MultiJoin(commonJoinKey=[$f6], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (feedback_id)], joinConditions=[=($f6, $f3)], select=[developer_id,person,ticket_id,reporter,$f6,feedback_id,author,$f3], rowType=[RecordType(VARCHAR(2147483647) developer_id, RecordType:peek_no_expand(RecordType:peek_no_expand(VARCHAR(2147483647) id, VARCHAR(2147483647) name, VARCHAR(2147483647) region) info) person, VARCHAR(2147483647) ticket_id, RecordType:peek_no_expand(RecordType:peek_no_expand(VARCHAR(2147483647) id, VARCHAR(2147483647) priority) info) reporter, VARCHAR(2147483647) $f6, VARCHAR(2147483647) feedback_id, RecordType:peek_no_expand(RecordType:peek_no_expand(VARCHAR(2147483647) id, INTEGER rating) info) author, VARCHAR(2147483647) $f3)])
   :        :- Exchange(distribution=[hash[$f6]])
   :        :  +- Calc(select=[developer_id, person, ticket_id, reporter, person.info.id AS $f6])
   :        :     +- MultiJoin(commonJoinKey=[$f3], joinTypes=[LEFT], inputUniqueKeys=[(developer_id), (ticket_id)], joinConditions=[=($f3, $f30)], select=[developer_id,person,$f3,ticket_id,reporter,$f30], rowType=[RecordType(VARCHAR(2147483647) developer_id, RecordType:peek_no_expand(RecordType:peek_no_expand(VARCHAR(2147483647) id, VARCHAR(2147483647) name, VARCHAR(2147483647) region) info) person, VARCHAR(2147483647) $f3, VARCHAR(2147483647) ticket_id, RecordType:peek_no_expand(RecordType:peek_no_expand(VARCHAR(2147483647) id, VARCHAR(2147483647) priority) info) reporter, VARCHAR(2147483647) $f30)])
   :        :        :- Exchange(distribution=[hash[$f3]])
   :        :        :  +- Calc(select=[developer_id, person, person.info.id AS $f3])
   :        :        :     +- ChangelogNormalize(key=[developer_id])
   :        :        :        +- Exchange(distribution=[hash[developer_id]])
   :        :        :           +- TableSourceScan(table=[[default_catalog, default_database, Developers, project=[developer_id, person], metadata=[]]], fields=[developer_id, person])
   :        :        +- Exchange(distribution=[hash[$f3]])
   :        :           +- Calc(select=[ticket_id, reporter, reporter.info.id AS $f3])
   :        :              +- ChangelogNormalize(key=[ticket_id])
   :        :                 +- Exchange(distribution=[hash[ticket_id]])
   :        :                    +- TableSourceScan(table=[[default_catalog, default_database, SupportTickets, project=[ticket_id, reporter], metadata=[]]], fields=[ticket_id, reporter])
   :        +- Exchange(distribution=[hash[$f3]])
   :           +- Calc(select=[feedback_id, author, author.info.id AS $f3])
   :              +- ChangelogNormalize(key=[feedback_id])
   :                 +- Exchange(distribution=[hash[feedback_id]])
   :                    +- TableSourceScan(table=[[default_catalog, default_database, Feedback, project=[feedback_id, author], metadata=[]]], fields=[feedback_id, author])
   +- Exchange(distribution=[hash[$f3]])
      +- Calc(select=[sub_id, subscriber, subscriber.info.id AS $f3])
         +- ChangelogNormalize(key=[sub_id])
            +- Exchange(distribution=[hash[sub_id]])
               +- TableSourceScan(table=[[default_catalog, default_database, Subscriptions, project=[sub_id, subscriber], metadata=[]]], fields=[sub_id, subscriber])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinkOnMultiJoinedView">
    <Resource name="optimized rel plan with advice">
      <![CDATA[
Sink(table=[default_catalog.default_database.sink1], fields=[a, day, EXPR$2, EXPR$3])
+- GroupAggregate(advice=[1], groupBy=[a, day], select=[a, day, SUM_RETRACT(b) AS EXPR$2, COUNT_RETRACT(DISTINCT c) AS EXPR$3])
   +- Exchange(distribution=[hash[a, day]])
      +- Calc(select=[a, day, b0 AS b, c])
         +- MultiJoin(commonJoinKey=[a], joinTypes=[INNER], inputUniqueKeys=[noUniqueKey, noUniqueKey], joinConditions=[=(a, d)], select=[a,day,b0,c,d], rowType=[RecordType(INTEGER a, VARCHAR(2147483647) day, BIGINT b0, VARCHAR(2147483647) c, INTEGER d)])
            :- Exchange(distribution=[hash[a]])
            :  +- Calc(select=[a, DATE_FORMAT(CURRENT_TIMESTAMP(), 'yyMMdd') AS day])
            :     +- TableSourceScan(table=[[default_catalog, default_database, src1, project=[a], metadata=[]]], fields=[a])
            +- Exchange(distribution=[hash[d]])
               +- TableSourceScan(table=[[default_catalog, default_database, src2, project=[b, c, d], metadata=[]]], fields=[b, c, d])

Sink(table=[default_catalog.default_database.sink2], fields=[a, day, b, c])
+- Calc(select=[a, day, b0 AS b, c])
   +- MultiJoin(commonJoinKey=[a], joinTypes=[INNER], inputUniqueKeys=[noUniqueKey, noUniqueKey], joinConditions=[=(a, d)], select=[a,day,b0,c,d], rowType=[RecordType(INTEGER a, VARCHAR(2147483647) day, BIGINT b0, VARCHAR(2147483647) c, INTEGER d)])
      :- Exchange(distribution=[hash[a]])
      :  +- Calc(select=[a, DATE_FORMAT(CURRENT_TIMESTAMP(), 'yyMMdd') AS day])
      :     +- TableSourceScan(table=[[default_catalog, default_database, src1, project=[a], metadata=[]]], fields=[a])
      +- Exchange(distribution=[hash[d]])
         +- Calc(select=[b, c, d], where=[>(b, 100)])
            +- TableSourceScan(table=[[default_catalog, default_database, src2, project=[b, c, d], metadata=[]]], fields=[b, c, d])

advice[1]: [ADVICE] You might want to enable local-global two-phase optimization by configuring ('table.exec.mini-batch.enabled' to 'true', 'table.exec.mini-batch.allow-latency' to a positive long value, 'table.exec.mini-batch.size' to a positive long value).
advice[2]: [WARNING] The column(s): day(generated by non-deterministic function: CURRENT_TIMESTAMP ) can not satisfy the determinism requirement for correctly processing update message('UB'/'UA'/'D' in changelogMode, not 'I' only), this usually happens when input node has no upsertKey(upsertKeys=[{}]) or current node outputs non-deterministic update messages. Please consider removing these non-deterministic columns or making them deterministic by using deterministic functions.

related rel plan:
Calc(select=[a, DATE_FORMAT(CURRENT_TIMESTAMP(), _UTF-16LE'yyMMdd') AS day], changelogMode=[I,UB,UA,D])
+- TableSourceScan(table=[[default_catalog, default_database, src1, project=[a], metadata=[]]], fields=[a], changelogMode=[I,UB,UA,D])


]]>
    </Resource>
  </TestCase>
  <TestCase name="testPreservesUpsertKeyFourWayComplex">
    <Resource name="sql">
      <![CDATA[INSERT INTO sink_four_way SELECT    u.user_id,    o.order_id,    o.user_id,    p.payment_id,    p.user_id,    u.name,    a.location FROM UsersPK u JOIN OrdersPK o  ON  u.user_id = o.user_id AND o.product IS NOT NULL JOIN PaymentsPK p  ON  u.user_id = p.user_id AND p.price >= 0 JOIN AddressPK a  ON  u.user_id = a.user_id AND a.location IS NOT NULL]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.sink_four_way], fields=[user_id, order_id, user_id0, payment_id, user_id1, name, location])
+- LogicalProject(user_id=[$0], order_id=[$4], user_id0=[$5], payment_id=[$7], user_id1=[$8], name=[$1], location=[$11])
   +- LogicalJoin(condition=[AND(=($0, $10), IS NOT NULL($11))], joinType=[inner])
      :- LogicalJoin(condition=[AND(=($0, $8), >=($9, 0))], joinType=[inner])
      :  :- LogicalJoin(condition=[AND(=($0, $5), IS NOT NULL($6))], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[default_catalog, default_database, UsersPK]])
      :  :  +- LogicalTableScan(table=[[default_catalog, default_database, OrdersPK]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, PaymentsPK]])
      +- LogicalTableScan(table=[[default_catalog, default_database, AddressPK]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.sink_four_way], fields=[user_id, order_id, user_id0, payment_id, user_id1, name, location])
+- Calc(select=[user_id, order_id, user_id0, payment_id, user_id1, name, location])
   +- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER, INNER, INNER], inputUniqueKeys=[(user_id), (order_id, user_id), (payment_id, user_id), (user_id)], joinConditions=[=(user_id, user_id0), =(user_id, user_id1), =(user_id, user_id2)], select=[user_id,name,order_id,user_id0,payment_id,user_id1,user_id2,location], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1, VARCHAR(2147483647) user_id2, VARCHAR(2147483647) location)])
      :- Exchange(distribution=[hash[user_id]])
      :  +- TableSourceScan(table=[[default_catalog, default_database, UsersPK, project=[user_id, name], metadata=[]]], fields=[user_id, name])
      :- Exchange(distribution=[hash[user_id]])
      :  +- Calc(select=[order_id, user_id])
      :     +- ChangelogNormalize(key=[order_id, user_id], condition=[IS NOT NULL(product)])
      :        +- Exchange(distribution=[hash[order_id, user_id]])
      :           +- TableSourceScan(table=[[default_catalog, default_database, OrdersPK, filter=[]]], fields=[order_id, user_id, product])
      :- Exchange(distribution=[hash[user_id]])
      :  +- Calc(select=[payment_id, user_id])
      :     +- ChangelogNormalize(key=[payment_id, user_id], condition=[>=(price, 0)])
      :        +- Exchange(distribution=[hash[payment_id, user_id]])
      :           +- TableSourceScan(table=[[default_catalog, default_database, PaymentsPK, filter=[]]], fields=[payment_id, user_id, price])
      +- Exchange(distribution=[hash[user_id]])
         +- ChangelogNormalize(key=[user_id], condition=[IS NOT NULL(location)])
            +- Exchange(distribution=[hash[user_id]])
               +- TableSourceScan(table=[[default_catalog, default_database, AddressPK, filter=[]]], fields=[user_id, location])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPreservesUpsertKeyTwoWayInnerJoinOrders">
    <Resource name="sql">
      <![CDATA[INSERT INTO sink_two_way SELECT    o.user_id,    o.order_id,    o.product,    u.region_id FROM UsersPK u INNER JOIN OrdersPK o   ON  u.user_id = o.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.sink_two_way], fields=[user_id, order_id, product, region_id])
+- LogicalProject(user_id=[$5], order_id=[$4], product=[$6], region_id=[$2])
   +- LogicalJoin(condition=[=($0, $5)], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, UsersPK]])
      +- LogicalTableScan(table=[[default_catalog, default_database, OrdersPK]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.sink_two_way], fields=[user_id, order_id, product, region_id])
+- Calc(select=[user_id0 AS user_id, order_id, product, region_id])
   +- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER], inputUniqueKeys=[(user_id), (order_id, user_id)], joinConditions=[=(user_id, user_id0)], select=[user_id,region_id,order_id,user_id0,product], rowType=[RecordType(VARCHAR(2147483647) user_id, INTEGER region_id, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) product)])
      :- Exchange(distribution=[hash[user_id]])
      :  +- TableSourceScan(table=[[default_catalog, default_database, UsersPK, project=[user_id, region_id], metadata=[]]], fields=[user_id, region_id])
      +- Exchange(distribution=[hash[user_id]])
         +- TableSourceScan(table=[[default_catalog, default_database, OrdersPK]], fields=[order_id, user_id, product])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPreservesUpsertKeyTwoWayInnerJoinOrdersDoesNot">
    <Resource name="sql">
      <![CDATA[INSERT INTO sink_two_way SELECT    o.user_id,    o.order_id,    o.product,    u.region_id FROM UsersPK u INNER JOIN OrdersSimplePK o   ON  u.user_id = o.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.sink_two_way], fields=[user_id, order_id, product, region_id])
+- LogicalProject(user_id=[$5], order_id=[$4], product=[$6], region_id=[$2])
   +- LogicalJoin(condition=[=($0, $5)], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, UsersPK]])
      +- LogicalTableScan(table=[[default_catalog, default_database, OrdersSimplePK]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.sink_two_way], fields=[user_id, order_id, product, region_id], upsertMaterialize=[true])
+- Calc(select=[user_id0 AS user_id, order_id, product, region_id])
   +- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER], inputUniqueKeys=[(user_id), (order_id)], joinConditions=[=(user_id, user_id0)], select=[user_id,region_id,order_id,user_id0,product], rowType=[RecordType(VARCHAR(2147483647) user_id, INTEGER region_id, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) product)])
      :- Exchange(distribution=[hash[user_id]])
      :  +- ChangelogNormalize(key=[user_id])
      :     +- Exchange(distribution=[hash[user_id]])
      :        +- TableSourceScan(table=[[default_catalog, default_database, UsersPK, project=[user_id, region_id], metadata=[]]], fields=[user_id, region_id])
      +- Exchange(distribution=[hash[user_id]])
         +- ChangelogNormalize(key=[order_id])
            +- Exchange(distribution=[hash[order_id]])
               +- TableSourceScan(table=[[default_catalog, default_database, OrdersSimplePK]], fields=[order_id, user_id, product])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPreservesUpsertKeyTwoWayLeftJoinOrders">
    <Resource name="sql">
      <![CDATA[INSERT INTO sink_two_way SELECT    o.user_id,    o.order_id,    o.product,    u.region_id FROM OrdersPK o LEFT JOIN UsersPK u  ON  u.user_id = o.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.sink_two_way], fields=[user_id, order_id, product, region_id])
+- LogicalProject(user_id=[$1], order_id=[$0], product=[$2], region_id=[$5])
   +- LogicalJoin(condition=[=($3, $1)], joinType=[left])
      :- LogicalTableScan(table=[[default_catalog, default_database, OrdersPK]])
      +- LogicalTableScan(table=[[default_catalog, default_database, UsersPK]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.sink_two_way], fields=[user_id, order_id, product, region_id])
+- Calc(select=[user_id, order_id, product, region_id])
   +- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[(order_id, user_id), (user_id)], joinConditions=[=(user_id0, user_id)], select=[order_id,user_id,product,user_id0,region_id], rowType=[RecordType(VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id, VARCHAR(2147483647) product, VARCHAR(2147483647) user_id0, INTEGER region_id)])
      :- Exchange(distribution=[hash[user_id]])
      :  +- TableSourceScan(table=[[default_catalog, default_database, OrdersPK]], fields=[order_id, user_id, product])
      +- Exchange(distribution=[hash[user_id]])
         +- TableSourceScan(table=[[default_catalog, default_database, UsersPK, project=[user_id, region_id], metadata=[]]], fields=[user_id, region_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRegularJoinsAreMergedApartFromTemporalJoin">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, temporal.age FROM Users u INNER JOIN Orders o ON u.user_id = o.user_id INNER JOIN (  SELECT s.user_id, l.age   FROM StreamTable s   JOIN LookupTable FOR SYSTEM_TIME AS OF s.proctime AS l   ON s.user_id = l.id) temporal ON u.user_id = temporal.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], age=[$7])
+- LogicalJoin(condition=[=($0, $6)], joinType=[inner])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   +- LogicalProject(user_id=[$0], age=[$5])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{0, 2}])
         :- LogicalProject(user_id=[$0], amount=[$1], proctime=[PROCTIME()])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, StreamTable]])
         +- LogicalFilter(condition=[=($cor0.user_id, $0)])
            +- LogicalSnapshot(period=[$cor0.proctime])
               +- LogicalTableScan(table=[[default_catalog, default_database, LookupTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, age])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER, INNER], inputUniqueKeys=[(user_id), (order_id), noUniqueKey], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,name,order_id,user_id0,user_id1,age], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) user_id1, INTEGER age)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- Calc(select=[user_id, age])
         +- LookupJoin(table=[default_catalog.default_database.LookupTable], joinType=[InnerJoin], lookup=[id=user_id], select=[user_id, id, age])
            +- TableSourceScan(table=[[default_catalog, default_database, StreamTable, project=[user_id], metadata=[]]], fields=[user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightJoinNotSupported">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id FROM Users u RIGHT JOIN Orders o ON u.user_id = o.user_id RIGHT JOIN Payments p ON o.user_id = p.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalJoin(condition=[=($4, $8)], joinType=[right])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[right])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id])
+- Join(joinType=[RightOuterJoin], where=[=(user_id0, user_id1)], select=[user_id, name, order_id, user_id0, payment_id, user_id1], leftInputSpec=[NoUniqueKey], rightInputSpec=[HasUniqueKey])
   :- Exchange(distribution=[hash[user_id0]])
   :  +- Join(joinType=[RightOuterJoin], where=[=(user_id, user_id0)], select=[user_id, name, order_id, user_id0], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[HasUniqueKey])
   :     :- Exchange(distribution=[hash[user_id]])
   :     :  +- ChangelogNormalize(key=[user_id])
   :     :     +- Exchange(distribution=[hash[user_id]])
   :     :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :     +- Exchange(distribution=[hash[user_id]])
   :        +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSameTableMultipleAliases">
    <Resource name="sql">
      <![CDATA[SELECT * FROM Users u LEFT JOIN Users u1 ON u.user_id = u1.user_id LEFT JOIN Users u2 ON u1.user_id = u2.user_id LEFT JOIN Users u3 ON u2.user_id = u3.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], cash=[$2], user_id0=[$3], name0=[$4], cash0=[$5], user_id1=[$6], name1=[$7], cash1=[$8], user_id2=[$9], name2=[$10], cash2=[$11])
+- LogicalJoin(condition=[=($6, $9)], joinType=[left])
   :- LogicalJoin(condition=[=($3, $6)], joinType=[left])
   :  :- LogicalJoin(condition=[=($0, $3)], joinType=[left])
   :  :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Users]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, LEFT, LEFT], inputUniqueKeys=[(user_id), (user_id), (user_id), (user_id)], joinConditions=[=(user_id, user_id0), =(user_id0, user_id1), =(user_id1, user_id2)], select=[user_id,name,cash,user_id0,name0,cash0,user_id1,name1,cash1,user_id2,name2,cash2], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, INTEGER cash, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) name0, INTEGER cash0, VARCHAR(2147483647) user_id1, VARCHAR(2147483647) name1, INTEGER cash1, VARCHAR(2147483647) user_id2, VARCHAR(2147483647) name2, INTEGER cash2)])
:- Exchange(distribution=[hash[user_id]])
:  +- TableSourceScan(table=[[default_catalog, default_database, Users]], fields=[user_id, name, cash])
:- Exchange(distribution=[hash[user_id]])
:  +- TableSourceScan(table=[[default_catalog, default_database, Users]], fields=[user_id, name, cash])
:- Exchange(distribution=[hash[user_id]])
:  +- TableSourceScan(table=[[default_catalog, default_database, Users]], fields=[user_id, name, cash])
+- Exchange(distribution=[hash[user_id]])
   +- TableSourceScan(table=[[default_catalog, default_database, Users]], fields=[user_id, name, cash])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTemporalJoinExcludedFromMultiJoin">
    <Resource name="sql">
      <![CDATA[SELECT s.user_id, s.amount, l.name, l.age FROM StreamTable s JOIN LookupTable FOR SYSTEM_TIME AS OF s.proctime AS l ON s.user_id = l.id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], amount=[$1], name=[$4], age=[$5])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{0, 2}])
   :- LogicalProject(user_id=[$0], amount=[$1], proctime=[PROCTIME()])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, StreamTable]])
   +- LogicalFilter(condition=[=($cor0.user_id, $0)])
      +- LogicalSnapshot(period=[$cor0.proctime])
         +- LogicalTableScan(table=[[default_catalog, default_database, LookupTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, amount, name, age])
+- LookupJoin(table=[default_catalog.default_database.LookupTable], joinType=[InnerJoin], lookup=[id=user_id], select=[user_id, amount, id, name, age])
   +- TableSourceScan(table=[[default_catalog, default_database, StreamTable]], fields=[user_id, amount])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayInnerJoinExecPlan">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id FROM Users u INNER JOIN Orders o ON u.user_id = o.user_id INNER JOIN Payments p ON u.user_id = p.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalJoin(condition=[=($0, $8)], joinType=[inner])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER, INNER], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[(user_id = user_id0), (user_id = user_id1)], select=[user_id,name,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayInnerJoinExplain">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalJoin(condition=[=($0, $8)], joinType=[inner])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])

== Optimized Physical Plan ==
Calc(select=[user_id, name, order_id, payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER, INNER], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,name,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])

== Optimized Execution Plan ==
Calc(select=[user_id, name, order_id, payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER, INNER], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[(user_id = user_id0), (user_id = user_id1)], select=[user_id,name,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayInnerJoinNoCommonJoinKeyRelPlan">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id FROM Users u INNER JOIN Orders o ON u.user_id = o.user_id INNER JOIN Payments p ON u.cash = p.price]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalJoin(condition=[=($2, $7)], joinType=[inner])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id])
+- MultiJoin(commonJoinKey=[cash], joinTypes=[INNER], inputUniqueKeys=[noUniqueKey, (payment_id)], joinConditions=[=(cash, price)], select=[user_id,name,cash,order_id,payment_id,price], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, INTEGER cash, VARCHAR(2147483647) order_id, VARCHAR(2147483647) payment_id, INTEGER price)])
   :- Exchange(distribution=[hash[cash]])
   :  +- Calc(select=[user_id, name, cash, order_id])
   :     +- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER], inputUniqueKeys=[(user_id), (order_id)], joinConditions=[=(user_id, user_id0)], select=[user_id,name,cash,order_id,user_id0], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, INTEGER cash, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0)])
   :        :- Exchange(distribution=[hash[user_id]])
   :        :  +- ChangelogNormalize(key=[user_id])
   :        :     +- Exchange(distribution=[hash[user_id]])
   :        :        +- TableSourceScan(table=[[default_catalog, default_database, Users]], fields=[user_id, name, cash])
   :        +- Exchange(distribution=[hash[user_id]])
   :           +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[price]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, price], metadata=[]]], fields=[payment_id, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTwoWayJoinWithUnion">
    <Resource name="sql">
      <![CDATA[WITH OrdersUnion as (SELECT * FROM Orders UNION ALL SELECT * FROM Orders2) SELECT * FROM OrdersUnion o LEFT JOIN Users u ON o.user_id = u.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(order_id=[$0], user_id=[$1], product=[$2], user_id0=[$3], name=[$4], cash=[$5])
+- LogicalJoin(condition=[=($1, $3)], joinType=[left])
   :- LogicalUnion(all=[true])
   :  :- LogicalProject(order_id=[$0], user_id=[$1], product=[$2])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   :  +- LogicalProject(order_id=[$0], user_id=[$1], product=[$2])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, Orders2]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Users]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, (user_id)], joinConditions=[=(user_id, user_id0)], select=[order_id,user_id,product,user_id0,name,cash], rowType=[RecordType(VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id, VARCHAR(2147483647) product, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) name, INTEGER cash)])
:- Exchange(distribution=[hash[user_id]])
:  +- Union(all=[true], union=[order_id, user_id, product])
:     :- TableSourceScan(table=[[default_catalog, default_database, Orders]], fields=[order_id, user_id, product])
:     +- TableSourceScan(table=[[default_catalog, default_database, Orders2]], fields=[order_id, user_id, product])
+- Exchange(distribution=[hash[user_id]])
   +- TableSourceScan(table=[[default_catalog, default_database, Users]], fields=[user_id, name, cash])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayInnerJoinRelPlan">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id FROM Users u INNER JOIN Orders o ON u.user_id = o.user_id INNER JOIN Payments p ON u.user_id = p.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalJoin(condition=[=($0, $8)], joinType=[inner])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER, INNER], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,name,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayInnerJoinWithTttlHints">
    <Resource name="sql">
      <![CDATA[SELECT /*+ STATE_TTL(u='1d', o='2d', p='1h') */u.user_id, u.name, o.order_id, p.payment_id FROM Users u INNER JOIN Orders o ON u.user_id = o.user_id INNER JOIN Payments p ON u.user_id = p.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalJoin(condition=[=($0, $8)], joinType=[inner], stateTtlHints=[[[STATE_TTL inheritPath:[0] options:{p=1h, u=1d, o=2d}]]])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[inner], stateTtlHints=[[[STATE_TTL inheritPath:[0, 0] options:{p=1h, u=1d, o=2d}]]])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]], hints=[[[ALIAS inheritPath:[] options:[u]]]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]], hints=[[[ALIAS inheritPath:[] options:[o]]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]], hints=[[[ALIAS inheritPath:[] options:[p]]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER, INNER], inputUniqueKeys=[(user_id), (order_id), (payment_id)], stateTtlHints=[[[STATE_TTL options:[1d, 2d, 1h]]]], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,name,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayJoinNoJoinKeyExecPlan">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id FROM Users u LEFT JOIN Orders o ON TRUE INNER JOIN Payments p ON TRUE ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalJoin(condition=[true], joinType=[inner])
   :- LogicalJoin(condition=[true], joinType=[left])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultiJoin(commonJoinKey=[noCommonJoinKey], joinTypes=[INNER], inputUniqueKeys=[noUniqueKey, (payment_id)], joinConditions=[true], select=[user_id,name,order_id,payment_id], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) payment_id)])
:- Exchange(distribution=[single])
:  +- MultiJoin(commonJoinKey=[noCommonJoinKey], joinTypes=[LEFT], inputUniqueKeys=[(user_id), (order_id)], joinConditions=[true], select=[user_id,name,order_id], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id)])
:     :- Exchange(distribution=[single])
:     :  +- ChangelogNormalize(key=[user_id])
:     :     +- Exchange(distribution=[hash[user_id]])
:     :        +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
:     +- Exchange(distribution=[single])
:        +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id], metadata=[]]], fields=[order_id])
+- Exchange(distribution=[single])
   +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id], metadata=[]]], fields=[payment_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayJoinWithTimeAttributesMaterialization">
    <Resource name="sql">
      <![CDATA[SELECT u.name, u.proctime, o.`$rowtime`, p.price FROM UsersWithProctime u JOIN OrdersWithRowtime o ON u.user_id = o.user_id JOIN Payments p ON u.user_id = p.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(name=[$1], proctime=[$2], $rowtime=[$5], price=[$7])
+- LogicalJoin(condition=[=($0, $8)], joinType=[inner])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
   :  :- LogicalProject(user_id=[$0], name=[$1], proctime=[PROCTIME()])
   :  :  +- LogicalTableScan(table=[[default_catalog, default_database, UsersWithProctime]])
   :  +- LogicalWatermarkAssigner(rowtime=[$rowtime], watermark=[$2])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, OrdersWithRowtime]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[name, proctime, $rowtime, price])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER, INNER], inputUniqueKeys=[(user_id), noUniqueKey, noUniqueKey], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,name,proctime,user_id0,$rowtime,price,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, TIMESTAMP_WITH_LOCAL_TIME_ZONE(3) proctime, VARCHAR(2147483647) user_id0, TIMESTAMP(3) $rowtime, INTEGER price, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- Calc(select=[user_id, name, PROCTIME_MATERIALIZE(PROCTIME()) AS proctime])
   :     +- TableSourceScan(table=[[default_catalog, default_database, UsersWithProctime]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- Calc(select=[user_id, CAST($rowtime AS TIMESTAMP(3)) AS $rowtime])
   :     +- WatermarkAssigner(rowtime=[$rowtime], watermark=[$rowtime])
   :        +- TableSourceScan(table=[[default_catalog, default_database, OrdersWithRowtime, project=[user_id, $rowtime], metadata=[]]], fields=[user_id, $rowtime])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[price, user_id], metadata=[]]], fields=[price, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayLeftOuterJoinExecPlan">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id LEFT JOIN Payments p ON u.user_id = p.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalJoin(condition=[=($0, $8)], joinType=[left])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, LEFT], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[(user_id = user_id0), (user_id = user_id1)], select=[user_id,name,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayLeftOuterJoinExplain">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalJoin(condition=[=($0, $8)], joinType=[left])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])

== Optimized Physical Plan ==
Calc(select=[user_id, name, order_id, payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, LEFT], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,name,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])

== Optimized Execution Plan ==
Calc(select=[user_id, name, order_id, payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, LEFT], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[(user_id = user_id0), (user_id = user_id1)], select=[user_id,name,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayInnerJoinWithSingleTttlHint">
    <Resource name="sql">
      <![CDATA[SELECT /*+ STaTE_tTL(o='2d') */u.user_id, u.name, o.order_id, p.payment_id FROM Users u INNER JOIN Orders o ON u.user_id = o.user_id INNER JOIN Payments p ON u.user_id = p.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalJoin(condition=[=($0, $8)], joinType=[inner], stateTtlHints=[[[STATE_TTL inheritPath:[0] options:{o=2d}]]])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[inner], stateTtlHints=[[[STATE_TTL inheritPath:[0, 0] options:{o=2d}]]])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]], hints=[[[ALIAS inheritPath:[] options:[u]]]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]], hints=[[[ALIAS inheritPath:[] options:[o]]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]], hints=[[[ALIAS inheritPath:[] options:[p]]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[INNER, INNER], inputUniqueKeys=[(user_id), (order_id), (payment_id)], stateTtlHints=[[[STATE_TTL options:[0s, 2d, 0s]]]], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,name,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayLeftOuterJoinWithWhereClauseExecPlan">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id LEFT JOIN Payments p ON u.user_id = p.user_id WHERE u.name = 'Gus' AND p.price > 10]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalFilter(condition=[AND(=($1, _UTF-16LE'Gus'), >($7, 10))])
   +- LogicalJoin(condition=[=($0, $8)], joinType=[left])
      :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
      +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[user_id, CAST('Gus' AS VARCHAR(2147483647)) AS name, order_id, CAST(payment_id AS VARCHAR(2147483647)) AS payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, INNER], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[(user_id = user_id0), (user_id = user_id1)], select=[user_id,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- Calc(select=[user_id])
   :     +- ChangelogNormalize(key=[user_id], condition=[(name = 'Gus')])
   :        +- Exchange(distribution=[hash[user_id]])
   :           +- TableSourceScan(table=[[default_catalog, default_database, Users, filter=[], project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- Calc(select=[payment_id, user_id], where=[(price > 10)])
         +- TableSourceScan(table=[[default_catalog, default_database, Payments, filter=[]]], fields=[payment_id, price, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayLeftOuterJoinWithWhereClauseExplain">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalFilter(condition=[AND(=($1, _UTF-16LE'Gus'), >($7, 10))])
   +- LogicalJoin(condition=[=($0, $8)], joinType=[left])
      :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
      +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])

== Optimized Physical Plan ==
Calc(select=[user_id, CAST(_UTF-16LE'Gus':VARCHAR(2147483647) CHARACTER SET "UTF-16LE" AS VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS name, order_id, CAST(payment_id AS VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, INNER], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- Calc(select=[user_id])
   :     +- ChangelogNormalize(key=[user_id], condition=[=(name, _UTF-16LE'Gus':VARCHAR(2147483647) CHARACTER SET "UTF-16LE")])
   :        +- Exchange(distribution=[hash[user_id]])
   :           +- TableSourceScan(table=[[default_catalog, default_database, Users, filter=[], project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- Calc(select=[payment_id, user_id], where=[>(price, 10)])
         +- TableSourceScan(table=[[default_catalog, default_database, Payments, filter=[]]], fields=[payment_id, price, user_id])

== Optimized Execution Plan ==
Calc(select=[user_id, CAST('Gus' AS VARCHAR(2147483647)) AS name, order_id, CAST(payment_id AS VARCHAR(2147483647)) AS payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, INNER], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[(user_id = user_id0), (user_id = user_id1)], select=[user_id,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- Calc(select=[user_id])
   :     +- ChangelogNormalize(key=[user_id], condition=[(name = 'Gus')])
   :        +- Exchange(distribution=[hash[user_id]])
   :           +- TableSourceScan(table=[[default_catalog, default_database, Users, filter=[], project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- Calc(select=[payment_id, user_id], where=[(price > 10)])
         +- TableSourceScan(table=[[default_catalog, default_database, Payments, filter=[]]], fields=[payment_id, price, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayLeftOuterJoinWithWhereClauseRelPlan">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id LEFT JOIN Payments p ON u.user_id = p.user_id WHERE u.name = 'Gus' AND p.price > 10]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalFilter(condition=[AND(=($1, _UTF-16LE'Gus'), >($7, 10))])
   +- LogicalJoin(condition=[=($0, $8)], joinType=[left])
      :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
      +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, CAST('Gus' AS VARCHAR(2147483647)) AS name, order_id, CAST(payment_id AS VARCHAR(2147483647)) AS payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, INNER], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- Calc(select=[user_id])
   :     +- ChangelogNormalize(key=[user_id], condition=[=(name, 'Gus')])
   :        +- Exchange(distribution=[hash[user_id]])
   :           +- TableSourceScan(table=[[default_catalog, default_database, Users, filter=[], project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- Calc(select=[payment_id, user_id], where=[>(price, 10)])
         +- TableSourceScan(table=[[default_catalog, default_database, Payments, filter=[]]], fields=[payment_id, price, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testThreeWayLeftOuterJoinRelPlan">
    <Resource name="sql">
      <![CDATA[SELECT u.user_id, u.name, o.order_id, p.payment_id FROM Users u LEFT JOIN Orders o ON u.user_id = o.user_id LEFT JOIN Payments p ON u.user_id = p.user_id]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(user_id=[$0], name=[$1], order_id=[$3], payment_id=[$6])
+- LogicalJoin(condition=[=($0, $8)], joinType=[left])
   :- LogicalJoin(condition=[=($0, $4)], joinType=[left])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, Users]])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, Orders]])
   +- LogicalTableScan(table=[[default_catalog, default_database, Payments]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[user_id, name, order_id, payment_id])
+- MultiJoin(commonJoinKey=[user_id], joinTypes=[LEFT, LEFT], inputUniqueKeys=[(user_id), (order_id), (payment_id)], joinConditions=[=(user_id, user_id0), =(user_id, user_id1)], select=[user_id,name,order_id,user_id0,payment_id,user_id1], rowType=[RecordType(VARCHAR(2147483647) user_id, VARCHAR(2147483647) name, VARCHAR(2147483647) order_id, VARCHAR(2147483647) user_id0, VARCHAR(2147483647) payment_id, VARCHAR(2147483647) user_id1)])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Users, project=[user_id, name], metadata=[]]], fields=[user_id, name])
   :- Exchange(distribution=[hash[user_id]])
   :  +- TableSourceScan(table=[[default_catalog, default_database, Orders, project=[order_id, user_id], metadata=[]]], fields=[order_id, user_id])
   +- Exchange(distribution=[hash[user_id]])
      +- TableSourceScan(table=[[default_catalog, default_database, Payments, project=[payment_id, user_id], metadata=[]]], fields=[payment_id, user_id])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testWithExpressionInJoinCondition">
    <Resource name="sql">
      <![CDATA[SELECT   p.product_id,   (p.price - p.discount) AS net_price,   s.quantity,   pr.promo_text FROM Products AS p LEFT JOIN Sales AS s   ON (p.price - p.discount) = s.product_key LEFT JOIN Promotions AS pr   ON (p.price - p.discount) = pr.product_key WHERE (p.price - p.discount) > 100]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(product_id=[$0], net_price=[-($1, $2)], quantity=[$5], promo_text=[$8])
+- LogicalFilter(condition=[>(-($1, $2), 100)])
   +- LogicalProject(product_id=[$0], price=[$1], discount=[$2], sale_id=[$3], product_key=[$4], quantity=[$5], promo_id=[$7], product_key0=[$8], promo_text=[$9])
      +- LogicalJoin(condition=[=($6, $8)], joinType=[left])
         :- LogicalProject(product_id=[$0], price=[$1], discount=[$2], sale_id=[$3], product_key=[$4], quantity=[$5], $f6=[-($1, $2)])
         :  +- LogicalProject(product_id=[$0], price=[$1], discount=[$2], sale_id=[$4], product_key=[$5], quantity=[$6])
         :     +- LogicalJoin(condition=[=($3, $5)], joinType=[left])
         :        :- LogicalProject(product_id=[$0], price=[$1], discount=[$2], $f3=[-($1, $2)])
         :        :  +- LogicalTableScan(table=[[default_catalog, default_database, Products]])
         :        +- LogicalTableScan(table=[[default_catalog, default_database, Sales]])
         +- LogicalTableScan(table=[[default_catalog, default_database, Promotions]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[product_id, -(price, discount) AS net_price, quantity, promo_text])
+- MultiJoin(commonJoinKey=[$f6], joinTypes=[LEFT], inputUniqueKeys=[noUniqueKey, noUniqueKey], joinConditions=[=($f6, product_key0)], select=[product_id,price,discount,quantity,$f6,product_key0,promo_text], rowType=[RecordType(VARCHAR(2147483647) product_id, DOUBLE price, DOUBLE discount, INTEGER quantity, DOUBLE $f6, DOUBLE product_key0, VARCHAR(2147483647) promo_text)])
   :- Exchange(distribution=[hash[$f6]])
   :  +- Calc(select=[product_id, price, discount, quantity, -(price, discount) AS $f6])
   :     +- MultiJoin(commonJoinKey=[$f3], joinTypes=[LEFT], inputUniqueKeys=[(product_id), noUniqueKey], joinConditions=[=($f3, product_key)], select=[product_id,price,discount,$f3,product_key,quantity], rowType=[RecordType(VARCHAR(2147483647) product_id, DOUBLE price, DOUBLE discount, DOUBLE $f3, DOUBLE product_key, INTEGER quantity)])
   :        :- Exchange(distribution=[hash[$f3]])
   :        :  +- Calc(select=[product_id, price, discount, -(price, discount) AS $f3])
   :        :     +- ChangelogNormalize(key=[product_id], condition=[>(-(price, discount), 100)])
   :        :        +- Exchange(distribution=[hash[product_id]])
   :        :           +- TableSourceScan(table=[[default_catalog, default_database, Products, filter=[]]], fields=[product_id, price, discount])
   :        +- Exchange(distribution=[hash[product_key]])
   :           +- Calc(select=[product_key, quantity])
   :              +- ChangelogNormalize(key=[sale_id])
   :                 +- Exchange(distribution=[hash[sale_id]])
   :                    +- TableSourceScan(table=[[default_catalog, default_database, Sales]], fields=[sale_id, product_key, quantity])
   +- Exchange(distribution=[hash[product_key]])
      +- Calc(select=[product_key, promo_text])
         +- ChangelogNormalize(key=[promo_id])
            +- Exchange(distribution=[hash[promo_id]])
               +- TableSourceScan(table=[[default_catalog, default_database, Promotions]], fields=[promo_id, product_key, promo_text])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTwoWayJoinWithRank">
    <Resource name="sql">
      <![CDATA[WITH JoinedEvents as (SELECT e1.id as id, e1.val, e1.`$rowtime` as `$rowtime`, e2.price FROM EventTable1 e1 JOIN EventTable2 e2 ON e1.id = e2.id) SELECT id, val, `$rowtime` FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY `$rowtime` DESC) as ts FROM JoinedEvents) WHERE ts = 1]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], val=[$1], $rowtime=[$2])
+- LogicalFilter(condition=[=($4, 1)])
   +- LogicalProject(id=[$0], val=[$1], $rowtime=[$2], price=[$3], ts=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
      +- LogicalProject(id=[$0], val=[$1], $rowtime=[$2], price=[$4])
         +- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
            :- LogicalWatermarkAssigner(rowtime=[$rowtime], watermark=[-($2, 5000:INTERVAL SECOND)])
            :  +- LogicalTableScan(table=[[default_catalog, default_database, EventTable1]])
            +- LogicalWatermarkAssigner(rowtime=[$rowtime], watermark=[-($2, 5000:INTERVAL SECOND)])
               +- LogicalTableScan(table=[[default_catalog, default_database, EventTable2]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[id], orderBy=[$rowtime DESC], select=[id, val, $rowtime])
+- Exchange(distribution=[hash[id]])
   +- Calc(select=[id, val, $rowtime])
      +- MultiJoin(commonJoinKey=[id], joinTypes=[INNER], inputUniqueKeys=[noUniqueKey, noUniqueKey], joinConditions=[=(id, id0)], select=[id,val,$rowtime,id0,price,$rowtime0], rowType=[RecordType(VARCHAR(2147483647) id, INTEGER val, TIMESTAMP(3) $rowtime, VARCHAR(2147483647) id0, DOUBLE price, TIMESTAMP(3) $rowtime0)])
         :- Exchange(distribution=[hash[id]])
         :  +- Calc(select=[id, val, CAST($rowtime AS TIMESTAMP(3)) AS $rowtime])
         :     +- WatermarkAssigner(rowtime=[$rowtime], watermark=[-($rowtime, 5000:INTERVAL SECOND)])
         :        +- TableSourceScan(table=[[default_catalog, default_database, EventTable1]], fields=[id, val, $rowtime])
         +- Exchange(distribution=[hash[id]])
            +- Calc(select=[id, price, CAST($rowtime AS TIMESTAMP(3)) AS $rowtime])
               +- WatermarkAssigner(rowtime=[$rowtime], watermark=[-($rowtime, 5000:INTERVAL SECOND)])
                  +- TableSourceScan(table=[[default_catalog, default_database, EventTable2]], fields=[id, price, $rowtime])
]]>
    </Resource>
  </TestCase>
</Root>
