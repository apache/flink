<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testDynamicFilteringWithStaticPartitionPruning[mode = ALL_EXCHANGES_BLOCKING]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7])
+- LogicalFilter(condition=[AND(=($3, $7), >($4, 10), >(CAST($3):BIGINT, 1))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, fact1]])
      +- LogicalTableScan(table=[[default_catalog, default_database, dim]])

== Optimized Physical Plan ==
HashJoin(joinType=[InnerJoin], where=[=(p1, p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
:- Exchange(distribution=[hash[p1]])
:  +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1, partitions=[{p1=2}, {p1=3}]]], fields=[a1, b1, c1, p1])
:     +- DynamicFilteringDataCollector(fields=[p])
:        +- Calc(select=[x, y, z, p], where=[AND(>(x, 10), >(CAST(p AS BIGINT), 1))])
:           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
+- Exchange(distribution=[hash[p]])
   +- Calc(select=[x, y, z, p], where=[AND(>(x, 10), >(CAST(p AS BIGINT), 1))])
      +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])

== Optimized Execution Plan ==
HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
:- Exchange(distribution=[hash[p1]])
:  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1, partitions=[{p1=2}, {p1=3}]]], fields=[a1, b1, c1, p1])\n])
:     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
:     :  +- DynamicFilteringDataCollector(fields=[p])
:     :     +- Calc(select=[x, y, z, p], where=[((x > 10) AND (CAST(p AS BIGINT) > 1))])(reuse_id=[1])
:     :        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
:     +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1, partitions=[{p1=2}, {p1=3}]]], fields=[a1, b1, c1, p1])
+- Exchange(distribution=[hash[p]])
   +- Reused(reference_id=[1])

== Physical Execution Plan ==
{
  "nodes" : [ {
    "id" : ,
    "type" : "Source: fact1[]",
    "pact" : "Data Source",
    "contents" : "[]:DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1, partitions=[{p1=2}, {p1=3}]]], fields=[a1, b1, c1, p1])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: dim[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[x, y, z, p], where=[((x > 10) AND (CAST(p AS BIGINT) > 1))])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "DynamicFilteringDataCollector[]",
    "pact" : "Operator",
    "contents" : "[]:DynamicFilteringDataCollector(fields=[p])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(members=[\\nOrderEnforcer\\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1, partitions=[{p1=2}, {p1=3}]]], fields=[a1, b1, c1, p1])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "REBALANCE",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "HashJoin[]",
    "pact" : "Operator",
    "contents" : "[]:HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p1]",
      "side" : "second"
    } ]
  } ]
}]]>
    </Resource>
  </TestCase>
  <TestCase name="testDuplicateFactTables[mode = ALL_EXCHANGES_BLOCKING]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7], a10=[$8], b10=[$9], c10=[$10], p10=[$11])
+- LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7], a10=[$8], b10=[$9], c10=[$10], p10=[$11])
   +- LogicalJoin(condition=[=($5, $12)], joinType=[inner])
      :- LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7])
      :  +- LogicalFilter(condition=[AND(=($3, $7), >($4, 10))])
      :     +- LogicalJoin(condition=[true], joinType=[inner])
      :        :- LogicalTableScan(table=[[default_catalog, default_database, fact1]])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, dim]])
      +- LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], b10=[CAST($1):BIGINT])
         +- LogicalTableScan(table=[[default_catalog, default_database, fact1]])

== Optimized Physical Plan ==
Calc(select=[a1, b1, c1, p1, x, y, z, p, a10, b10, c10, p10])
+- HashJoin(joinType=[InnerJoin], where=[=(y, b100)], select=[a1, b1, c1, p1, x, y, z, p, a10, b10, c10, p10, b100], build=[left])
   :- Exchange(distribution=[hash[y]])
   :  +- HashJoin(joinType=[InnerJoin], where=[=(p1, p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
   :     :- Exchange(distribution=[hash[p1]])
   :     :  +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
   :     :     +- DynamicFilteringDataCollector(fields=[p])
   :     :        +- Calc(select=[x, y, z, p], where=[>(x, 10)])
   :     :           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
   :     +- Exchange(distribution=[hash[p]])
   :        +- Calc(select=[x, y, z, p], where=[>(x, 10)])
   :           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
   +- Exchange(distribution=[hash[b10]])
      +- Calc(select=[a1, b1, c1, p1, CAST(b1 AS BIGINT) AS b10])
         +- TableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])

== Optimized Execution Plan ==
Calc(select=[a1, b1, c1, p1, x, y, z, p, a10, b10, c10, p10])
+- HashJoin(joinType=[InnerJoin], where=[(y = b100)], select=[a1, b1, c1, p1, x, y, z, p, a10, b10, c10, p10, b100], build=[left])
   :- Exchange(distribution=[hash[y]])
   :  +- HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
   :     :- Exchange(distribution=[hash[p1]])
   :     :  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\n])
   :     :     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
   :     :     :  +- DynamicFilteringDataCollector(fields=[p])
   :     :     :     +- Calc(select=[x, y, z, p], where=[(x > 10)])(reuse_id=[1])
   :     :     :        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
   :     :     +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
   :     +- Exchange(distribution=[hash[p]])
   :        +- Reused(reference_id=[1])
   +- Exchange(distribution=[hash[b10]])
      +- Calc(select=[a1, b1, c1, p1, CAST(b1 AS BIGINT) AS b10])
         +- TableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])

== Physical Execution Plan ==
{
  "nodes" : [ {
    "id" : ,
    "type" : "Source: fact1[]",
    "pact" : "Data Source",
    "contents" : "[]:DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: dim[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[x, y, z, p], where=[(x > 10)])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "DynamicFilteringDataCollector[]",
    "pact" : "Operator",
    "contents" : "[]:DynamicFilteringDataCollector(fields=[p])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(members=[\\nOrderEnforcer\\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "REBALANCE",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "HashJoin[]",
    "pact" : "Operator",
    "contents" : "[]:HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p1]",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "Source: fact1[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[a1, b1, c1, p1, CAST(b1 AS BIGINT) AS b10])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "HashJoin[]",
    "pact" : "Operator",
    "contents" : "[]:HashJoin(joinType=[InnerJoin], where=[(y = b100)], select=[a1, b1, c1, p1, x, y, z, p, a10, b10, c10, p10, b100], build=[left])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[y]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[b10]",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[a1, b1, c1, p1, x, y, z, p, a10, b10, c10, p10])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  } ]
}]]>
    </Resource>
  </TestCase>
  <TestCase name="testDuplicateFactTables[mode = ALL_EXCHANGES_PIPELINED]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7], a10=[$8], b10=[$9], c10=[$10], p10=[$11])
+- LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7], a10=[$8], b10=[$9], c10=[$10], p10=[$11])
   +- LogicalJoin(condition=[=($5, $12)], joinType=[inner])
      :- LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7])
      :  +- LogicalFilter(condition=[AND(=($3, $7), >($4, 10))])
      :     +- LogicalJoin(condition=[true], joinType=[inner])
      :        :- LogicalTableScan(table=[[default_catalog, default_database, fact1]])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, dim]])
      +- LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], b10=[CAST($1):BIGINT])
         +- LogicalTableScan(table=[[default_catalog, default_database, fact1]])

== Optimized Physical Plan ==
Calc(select=[a1, b1, c1, p1, x, y, z, p, a10, b10, c10, p10])
+- HashJoin(joinType=[InnerJoin], where=[=(y, b100)], select=[a1, b1, c1, p1, x, y, z, p, a10, b10, c10, p10, b100], build=[left])
   :- Exchange(distribution=[hash[y]])
   :  +- HashJoin(joinType=[InnerJoin], where=[=(p1, p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
   :     :- Exchange(distribution=[hash[p1]])
   :     :  +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
   :     :     +- DynamicFilteringDataCollector(fields=[p])
   :     :        +- Calc(select=[x, y, z, p], where=[>(x, 10)])
   :     :           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
   :     +- Exchange(distribution=[hash[p]])
   :        +- Calc(select=[x, y, z, p], where=[>(x, 10)])
   :           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
   +- Exchange(distribution=[hash[b10]])
      +- Calc(select=[a1, b1, c1, p1, CAST(b1 AS BIGINT) AS b10])
         +- TableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])

== Optimized Execution Plan ==
Calc(select=[a1, b1, c1, p1, x, y, z, p, a10, b10, c10, p10])
+- HashJoin(joinType=[InnerJoin], where=[(y = b100)], select=[a1, b1, c1, p1, x, y, z, p, a10, b10, c10, p10, b100], build=[left])
   :- Exchange(distribution=[hash[y]])
   :  +- HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
   :     :- Exchange(distribution=[hash[p1]])
   :     :  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\n])
   :     :     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
   :     :     :  +- DynamicFilteringDataCollector(fields=[p])
   :     :     :     +- Calc(select=[x, y, z, p], where=[(x > 10)])(reuse_id=[1])
   :     :     :        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
   :     :     +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
   :     +- Exchange(distribution=[hash[p]], shuffle_mode=[BATCH])
   :        +- Reused(reference_id=[1])
   +- Exchange(distribution=[hash[b10]])
      +- Calc(select=[a1, b1, c1, p1, CAST(b1 AS BIGINT) AS b10])
         +- TableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])

== Physical Execution Plan ==
{
  "nodes" : [ {
    "id" : ,
    "type" : "Source: fact1[]",
    "pact" : "Data Source",
    "contents" : "[]:DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: dim[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[x, y, z, p], where=[(x > 10)])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "DynamicFilteringDataCollector[]",
    "pact" : "Operator",
    "contents" : "[]:DynamicFilteringDataCollector(fields=[p])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(members=[\\nOrderEnforcer\\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "REBALANCE",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "HashJoin[]",
    "pact" : "Operator",
    "contents" : "[]:HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p1]",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "Source: fact1[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[a1, b1, c1, p1, CAST(b1 AS BIGINT) AS b10])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "HashJoin[]",
    "pact" : "Operator",
    "contents" : "[]:HashJoin(joinType=[InnerJoin], where=[(y = b100)], select=[a1, b1, c1, p1, x, y, z, p, a10, b10, c10, p10, b100], build=[left])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[y]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[b10]",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[a1, b1, c1, p1, x, y, z, p, a10, b10, c10, p10])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  } ]
}]]>
    </Resource>
  </TestCase>
  <TestCase name="testDynamicFilteringWithMultipleInput[mode = ALL_EXCHANGES_BLOCKING]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7], a2=[$8], b2=[$9], c2=[$10], p2=[$11])
+- LogicalFilter(condition=[AND(=($3, $7), =($3, $11), >($4, 10))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, fact1]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, dim]])
      +- LogicalTableScan(table=[[default_catalog, default_database, fact2]])

== Optimized Physical Plan ==
HashJoin(joinType=[InnerJoin], where=[=(p1, p2)], select=[a1, b1, c1, p1, x, y, z, p, a2, b2, c2, p2], build=[left])
:- HashJoin(joinType=[InnerJoin], where=[=(p1, p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
:  :- Exchange(distribution=[hash[p1]])
:  :  +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
:  :     +- DynamicFilteringDataCollector(fields=[p])
:  :        +- Calc(select=[x, y, z, p], where=[>(x, 10)])
:  :           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
:  +- Exchange(distribution=[hash[p]])
:     +- Calc(select=[x, y, z, p], where=[>(x, 10)])
:        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
+- Exchange(distribution=[hash[p2]])
   +- TableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])

== Optimized Execution Plan ==
MultipleInput(readOrder=[2,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(p1 = p2)], select=[a1, b1, c1, p1, x, y, z, p, a2, b2, c2, p2], build=[left])\n:- HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])\n:  :- [#2] Exchange(distribution=[hash[p1]])\n:  +- [#3] Exchange(distribution=[hash[p]])\n+- [#1] Exchange(distribution=[hash[p2]])\n])
:- Exchange(distribution=[hash[p2]])
:  +- TableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])
:- Exchange(distribution=[hash[p1]])
:  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\n])
:     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
:     :  +- DynamicFilteringDataCollector(fields=[p])
:     :     +- Calc(select=[x, y, z, p], where=[(x > 10)])(reuse_id=[1])
:     :        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
:     +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
+- Exchange(distribution=[hash[p]])
   +- Reused(reference_id=[1])

== Physical Execution Plan ==
{
  "nodes" : [ {
    "id" : ,
    "type" : "Source: fact1[]",
    "pact" : "Data Source",
    "contents" : "[]:DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: fact2[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: dim[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[x, y, z, p], where=[(x > 10)])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "DynamicFilteringDataCollector[]",
    "pact" : "Operator",
    "contents" : "[]:DynamicFilteringDataCollector(fields=[p])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(members=[\\nOrderEnforcer\\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "REBALANCE",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(readOrder=[2,1,0], members=[\\nHashJoin(joinType=[InnerJoin], where=[(p1 = p2)], select=[a1, b1, c1, p1, x, y, z, p, a2, b2, c2, p2], build=[left])\\n:- HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])\\n:  :- [#2] Exchange(distribution=[hash[p1]])\\n:  +- [#3] Exchange(distribution=[hash[p]])\\n+- [#1] Exchange(distribution=[hash[p2]])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p1]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p2]",
      "side" : "second"
    } ]
  } ]
}]]>
    </Resource>
  </TestCase>
  <TestCase name="testDynamicFilteringWithMultipleInput[mode = ALL_EXCHANGES_PIPELINED]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7], a2=[$8], b2=[$9], c2=[$10], p2=[$11])
+- LogicalFilter(condition=[AND(=($3, $7), =($3, $11), >($4, 10))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, fact1]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, dim]])
      +- LogicalTableScan(table=[[default_catalog, default_database, fact2]])

== Optimized Physical Plan ==
HashJoin(joinType=[InnerJoin], where=[=(p1, p2)], select=[a1, b1, c1, p1, x, y, z, p, a2, b2, c2, p2], build=[left])
:- HashJoin(joinType=[InnerJoin], where=[=(p1, p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
:  :- Exchange(distribution=[hash[p1]])
:  :  +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
:  :     +- DynamicFilteringDataCollector(fields=[p])
:  :        +- Calc(select=[x, y, z, p], where=[>(x, 10)])
:  :           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
:  +- Exchange(distribution=[hash[p]])
:     +- Calc(select=[x, y, z, p], where=[>(x, 10)])
:        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
+- Exchange(distribution=[hash[p2]])
   +- TableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])

== Optimized Execution Plan ==
MultipleInput(readOrder=[2,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(p1 = p2)], select=[a1, b1, c1, p1, x, y, z, p, a2, b2, c2, p2], build=[left])\n:- HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])\n:  :- [#2] Exchange(distribution=[hash[p1]])\n:  +- [#3] Exchange(distribution=[hash[p]], shuffle_mode=[BATCH])\n+- [#1] Exchange(distribution=[hash[p2]])\n])
:- Exchange(distribution=[hash[p2]])
:  +- TableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])
:- Exchange(distribution=[hash[p1]])
:  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\n])
:     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
:     :  +- DynamicFilteringDataCollector(fields=[p])
:     :     +- Calc(select=[x, y, z, p], where=[(x > 10)])(reuse_id=[1])
:     :        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
:     +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
+- Exchange(distribution=[hash[p]], shuffle_mode=[BATCH])
   +- Reused(reference_id=[1])

== Physical Execution Plan ==
{
  "nodes" : [ {
    "id" : ,
    "type" : "Source: fact1[]",
    "pact" : "Data Source",
    "contents" : "[]:DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: fact2[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: dim[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[x, y, z, p], where=[(x > 10)])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "DynamicFilteringDataCollector[]",
    "pact" : "Operator",
    "contents" : "[]:DynamicFilteringDataCollector(fields=[p])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(members=[\\nOrderEnforcer\\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "REBALANCE",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(readOrder=[2,1,0], members=[\\nHashJoin(joinType=[InnerJoin], where=[(p1 = p2)], select=[a1, b1, c1, p1, x, y, z, p, a2, b2, c2, p2], build=[left])\\n:- HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])\\n:  :- [#2] Exchange(distribution=[hash[p1]])\\n:  +- [#3] Exchange(distribution=[hash[p]], shuffle_mode=[BATCH])\\n+- [#1] Exchange(distribution=[hash[p2]])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p1]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p2]",
      "side" : "second"
    } ]
  } ]
}]]>
    </Resource>
  </TestCase>
  <TestCase name="testDynamicFilteringWithStaticPartitionPruning[mode = ALL_EXCHANGES_PIPELINED]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7])
+- LogicalFilter(condition=[AND(=($3, $7), >($4, 10), >(CAST($3):BIGINT, 1))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, fact1]])
      +- LogicalTableScan(table=[[default_catalog, default_database, dim]])

== Optimized Physical Plan ==
HashJoin(joinType=[InnerJoin], where=[=(p1, p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
:- Exchange(distribution=[hash[p1]])
:  +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1, partitions=[{p1=2}, {p1=3}]]], fields=[a1, b1, c1, p1])
:     +- DynamicFilteringDataCollector(fields=[p])
:        +- Calc(select=[x, y, z, p], where=[AND(>(x, 10), >(CAST(p AS BIGINT), 1))])
:           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
+- Exchange(distribution=[hash[p]])
   +- Calc(select=[x, y, z, p], where=[AND(>(x, 10), >(CAST(p AS BIGINT), 1))])
      +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])

== Optimized Execution Plan ==
HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
:- Exchange(distribution=[hash[p1]])
:  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1, partitions=[{p1=2}, {p1=3}]]], fields=[a1, b1, c1, p1])\n])
:     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
:     :  +- DynamicFilteringDataCollector(fields=[p])
:     :     +- Calc(select=[x, y, z, p], where=[((x > 10) AND (CAST(p AS BIGINT) > 1))])(reuse_id=[1])
:     :        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
:     +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1, partitions=[{p1=2}, {p1=3}]]], fields=[a1, b1, c1, p1])
+- Exchange(distribution=[hash[p]], shuffle_mode=[BATCH])
   +- Reused(reference_id=[1])

== Physical Execution Plan ==
{
  "nodes" : [ {
    "id" : ,
    "type" : "Source: fact1[]",
    "pact" : "Data Source",
    "contents" : "[]:DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1, partitions=[{p1=2}, {p1=3}]]], fields=[a1, b1, c1, p1])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: dim[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[x, y, z, p], where=[((x > 10) AND (CAST(p AS BIGINT) > 1))])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "DynamicFilteringDataCollector[]",
    "pact" : "Operator",
    "contents" : "[]:DynamicFilteringDataCollector(fields=[p])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(members=[\\nOrderEnforcer\\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1, partitions=[{p1=2}, {p1=3}]]], fields=[a1, b1, c1, p1])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "REBALANCE",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "HashJoin[]",
    "pact" : "Operator",
    "contents" : "[]:HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p1]",
      "side" : "second"
    } ]
  } ]
}]]>
    </Resource>
  </TestCase>
  <TestCase name="testLegacySource[mode = ALL_EXCHANGES_BLOCKING]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a1=[$0], b1=[$1], c1=[$2], d1=[$3], p1=[$4], x=[$5], y=[$6], z=[$7], p=[$8])
+- LogicalFilter(condition=[AND(=($4, $8), >($5, 10))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, legacy_source]])
      +- LogicalTableScan(table=[[default_catalog, default_database, dim]])

== Optimized Physical Plan ==
HashJoin(joinType=[InnerJoin], where=[=(p1, p)], select=[a1, b1, c1, d1, p1, x, y, z, p], build=[right])
:- Exchange(distribution=[hash[p1]])
:  +- TableSourceScan(table=[[default_catalog, default_database, legacy_source]], fields=[a1, b1, c1, d1, p1])
+- Exchange(distribution=[hash[p]])
   +- Calc(select=[x, y, z, p], where=[>(x, 10)])
      +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])

== Optimized Execution Plan ==
HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, d1, p1, x, y, z, p], build=[right])
:- Exchange(distribution=[hash[p1]])
:  +- TableSourceScan(table=[[default_catalog, default_database, legacy_source]], fields=[a1, b1, c1, d1, p1])
+- Exchange(distribution=[hash[p]])
   +- Calc(select=[x, y, z, p], where=[(x > 10)])
      +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])

== Physical Execution Plan ==
{
  "nodes" : [ {
    "id" : ,
    "type" : "Source: legacy_source[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, legacy_source]], fields=[a1, b1, c1, d1, p1])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Source: dim[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[x, y, z, p], where=[(x > 10)])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "HashJoin[]",
    "pact" : "Operator",
    "contents" : "[]:HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, d1, p1, x, y, z, p], build=[right])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p1]",
      "side" : "second"
    } ]
  } ]
}]]>
    </Resource>
  </TestCase>
  <TestCase name="testLegacySource[mode = ALL_EXCHANGES_PIPELINED]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a1=[$0], b1=[$1], c1=[$2], d1=[$3], p1=[$4], x=[$5], y=[$6], z=[$7], p=[$8])
+- LogicalFilter(condition=[AND(=($4, $8), >($5, 10))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, legacy_source]])
      +- LogicalTableScan(table=[[default_catalog, default_database, dim]])

== Optimized Physical Plan ==
HashJoin(joinType=[InnerJoin], where=[=(p1, p)], select=[a1, b1, c1, d1, p1, x, y, z, p], build=[right])
:- Exchange(distribution=[hash[p1]])
:  +- TableSourceScan(table=[[default_catalog, default_database, legacy_source]], fields=[a1, b1, c1, d1, p1])
+- Exchange(distribution=[hash[p]])
   +- Calc(select=[x, y, z, p], where=[>(x, 10)])
      +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])

== Optimized Execution Plan ==
HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, d1, p1, x, y, z, p], build=[right])
:- Exchange(distribution=[hash[p1]])
:  +- TableSourceScan(table=[[default_catalog, default_database, legacy_source]], fields=[a1, b1, c1, d1, p1])
+- Exchange(distribution=[hash[p]])
   +- Calc(select=[x, y, z, p], where=[(x > 10)])
      +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])

== Physical Execution Plan ==
{
  "nodes" : [ {
    "id" : ,
    "type" : "Source: legacy_source[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, legacy_source]], fields=[a1, b1, c1, d1, p1])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Source: dim[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[x, y, z, p], where=[(x > 10)])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "HashJoin[]",
    "pact" : "Operator",
    "contents" : "[]:HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, d1, p1, x, y, z, p], build=[right])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p1]",
      "side" : "second"
    } ]
  } ]
}]]>
    </Resource>
  </TestCase>
  <TestCase name="testSimpleDynamicFiltering[mode = ALL_EXCHANGES_BLOCKING]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7])
+- LogicalFilter(condition=[AND(=($3, $7), >($4, 10))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, fact1]])
      +- LogicalTableScan(table=[[default_catalog, default_database, dim]])

== Optimized Physical Plan ==
HashJoin(joinType=[InnerJoin], where=[=(p1, p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
:- Exchange(distribution=[hash[p1]])
:  +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
:     +- DynamicFilteringDataCollector(fields=[p])
:        +- Calc(select=[x, y, z, p], where=[>(x, 10)])
:           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
+- Exchange(distribution=[hash[p]])
   +- Calc(select=[x, y, z, p], where=[>(x, 10)])
      +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])

== Optimized Execution Plan ==
HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
:- Exchange(distribution=[hash[p1]])
:  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\n])
:     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
:     :  +- DynamicFilteringDataCollector(fields=[p])
:     :     +- Calc(select=[x, y, z, p], where=[(x > 10)])(reuse_id=[1])
:     :        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
:     +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
+- Exchange(distribution=[hash[p]])
   +- Reused(reference_id=[1])

== Physical Execution Plan ==
{
  "nodes" : [ {
    "id" : ,
    "type" : "Source: fact1[]",
    "pact" : "Data Source",
    "contents" : "[]:DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: dim[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[x, y, z, p], where=[(x > 10)])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "DynamicFilteringDataCollector[]",
    "pact" : "Operator",
    "contents" : "[]:DynamicFilteringDataCollector(fields=[p])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(members=[\\nOrderEnforcer\\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "REBALANCE",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "HashJoin[]",
    "pact" : "Operator",
    "contents" : "[]:HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p1]",
      "side" : "second"
    } ]
  } ]
}]]>
    </Resource>
  </TestCase>
  <TestCase name="testReuseDimSide[mode = ALL_EXCHANGES_BLOCKING]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalUnion(all=[true])
:- LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7])
:  +- LogicalFilter(condition=[AND(=($3, $7), >($4, 10))])
:     +- LogicalJoin(condition=[true], joinType=[inner])
:        :- LogicalTableScan(table=[[default_catalog, default_database, fact1]])
:        +- LogicalTableScan(table=[[default_catalog, default_database, dim]])
+- LogicalProject(a2=[$0], b2=[$1], c2=[$2], p2=[$3], x=[$4], y=[$5], z=[$6], p=[$7])
   +- LogicalFilter(condition=[AND(=($3, $7), >($4, 10))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalTableScan(table=[[default_catalog, default_database, fact2]])
         +- LogicalTableScan(table=[[default_catalog, default_database, dim]])

== Optimized Physical Plan ==
Union(all=[true], union=[a1, b1, c1, p1, x, y, z, p])
:- HashJoin(joinType=[InnerJoin], where=[=(p1, p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
:  :- Exchange(distribution=[hash[p1]])
:  :  +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
:  :     +- DynamicFilteringDataCollector(fields=[p])
:  :        +- Calc(select=[x, y, z, p], where=[>(x, 10)])
:  :           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
:  +- Exchange(distribution=[hash[p]])
:     +- Calc(select=[x, y, z, p], where=[>(x, 10)])
:        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
+- HashJoin(joinType=[InnerJoin], where=[=(p2, p)], select=[a2, b2, c2, p2, x, y, z, p], build=[right])
   :- Exchange(distribution=[hash[p2]])
   :  +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])
   :     +- DynamicFilteringDataCollector(fields=[p])
   :        +- Calc(select=[x, y, z, p], where=[>(x, 10)])
   :           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
   +- Exchange(distribution=[hash[p]])
      +- Calc(select=[x, y, z, p], where=[>(x, 10)])
         +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])

== Optimized Execution Plan ==
MultipleInput(readOrder=[1,0,1,0], members=[\nUnion(all=[true], union=[a1, b1, c1, p1, x, y, z, p])\n:- HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])\n:  :- [#1] Exchange(distribution=[hash[p1]])\n:  +- [#2] Exchange(distribution=[hash[p]])\n+- HashJoin(joinType=[InnerJoin], where=[(p2 = p)], select=[a2, b2, c2, p2, x, y, z, p], build=[right])\n   :- [#3] Exchange(distribution=[hash[p2]])\n   +- [#2] Exchange(distribution=[hash[p]])\n])
:- Exchange(distribution=[hash[p1]])
:  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\n])
:     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
:     :  +- DynamicFilteringDataCollector(fields=[p])(reuse_id=[2])
:     :     +- Calc(select=[x, y, z, p], where=[(x > 10)])(reuse_id=[1])
:     :        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
:     +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
:- Exchange(distribution=[hash[p]])(reuse_id=[3])
:  +- Reused(reference_id=[1])
:- Exchange(distribution=[hash[p2]])
:  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])\n])
:     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
:     :  +- Reused(reference_id=[2])
:     +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])
+- Reused(reference_id=[3])

== Physical Execution Plan ==
{
  "nodes" : [ {
    "id" : ,
    "type" : "Source: fact1[]",
    "pact" : "Data Source",
    "contents" : "[]:DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: fact2[]",
    "pact" : "Data Source",
    "contents" : "[]:DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: dim[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[x, y, z, p], where=[(x > 10)])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "DynamicFilteringDataCollector[]",
    "pact" : "Operator",
    "contents" : "[]:DynamicFilteringDataCollector(fields=[p])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(members=[\\nOrderEnforcer\\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "REBALANCE",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(members=[\\nOrderEnforcer\\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "REBALANCE",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(readOrder=[1,0,1,0], members=[\\nUnion(all=[true], union=[a1, b1, c1, p1, x, y, z, p])\\n:- HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])\\n:  :- [#1] Exchange(distribution=[hash[p1]])\\n:  +- [#2] Exchange(distribution=[hash[p]])\\n+- HashJoin(joinType=[InnerJoin], where=[(p2 = p)], select=[a2, b2, c2, p2, x, y, z, p], build=[right])\\n   :- [#3] Exchange(distribution=[hash[p2]])\\n   +- [#2] Exchange(distribution=[hash[p]])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p1]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p2]",
      "side" : "second"
    } ]
  } ]
}]]>
    </Resource>
  </TestCase>
  <TestCase name="testSimpleDynamicFiltering[mode = ALL_EXCHANGES_PIPELINED]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7])
+- LogicalFilter(condition=[AND(=($3, $7), >($4, 10))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, fact1]])
      +- LogicalTableScan(table=[[default_catalog, default_database, dim]])

== Optimized Physical Plan ==
HashJoin(joinType=[InnerJoin], where=[=(p1, p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
:- Exchange(distribution=[hash[p1]])
:  +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
:     +- DynamicFilteringDataCollector(fields=[p])
:        +- Calc(select=[x, y, z, p], where=[>(x, 10)])
:           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
+- Exchange(distribution=[hash[p]])
   +- Calc(select=[x, y, z, p], where=[>(x, 10)])
      +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])

== Optimized Execution Plan ==
HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
:- Exchange(distribution=[hash[p1]])
:  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\n])
:     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
:     :  +- DynamicFilteringDataCollector(fields=[p])
:     :     +- Calc(select=[x, y, z, p], where=[(x > 10)])(reuse_id=[1])
:     :        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
:     +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
+- Exchange(distribution=[hash[p]], shuffle_mode=[BATCH])
   +- Reused(reference_id=[1])

== Physical Execution Plan ==
{
  "nodes" : [ {
    "id" : ,
    "type" : "Source: fact1[]",
    "pact" : "Data Source",
    "contents" : "[]:DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: dim[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[x, y, z, p], where=[(x > 10)])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "DynamicFilteringDataCollector[]",
    "pact" : "Operator",
    "contents" : "[]:DynamicFilteringDataCollector(fields=[p])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(members=[\\nOrderEnforcer\\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "REBALANCE",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "HashJoin[]",
    "pact" : "Operator",
    "contents" : "[]:HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p1]",
      "side" : "second"
    } ]
  } ]
}]]>
    </Resource>
  </TestCase>
  <TestCase name="testReuseDimSide[mode = ALL_EXCHANGES_PIPELINED]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalUnion(all=[true])
:- LogicalProject(a1=[$0], b1=[$1], c1=[$2], p1=[$3], x=[$4], y=[$5], z=[$6], p=[$7])
:  +- LogicalFilter(condition=[AND(=($3, $7), >($4, 10))])
:     +- LogicalJoin(condition=[true], joinType=[inner])
:        :- LogicalTableScan(table=[[default_catalog, default_database, fact1]])
:        +- LogicalTableScan(table=[[default_catalog, default_database, dim]])
+- LogicalProject(a2=[$0], b2=[$1], c2=[$2], p2=[$3], x=[$4], y=[$5], z=[$6], p=[$7])
   +- LogicalFilter(condition=[AND(=($3, $7), >($4, 10))])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalTableScan(table=[[default_catalog, default_database, fact2]])
         +- LogicalTableScan(table=[[default_catalog, default_database, dim]])

== Optimized Physical Plan ==
Union(all=[true], union=[a1, b1, c1, p1, x, y, z, p])
:- HashJoin(joinType=[InnerJoin], where=[=(p1, p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])
:  :- Exchange(distribution=[hash[p1]])
:  :  +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
:  :     +- DynamicFilteringDataCollector(fields=[p])
:  :        +- Calc(select=[x, y, z, p], where=[>(x, 10)])
:  :           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
:  +- Exchange(distribution=[hash[p]])
:     +- Calc(select=[x, y, z, p], where=[>(x, 10)])
:        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
+- HashJoin(joinType=[InnerJoin], where=[=(p2, p)], select=[a2, b2, c2, p2, x, y, z, p], build=[right])
   :- Exchange(distribution=[hash[p2]])
   :  +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])
   :     +- DynamicFilteringDataCollector(fields=[p])
   :        +- Calc(select=[x, y, z, p], where=[>(x, 10)])
   :           +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
   +- Exchange(distribution=[hash[p]])
      +- Calc(select=[x, y, z, p], where=[>(x, 10)])
         +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])

== Optimized Execution Plan ==
MultipleInput(readOrder=[1,0,1,0], members=[\nUnion(all=[true], union=[a1, b1, c1, p1, x, y, z, p])\n:- HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])\n:  :- [#1] Exchange(distribution=[hash[p1]])\n:  +- [#2] Exchange(distribution=[hash[p]], shuffle_mode=[BATCH])\n+- HashJoin(joinType=[InnerJoin], where=[(p2 = p)], select=[a2, b2, c2, p2, x, y, z, p], build=[right])\n   :- [#3] Exchange(distribution=[hash[p2]])\n   +- [#2] Exchange(distribution=[hash[p]], shuffle_mode=[BATCH])\n])
:- Exchange(distribution=[hash[p1]])
:  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\n])
:     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
:     :  +- DynamicFilteringDataCollector(fields=[p])(reuse_id=[2])
:     :     +- Calc(select=[x, y, z, p], where=[(x > 10)])(reuse_id=[1])
:     :        +- TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])
:     +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])
:- Exchange(distribution=[hash[p]], shuffle_mode=[BATCH])(reuse_id=[3])
:  +- Reused(reference_id=[1])
:- Exchange(distribution=[hash[p2]])
:  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])\n])
:     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
:     :  +- Reused(reference_id=[2])
:     +- DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])
+- Reused(reference_id=[3])

== Physical Execution Plan ==
{
  "nodes" : [ {
    "id" : ,
    "type" : "Source: fact1[]",
    "pact" : "Data Source",
    "contents" : "[]:DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: fact2[]",
    "pact" : "Data Source",
    "contents" : "[]:DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])",
    "parallelism" : 10
  }, {
    "id" : ,
    "type" : "Source: dim[]",
    "pact" : "Data Source",
    "contents" : "[]:TableSourceScan(table=[[default_catalog, default_database, dim, filter=[]]], fields=[x, y, z, p])",
    "parallelism" : 1
  }, {
    "id" : ,
    "type" : "Calc[]",
    "pact" : "Operator",
    "contents" : "[]:Calc(select=[x, y, z, p], where=[(x > 10)])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "DynamicFilteringDataCollector[]",
    "pact" : "Operator",
    "contents" : "[]:DynamicFilteringDataCollector(fields=[p])",
    "parallelism" : 1,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(members=[\\nOrderEnforcer\\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact1]], fields=[a1, b1, c1, p1])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "REBALANCE",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(members=[\\nOrderEnforcer\\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\\n+- [#2] DynamicFilteringTableSourceScan(table=[[default_catalog, default_database, fact2]], fields=[a2, b2, c2, p2])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "REBALANCE",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "FORWARD",
      "side" : "second"
    } ]
  }, {
    "id" : ,
    "type" : "MultipleInput[]",
    "pact" : "Operator",
    "contents" : "[]:MultipleInput(readOrder=[1,0,1,0], members=[\\nUnion(all=[true], union=[a1, b1, c1, p1, x, y, z, p])\\n:- HashJoin(joinType=[InnerJoin], where=[(p1 = p)], select=[a1, b1, c1, p1, x, y, z, p], build=[right])\\n:  :- [#1] Exchange(distribution=[hash[p1]])\\n:  +- [#2] Exchange(distribution=[hash[p]], shuffle_mode=[BATCH])\\n+- HashJoin(joinType=[InnerJoin], where=[(p2 = p)], select=[a2, b2, c2, p2, x, y, z, p], build=[right])\\n   :- [#3] Exchange(distribution=[hash[p2]])\\n   +- [#2] Exchange(distribution=[hash[p]], shuffle_mode=[BATCH])\\n])",
    "parallelism" : 10,
    "predecessors" : [ {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p1]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p]",
      "side" : "second"
    }, {
      "id" : ,
      "ship_strategy" : "HASH[p2]",
      "side" : "second"
    } ]
  } ]
}]]>
    </Resource>
  </TestCase>
</Root>
