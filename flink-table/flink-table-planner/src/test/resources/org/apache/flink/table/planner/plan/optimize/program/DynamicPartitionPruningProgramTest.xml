<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testAntiJoin">
    <Resource name="sql">
      <![CDATA[Select * from fact_part where not exists (select dim_date_sk from dim where dim.price < 500)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4])
+- LogicalFilter(condition=[NOT(EXISTS({
LogicalFilter(condition=[<($3, 500)])
  LogicalTableScan(table=[[testCatalog, test_database, dim]])
}))])
   +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
NestedLoopJoin(joinType=[LeftAntiJoin], where=[$f0], select=[id, name, amount, price, fact_date_sk], build=[right], singleRowJoin=[true])
:- TableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[IS NOT NULL(m) AS $f0])
      +- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS m])
         +- Exchange(distribution=[single])
            +- LocalHashAggregate(select=[Partial_MIN(i) AS min$0])
               +- Calc(select=[true AS i], where=[<(price, 500)])
                  +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[], project=[price], metadata=[]]], fields=[price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComplexCalcInFactSide">
    <Resource name="sql">
      <![CDATA[Select * from dim join (select fact_date_sk as fact_date_sk1, price + 1 as price1 from fact_part) t1 on t1.fact_date_sk1 = dim_date_sk and t1.price1 > 200 and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], fact_date_sk1=[$5], price1=[$6])
+- LogicalJoin(condition=[AND(=($5, $4), >($6, 200), <($3, 500))], joinType=[inner])
   :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
   +- LogicalProject(fact_date_sk1=[$4], price1=[+($3, 1)])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk1, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, fact_date_sk1, price1], build=[right])
:- Exchange(distribution=[hash[dim_date_sk]])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[fact_date_sk1]])
   +- Calc(select=[fact_date_sk AS fact_date_sk1, +(price, 1) AS price1], where=[>(+(price, 1), 200)])
      +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, filter=[], project=[price, fact_date_sk], metadata=[]]], fields=[price, fact_date_sk])
         +- DynamicFilteringDataCollector(fields=[dim_date_sk])
            +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
               +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComplexDimSideWithAggInDimSide">
    <Resource name="sql">
      <![CDATA[Select * from fact_part join (select dim_date_sk, sum(dim.price) from dim where  dim.price < 500 group by dim_date_sk) dimSide on fact_part.fact_date_sk = dimSide.dim_date_sk]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], dim_date_sk=[$5], EXPR$1=[$6])
+- LogicalJoin(condition=[=($4, $5)], joinType=[inner])
   :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
   +- LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
      +- LogicalProject(dim_date_sk=[$4], price=[$3])
         +- LogicalFilter(condition=[<($3, 500)])
            +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk, dim_date_sk, EXPR$1], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
:     +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:        +- HashAggregate(isMerge=[true], groupBy=[dim_date_sk], select=[dim_date_sk, Final_SUM(sum$0) AS EXPR$1])
:           +- Exchange(distribution=[hash[dim_date_sk]])
:              +- LocalHashAggregate(groupBy=[dim_date_sk], select=[dim_date_sk, Partial_SUM(price) AS sum$0])
:                 +- Calc(select=[price, dim_date_sk], where=[<(price, 500)])
:                    +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[], project=[price, dim_date_sk], metadata=[]]], fields=[price, dim_date_sk])
+- HashAggregate(isMerge=[true], groupBy=[dim_date_sk], select=[dim_date_sk, Final_SUM(sum$0) AS EXPR$1])
   +- Exchange(distribution=[hash[dim_date_sk]])
      +- LocalHashAggregate(groupBy=[dim_date_sk], select=[dim_date_sk, Partial_SUM(price) AS sum$0])
         +- Calc(select=[price, dim_date_sk], where=[<(price, 500)])
            +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[], project=[price, dim_date_sk], metadata=[]]], fields=[price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testComplexDimSideWithJoinInDimSide">
    <Resource name="sql">
      <![CDATA[Select * from fact_part join (select * from dim, sales, item where dim.id = sales.id and sales.id = item.id and dim.price < 500 and sales.price > 300) dimSide on fact_part.fact_date_sk = dimSide.dim_date_sk]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], male=[$6], amount0=[$7], price0=[$8], dim_date_sk=[$9], id00=[$10], amount00=[$11], price00=[$12], id1=[$13], amount1=[$14], price1=[$15])
+- LogicalJoin(condition=[=($4, $9)], joinType=[inner])
   :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
   +- LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], amount0=[$6], price0=[$7], id1=[$8], amount1=[$9], price1=[$10])
      +- LogicalFilter(condition=[AND(=($0, $5), =($5, $8), <($3, 500), >($7, 300))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalJoin(condition=[true], joinType=[inner])
            :  :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
            :  +- LogicalTableScan(table=[[testCatalog, test_database, sales]])
            +- LogicalTableScan(table=[[testCatalog, test_database, item]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk, id0, male, amount0, price0, dim_date_sk, id00, amount00, price00, id1, amount1, price1], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- TableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- HashJoin(joinType=[InnerJoin], where=[=(id0, id1)], select=[id, male, amount, price, dim_date_sk, id0, amount0, price0, id1, amount1, price1], build=[left])
      :- HashJoin(joinType=[InnerJoin], where=[=(id, id0)], select=[id, male, amount, price, dim_date_sk, id0, amount0, price0], build=[right])
      :  :- Exchange(distribution=[hash[id]])
      :  :  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
      :  :     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
      :  +- Exchange(distribution=[hash[id]])
      :     +- Calc(select=[id, amount, price], where=[>(price, 300)])
      :        +- TableSourceScan(table=[[testCatalog, test_database, sales, filter=[]]], fields=[id, amount, price])
      +- Exchange(distribution=[hash[id]])
         +- TableSourceScan(table=[[testCatalog, test_database, item]], fields=[id, amount, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDimSideReuseAfterProjectionPushdown">
    <Resource name="sql">
      <![CDATA[SELECT /*+ BROADCAST(dim) */ fact3.* FROM
(SELECT /*+ BROADCAST(dim) */ fact.id, fact.price, fact.amount FROM (
 SELECT id, price, amount, fact_date_sk FROM fact_part  UNION ALL SELECT id, price, amount, fact_date_sk FROM fact_part2) fact, dim
 WHERE fact_date_sk = dim_date_sk and dim.price < 500 and dim.price > 300)
 fact3 JOIN dim ON fact3.amount = dim.id AND dim.amount < 10]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], price=[$1], amount=[$2])
+- LogicalJoin(condition=[AND(=($2, $3), <($5, 10))], joinType=[inner], joinHints=[[[BROADCAST inheritPath:[0] options:[dim]]]])
   :- LogicalProject(id=[$0], price=[$1], amount=[$2])
   :  +- LogicalFilter(condition=[AND(=($3, $8), <($7, 500), >($7, 300))])
   :     +- LogicalJoin(condition=[true], joinType=[inner], joinHints=[[[BROADCAST inheritPath:[0, 0] options:[dim]]]])
   :        :- LogicalUnion(all=[true])
   :        :  :- LogicalProject(id=[$0], price=[$3], amount=[$2], fact_date_sk=[$4])
   :        :  :  +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]], hints=[[[ALIAS inheritPath:[] options:[fact_part]]]])
   :        :  +- LogicalProject(id=[$0], price=[$3], amount=[$2], fact_date_sk=[$4])
   :        :     +- LogicalTableScan(table=[[testCatalog, test_database, fact_part2]], hints=[[[ALIAS inheritPath:[] options:[fact_part2]]]])
   :        +- LogicalTableScan(table=[[testCatalog, test_database, dim]], hints=[[[ALIAS inheritPath:[] options:[dim]]]])
   +- LogicalTableScan(table=[[testCatalog, test_database, dim]], hints=[[[ALIAS inheritPath:[] options:[dim]]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[id, price, amount])
+- MultipleInput(readOrder=[0,0,0,1,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[(amount = id0)], select=[id, price, amount, id0], isBroadcast=[true], build=[right])\n:- Calc(select=[id, price, amount])\n:  +- HashJoin(joinType=[InnerJoin], where=[(fact_date_sk = dim_date_sk)], select=[id, price, amount, fact_date_sk, dim_date_sk], isBroadcast=[true], build=[right])\n:     :- Union(all=[true], union=[id, price, amount, fact_date_sk])\n:     :  :- OrderEnforcer\n:     :  :  :- [#3] Exchange(distribution=[any], shuffle_mode=[BATCH])\n:     :  :  +- [#4] DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, project=[id, price, amount, fact_date_sk], metadata=[]]], fields=[id, price, amount, fact_date_sk])\n:     :  +- OrderEnforcer\n:     :     :- [#5] Exchange(distribution=[any], shuffle_mode=[BATCH])\n:     :     +- [#6] DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part2, project=[id, price, amount, fact_date_sk], metadata=[]]], fields=[id, price, amount, fact_date_sk])\n:     +- [#2] Exchange(distribution=[broadcast])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[id], where=[(amount < 10)])(reuse_id=[2])
   :     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[], project=[id, amount, price, dim_date_sk], metadata=[]]], fields=[id, amount, price, dim_date_sk])(reuse_id=[1])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
   :     +- Reused(reference_id=[1])
   :- Exchange(distribution=[any], shuffle_mode=[BATCH])
   :  +- DynamicFilteringDataCollector(fields=[id])(reuse_id=[3])
   :     +- Reused(reference_id=[2])
   :- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, project=[id, price, amount, fact_date_sk], metadata=[]]], fields=[id, price, amount, fact_date_sk])
   :- Exchange(distribution=[any], shuffle_mode=[BATCH])
   :  +- Reused(reference_id=[3])
   +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part2, project=[id, price, amount, fact_date_sk], metadata=[]]], fields=[id, price, amount, fact_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDimTableFilteringFieldsNotInJoinKey">
    <Resource name="sql">
      <![CDATA[Select * from dim, fact_part where fact_part.id = dim.id and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], name=[$6], amount0=[$7], price0=[$8], fact_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($5, $0), <($3, 500))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(id0, id)], select=[id, male, amount, price, dim_date_sk, id0, name, amount0, price0, fact_date_sk], build=[left])
:- Exchange(distribution=[hash[id]])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[id]])
   +- TableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDimTableWithFilterPushDown">
    <Resource name="sql">
      <![CDATA[Select * from fact_part join (Select * from dim) t1 on fact_part.fact_date_sk = dim_date_sk where t1.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], male=[$6], amount0=[$7], price0=[$8], dim_date_sk=[$9])
+- LogicalFilter(condition=[<($8, 500)])
   +- LogicalJoin(condition=[=($4, $9)], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      +- LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4])
         +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk, id0, male, amount0, price0, dim_date_sk], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
:     +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:        +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:           +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDimTableWithoutFilter">
    <Resource name="sql">
      <![CDATA[Select * from dim, fact_part where fact_part.fact_date_sk = dim.dim_date_sk and fact_part.price > 100]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], name=[$6], amount0=[$7], price0=[$8], fact_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($9, $4), >($8, 100))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, id0, name, amount0, price0, fact_date_sk], build=[right])
:- Exchange(distribution=[hash[dim_date_sk]])
:  +- TableSourceScan(table=[[testCatalog, test_database, dim]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[fact_date_sk]])
   +- Calc(select=[id, name, amount, price, fact_date_sk], where=[>(price, 100)])
      +- TableSourceScan(table=[[testCatalog, test_database, fact_part, filter=[]]], fields=[id, name, amount, price, fact_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDimTableWithUnsuitableFilter">
    <Resource name="sql">
      <![CDATA[Select * from dim join fact_part on fact_part.fact_date_sk = dim.dim_date_sk where dim.id is not null]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], name=[$6], amount0=[$7], price0=[$8], fact_date_sk=[$9])
+- LogicalFilter(condition=[IS NOT NULL($0)])
   +- LogicalJoin(condition=[=($9, $4)], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, id0, name, amount0, price0, fact_date_sk], build=[left])
:- Exchange(distribution=[hash[dim_date_sk]])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[IS NOT NULL(id)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[fact_date_sk]])
   +- TableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDppFactSideCannotReuseWithSameCommonSource">
    <Resource name="sql">
      <![CDATA[SELECT * FROM(
 Select fact_part.id, fact_part.price, fact_part.amount from fact_part join (Select * from dim) t1 on fact_part.fact_date_sk = dim_date_sk where t1.price < 500
 UNION ALL Select fact_part.id, fact_part.price, fact_part.amount from fact_part)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], price=[$1], amount=[$2])
+- LogicalUnion(all=[true])
   :- LogicalProject(id=[$0], price=[$3], amount=[$2])
   :  +- LogicalFilter(condition=[<($8, 500)])
   :     +- LogicalJoin(condition=[=($4, $9)], joinType=[inner])
   :        :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
   :        +- LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4])
   :           +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
   +- LogicalProject(id=[$0], price=[$3], amount=[$2])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Union(all=[true], union=[id, price, amount])
:- Calc(select=[id, price, amount])
:  +- HashJoin(joinType=[InnerJoin], where=[(fact_date_sk = dim_date_sk)], select=[id, amount, price, fact_date_sk, dim_date_sk], build=[right])
:     :- Exchange(distribution=[hash[fact_date_sk]])
:     :  +- MultipleInput(members=[\nOrderEnforcer\n:- [#1] Exchange(distribution=[any], shuffle_mode=[BATCH])\n+- [#2] DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, project=[id, amount, price, fact_date_sk], metadata=[]]], fields=[id, amount, price, fact_date_sk])\n])
:     :     :- Exchange(distribution=[any], shuffle_mode=[BATCH])
:     :     :  +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:     :     :     +- Calc(select=[dim_date_sk], where=[(price < 500)])(reuse_id=[1])
:     :     :        +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[], project=[price, dim_date_sk], metadata=[]]], fields=[price, dim_date_sk])
:     :     +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, project=[id, amount, price, fact_date_sk], metadata=[]]], fields=[id, amount, price, fact_date_sk])
:     +- Exchange(distribution=[hash[dim_date_sk]])
:        +- Reused(reference_id=[1])
+- TableSourceScan(table=[[testCatalog, test_database, fact_part, project=[id, price, amount], metadata=[]]], fields=[id, price, amount])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDppWithAggInFactSideAndJoinKeyInGroupFunction">
    <Resource name="sql">
      <![CDATA[Select * from (Select fact_part.id, item.amount, fact_part.name, sum(fact_part.price), sum(item.price), sum(fact_date_sk) as fact_date_sk1 from fact_part join item on fact_part.id = item.id group by fact_part.id, fact_part.name, item.amount) t1 join dim on t1.fact_date_sk1 = dim.dim_date_sk where dim.price < 500 and dim.price > 300 ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], amount=[$1], name=[$2], EXPR$3=[$3], EXPR$4=[$4], fact_date_sk1=[$5], id0=[$6], male=[$7], amount0=[$8], price=[$9], dim_date_sk=[$10])
+- LogicalFilter(condition=[AND(<($9, 500), >($9, 300))])
   +- LogicalJoin(condition=[=($5, $10)], joinType=[inner])
      :- LogicalProject(id=[$0], amount=[$2], name=[$1], EXPR$3=[$3], EXPR$4=[$4], fact_date_sk1=[$5])
      :  +- LogicalAggregate(group=[{0, 1, 2}], EXPR$3=[SUM($3)], EXPR$4=[SUM($4)], fact_date_sk1=[SUM($5)])
      :     +- LogicalProject(id=[$0], name=[$1], amount=[$6], price=[$3], price0=[$7], fact_date_sk=[$4])
      :        +- LogicalJoin(condition=[=($0, $5)], joinType=[inner])
      :           :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      :           +- LogicalTableScan(table=[[testCatalog, test_database, item]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk1, dim_date_sk)], select=[id, amount, name, EXPR$3, EXPR$4, fact_date_sk1, id0, male, amount0, price, dim_date_sk], build=[left])
:- Exchange(distribution=[hash[fact_date_sk1]])
:  +- Calc(select=[id, amount, name, EXPR$3, EXPR$4, fact_date_sk1])
:     +- HashAggregate(isMerge=[false], groupBy=[id, name, amount], select=[id, name, amount, SUM(price) AS EXPR$3, SUM(price0) AS EXPR$4, SUM(fact_date_sk) AS fact_date_sk1])
:        +- Calc(select=[id, name, amount, price, price0, fact_date_sk])
:           +- HashJoin(joinType=[InnerJoin], where=[=(id, id0)], select=[id, name, price, fact_date_sk, id0, amount, price0], build=[right])
:              :- Exchange(distribution=[hash[id]])
:              :  +- TableSourceScan(table=[[testCatalog, test_database, fact_part, project=[id, name, price, fact_date_sk], metadata=[]]], fields=[id, name, price, fact_date_sk])
:              +- Exchange(distribution=[hash[id]])
:                 +- TableSourceScan(table=[[testCatalog, test_database, item]], fields=[id, amount, price])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDppWithAggInFactSideAndJoinKeyInGrouping">
    <Resource name="sql">
      <![CDATA[Select * from (Select fact_date_sk, item.amount, sum(fact_part.price) from fact_part join item on fact_part.id = item.id group by fact_date_sk, item.amount) t1 join dim on t1.fact_date_sk = dim.dim_date_sk where dim.price < 500 and dim.price > 300 ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(fact_date_sk=[$0], amount=[$1], EXPR$2=[$2], id=[$3], male=[$4], amount0=[$5], price=[$6], dim_date_sk=[$7])
+- LogicalFilter(condition=[AND(<($6, 500), >($6, 300))])
   +- LogicalJoin(condition=[=($0, $7)], joinType=[inner])
      :- LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)])
      :  +- LogicalProject(fact_date_sk=[$4], amount=[$6], price=[$3])
      :     +- LogicalJoin(condition=[=($0, $5)], joinType=[inner])
      :        :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      :        +- LogicalTableScan(table=[[testCatalog, test_database, item]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[fact_date_sk, amount, EXPR$2, id, male, amount0, price, dim_date_sk], build=[left])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- HashAggregate(isMerge=[true], groupBy=[fact_date_sk, amount], select=[fact_date_sk, amount, Final_SUM(sum$0) AS EXPR$2])
:     +- Exchange(distribution=[hash[fact_date_sk, amount]])
:        +- LocalHashAggregate(groupBy=[fact_date_sk, amount], select=[fact_date_sk, amount, Partial_SUM(price) AS sum$0])
:           +- Calc(select=[fact_date_sk, amount, price])
:              +- HashJoin(joinType=[InnerJoin], where=[=(id, id0)], select=[id, price, fact_date_sk, id0, amount], build=[right])
:                 :- Exchange(distribution=[hash[id]])
:                 :  +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, project=[id, price, fact_date_sk], metadata=[]]], fields=[id, price, fact_date_sk])
:                 :     +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:                 :        +- Calc(select=[id, male, amount, price, dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
:                 :           +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
:                 +- Exchange(distribution=[hash[id]])
:                    +- TableSourceScan(table=[[testCatalog, test_database, item, project=[id, amount], metadata=[]]], fields=[id, amount])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDppWithAggInFactSideWithAggPushDownDisable">
    <Resource name="sql">
      <![CDATA[Select * from (Select id, amount, fact_date_sk, count(name), sum(price) from fact_part where fact_date_sk > 100 group by id, amount, fact_date_sk) t1 join dim on t1.fact_date_sk = dim.dim_date_sk where dim.price < 500 and dim.price > 300 ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], amount=[$1], fact_date_sk=[$2], EXPR$3=[$3], EXPR$4=[$4], id0=[$5], male=[$6], amount0=[$7], price=[$8], dim_date_sk=[$9])
+- LogicalFilter(condition=[AND(<($8, 500), >($8, 300))])
   +- LogicalJoin(condition=[=($2, $9)], joinType=[inner])
      :- LogicalAggregate(group=[{0, 1, 2}], EXPR$3=[COUNT($3)], EXPR$4=[SUM($4)])
      :  +- LogicalProject(id=[$0], amount=[$2], fact_date_sk=[$4], name=[$1], price=[$3])
      :     +- LogicalFilter(condition=[>($4, 100)])
      :        +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, amount, fact_date_sk, EXPR$3, EXPR$4, id0, male, amount0, price, dim_date_sk], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- HashAggregate(isMerge=[true], groupBy=[id, amount, fact_date_sk], select=[id, amount, fact_date_sk, Final_COUNT(count$0) AS EXPR$3, Final_SUM(sum$1) AS EXPR$4])
:     +- Exchange(distribution=[hash[id, amount, fact_date_sk]])
:        +- LocalHashAggregate(groupBy=[id, amount, fact_date_sk], select=[id, amount, fact_date_sk, Partial_COUNT(name) AS count$0, Partial_SUM(price) AS sum$1])
:           +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, partitions=[{fact_date_sk=1990}, {fact_date_sk=1991}, {fact_date_sk=1992}]]], fields=[id, name, amount, price, fact_date_sk])
:              +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:                 +- Calc(select=[id, male, amount, price, dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
:                    +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDppWithAggInFactSideWithAggPushDownEnable">
    <Resource name="sql">
      <![CDATA[Select * from (Select id, amount, fact_date_sk, count(name), sum(price) from fact_part where fact_date_sk > 100 group by id, amount, fact_date_sk) t1 join dim on t1.fact_date_sk = dim.dim_date_sk where dim.price < 500 and dim.price > 300 ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], amount=[$1], fact_date_sk=[$2], EXPR$3=[$3], EXPR$4=[$4], id0=[$5], male=[$6], amount0=[$7], price=[$8], dim_date_sk=[$9])
+- LogicalFilter(condition=[AND(<($8, 500), >($8, 300))])
   +- LogicalJoin(condition=[=($2, $9)], joinType=[inner])
      :- LogicalAggregate(group=[{0, 1, 2}], EXPR$3=[COUNT($3)], EXPR$4=[SUM($4)])
      :  +- LogicalProject(id=[$0], amount=[$2], fact_date_sk=[$4], name=[$1], price=[$3])
      :     +- LogicalFilter(condition=[>($4, 100)])
      :        +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, amount, fact_date_sk, EXPR$3, EXPR$4, id0, male, amount0, price, dim_date_sk], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- HashAggregate(isMerge=[true], groupBy=[id, amount, fact_date_sk], select=[id, amount, fact_date_sk, Final_COUNT(count$0) AS EXPR$3, Final_SUM(sum$1) AS EXPR$4])
:     +- Exchange(distribution=[hash[id, amount, fact_date_sk]])
:        +- TableSourceScan(table=[[testCatalog, test_database, fact_part, partitions=[{fact_date_sk=1990}, {fact_date_sk=1991}, {fact_date_sk=1992}], aggregates=[grouping=[id,amount,fact_date_sk], aggFunctions=[CountAggFunction(name),LongSumAggFunction(price)]]]], fields=[id, amount, fact_date_sk, count$0, sum$1])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDPPWithDimSideJoinKeyChanged">
    <Resource name="sql">
      <![CDATA[Select * from fact_part join item on fact_part.id = item.id join (select dim_date_sk + 1 as dim_date_sk, price from dim) dim1 on fact_part.fact_date_sk = dim1.dim_date_sk where dim1.price < 500 and dim1.price > 300]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], amount0=[$6], price0=[$7], dim_date_sk=[$8], price1=[$9])
+- LogicalFilter(condition=[AND(<($9, 500), >($9, 300))])
   +- LogicalJoin(condition=[=($4, $8)], joinType=[inner])
      :- LogicalJoin(condition=[=($0, $5)], joinType=[inner])
      :  :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      :  +- LogicalTableScan(table=[[testCatalog, test_database, item]])
      +- LogicalProject(dim_date_sk=[+($4, 1)], price=[$3])
         +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk, id0, amount0, price0, dim_date_sk, price1], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- HashJoin(joinType=[InnerJoin], where=[=(id, id0)], select=[id, name, amount, price, fact_date_sk, id0, amount0, price0], build=[right])
:     :- Exchange(distribution=[hash[id]])
:     :  +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
:     :     +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:     :        +- Calc(select=[+(dim_date_sk, 1) AS dim_date_sk, price], where=[SEARCH(price, Sarg[(300..500)])])
:     :           +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[], project=[price, dim_date_sk], metadata=[]]], fields=[price, dim_date_sk])
:     +- Exchange(distribution=[hash[id]])
:        +- TableSourceScan(table=[[testCatalog, test_database, item]], fields=[id, amount, price])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[+(dim_date_sk, 1) AS dim_date_sk, price], where=[SEARCH(price, Sarg[(300..500)])])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[], project=[price, dim_date_sk], metadata=[]]], fields=[price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDPPWithFactSideJoinKeyChanged">
    <Resource name="sql">
      <![CDATA[Select * from (select fact_date_sk + 1 as fact_date_sk, id from fact_part) fact_part1 join item on fact_part1.id = item.id join dim on fact_part1.fact_date_sk = dim.dim_date_sk where dim.price < 500 and dim.price > 300]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(fact_date_sk=[$0], id=[$1], id0=[$2], amount=[$3], price=[$4], id1=[$5], male=[$6], amount0=[$7], price0=[$8], dim_date_sk=[$9])
+- LogicalFilter(condition=[AND(<($8, 500), >($8, 300))])
   +- LogicalJoin(condition=[=($0, $9)], joinType=[inner])
      :- LogicalJoin(condition=[=($1, $2)], joinType=[inner])
      :  :- LogicalProject(fact_date_sk=[+($4, 1)], id=[$0])
      :  :  +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      :  +- LogicalTableScan(table=[[testCatalog, test_database, item]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[fact_date_sk, id, id0, amount, price, id1, male, amount0, price0, dim_date_sk], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- HashJoin(joinType=[InnerJoin], where=[=(id, id0)], select=[fact_date_sk, id, id0, amount, price], build=[left])
:     :- Exchange(distribution=[hash[id]])
:     :  +- Calc(select=[+(fact_date_sk, 1) AS fact_date_sk, id])
:     :     +- TableSourceScan(table=[[testCatalog, test_database, fact_part, project=[fact_date_sk, id], metadata=[]]], fields=[fact_date_sk, id])
:     +- Exchange(distribution=[hash[id]])
:        +- TableSourceScan(table=[[testCatalog, test_database, item]], fields=[id, amount, price])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDPPWithJoinKeysNotIncludePartitionKeys">
    <Resource name="sql">
      <![CDATA[Select * from fact_part, item, dim where fact_part.id = dim.id and fact_part.id = item.id and dim.id = item.id  and dim.price < 500 and dim.price > 300]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], amount0=[$6], price0=[$7], id1=[$8], male=[$9], amount1=[$10], price1=[$11], dim_date_sk=[$12])
+- LogicalFilter(condition=[AND(=($0, $8), =($0, $5), =($8, $5), <($11, 500), >($11, 300))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      :  +- LogicalTableScan(table=[[testCatalog, test_database, item]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(id, id1)], select=[id, name, amount, price, fact_date_sk, id0, amount0, price0, id1, male, amount1, price1, dim_date_sk], build=[right])
:- HashJoin(joinType=[InnerJoin], where=[=(id, id0)], select=[id, name, amount, price, fact_date_sk, id0, amount0, price0], build=[right])
:  :- Exchange(distribution=[hash[id]])
:  :  +- TableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
:  +- Exchange(distribution=[hash[id]])
:     +- TableSourceScan(table=[[testCatalog, test_database, item]], fields=[id, amount, price])
+- Exchange(distribution=[hash[id]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[AND(SEARCH(price, Sarg[(300..500)]), IS NOT NULL(id))])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDppWithoutJoinReorder">
    <Resource name="sql">
      <![CDATA[Select * from fact_part, item, dim where fact_part.fact_date_sk = dim.dim_date_sk and fact_part.id = item.id and dim.id = item.id  and dim.price < 500 and dim.price > 300]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], amount0=[$6], price0=[$7], id1=[$8], male=[$9], amount1=[$10], price1=[$11], dim_date_sk=[$12])
+- LogicalFilter(condition=[AND(=($4, $12), =($0, $5), =($8, $5), <($11, 500), >($11, 300))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      :  +- LogicalTableScan(table=[[testCatalog, test_database, item]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[AND(=(fact_date_sk, dim_date_sk), =(id1, id0))], select=[id, name, amount, price, fact_date_sk, id0, amount0, price0, id1, male, amount1, price1, dim_date_sk], build=[right])
:- Exchange(distribution=[hash[fact_date_sk, id0]])
:  +- HashJoin(joinType=[InnerJoin], where=[=(id, id0)], select=[id, name, amount, price, fact_date_sk, id0, amount0, price0], build=[right])
:     :- Exchange(distribution=[hash[id]])
:     :  +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
:     :     +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:     :        +- Calc(select=[id, male, amount, price, dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
:     :           +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
:     +- Exchange(distribution=[hash[id]])
:        +- TableSourceScan(table=[[testCatalog, test_database, item]], fields=[id, amount, price])
+- Exchange(distribution=[hash[dim_date_sk, id]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDppWithSubQuery">
    <Resource name="sql">
      <![CDATA[Select * from fact_part, item, dim where fact_part.id = item.id and dim.price in (select price from dim where amount = (select amount from dim where amount = 2000)) and fact_part.fact_date_sk = dim.dim_date_sk]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], amount0=[$6], price0=[$7], id1=[$8], male=[$9], amount1=[$10], price1=[$11], dim_date_sk=[$12])
+- LogicalFilter(condition=[AND(=($0, $5), IN($11, {
LogicalProject(price=[$3])
  LogicalFilter(condition=[=($2, $SCALAR_QUERY({
LogicalProject(amount=[$2])
  LogicalFilter(condition=[=($2, 2000)])
    LogicalTableScan(table=[[testCatalog, test_database, dim]])
}))])
    LogicalTableScan(table=[[testCatalog, test_database, dim]])
}), =($4, $12))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      :  +- LogicalTableScan(table=[[testCatalog, test_database, item]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk, id0, amount0, price0, id1, male, amount1, price1, dim_date_sk], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- HashJoin(joinType=[InnerJoin], where=[=(id, id0)], select=[id, name, amount, price, fact_date_sk, id0, amount0, price0], build=[right])
:     :- Exchange(distribution=[hash[id]])
:     :  +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
:     :     +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:     :        +- HashJoin(joinType=[LeftSemiJoin], where=[=(price, price0)], select=[id, male, amount, price, dim_date_sk], build=[right])
:     :           :- Exchange(distribution=[hash[price]])
:     :           :  +- TableSourceScan(table=[[testCatalog, test_database, dim, project=[id, male, amount, price, dim_date_sk], metadata=[]]], fields=[id, male, amount, price, dim_date_sk])
:     :           +- Exchange(distribution=[hash[price]])
:     :              +- Calc(select=[price])
:     :                 +- NestedLoopJoin(joinType=[InnerJoin], where=[=(amount, $f0)], select=[amount, price, $f0], build=[right], singleRowJoin=[true])
:     :                    :- Calc(select=[amount, price])
:     :                    :  +- TableSourceScan(table=[[testCatalog, test_database, dim, project=[id, male, amount, price, dim_date_sk], metadata=[]]], fields=[id, male, amount, price, dim_date_sk])
:     :                    +- Exchange(distribution=[broadcast])
:     :                       +- HashAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
:     :                          +- Exchange(distribution=[single])
:     :                             +- LocalHashAggregate(select=[Partial_SINGLE_VALUE(amount) AS (value$0, count$1)])
:     :                                +- Calc(select=[CAST(2000 AS BIGINT) AS amount], where=[=(amount, 2000)])
:     :                                   +- TableSourceScan(table=[[testCatalog, test_database, dim, project=[id, male, amount, price, dim_date_sk], metadata=[]]], fields=[id, male, amount, price, dim_date_sk])
:     +- Exchange(distribution=[hash[id]])
:        +- TableSourceScan(table=[[testCatalog, test_database, item]], fields=[id, amount, price])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- HashJoin(joinType=[LeftSemiJoin], where=[=(price, price0)], select=[id, male, amount, price, dim_date_sk], build=[right])
      :- Exchange(distribution=[hash[price]])
      :  +- TableSourceScan(table=[[testCatalog, test_database, dim, project=[id, male, amount, price, dim_date_sk], metadata=[]]], fields=[id, male, amount, price, dim_date_sk])
      +- Exchange(distribution=[hash[price]])
         +- Calc(select=[price])
            +- NestedLoopJoin(joinType=[InnerJoin], where=[=(amount, $f0)], select=[amount, price, $f0], build=[right], singleRowJoin=[true])
               :- Calc(select=[amount, price])
               :  +- TableSourceScan(table=[[testCatalog, test_database, dim, project=[id, male, amount, price, dim_date_sk], metadata=[]]], fields=[id, male, amount, price, dim_date_sk])
               +- Exchange(distribution=[broadcast])
                  +- HashAggregate(isMerge=[true], select=[Final_SINGLE_VALUE(value$0, count$1) AS $f0])
                     +- Exchange(distribution=[single])
                        +- LocalHashAggregate(select=[Partial_SINGLE_VALUE(amount) AS (value$0, count$1)])
                           +- Calc(select=[CAST(2000 AS BIGINT) AS amount], where=[=(amount, 2000)])
                              +- TableSourceScan(table=[[testCatalog, test_database, dim, project=[id, male, amount, price, dim_date_sk], metadata=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDppWithUnionInFactSide">
    <Resource name="sql">
      <![CDATA[Select * from (select id, fact_date_sk, amount + 1 as amount1 from fact_part where price = 1 union all select id, fact_date_sk, amount + 1 from fact_part where price = 2) fact_part2, item, dim where fact_part2.fact_date_sk = dim.dim_date_sk and fact_part2.id = item.id and dim.price < 500 and dim.price > 300]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], fact_date_sk=[$1], amount1=[$2], id0=[$3], amount=[$4], price=[$5], id1=[$6], male=[$7], amount0=[$8], price0=[$9], dim_date_sk=[$10])
+- LogicalFilter(condition=[AND(=($1, $10), =($0, $3), <($9, 500), >($9, 300))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalUnion(all=[true])
      :  :  :- LogicalProject(id=[$0], fact_date_sk=[$4], amount1=[+($2, 1)])
      :  :  :  +- LogicalFilter(condition=[=($3, 1)])
      :  :  :     +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      :  :  +- LogicalProject(id=[$0], fact_date_sk=[$4], EXPR$2=[+($2, 1)])
      :  :     +- LogicalFilter(condition=[=($3, 2)])
      :  :        +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      :  +- LogicalTableScan(table=[[testCatalog, test_database, item]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, fact_date_sk, amount1, id0, amount, price, id1, male, amount0, price0, dim_date_sk], build=[left])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- HashJoin(joinType=[InnerJoin], where=[=(id, id0)], select=[id, fact_date_sk, amount1, id0, amount, price], build=[left])
:     :- Exchange(distribution=[hash[id]])
:     :  +- Union(all=[true], union=[id, fact_date_sk, amount1])
:     :     :- Calc(select=[id, fact_date_sk, +(amount, 1) AS amount1], where=[=(price, 1)])
:     :     :  +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, filter=[], project=[id, amount, price, fact_date_sk], metadata=[]]], fields=[id, amount, price, fact_date_sk])
:     :     :     +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:     :     :        +- Calc(select=[id, male, amount, price, dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
:     :     :           +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
:     :     +- Calc(select=[id, fact_date_sk, +(amount, 1) AS EXPR$2], where=[=(price, 2)])
:     :        +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, filter=[], project=[id, amount, price, fact_date_sk], metadata=[]]], fields=[id, amount, price, fact_date_sk])
:     :           +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:     :              +- Calc(select=[id, male, amount, price, dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
:     :                 +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
:     +- Exchange(distribution=[hash[id]])
:        +- TableSourceScan(table=[[testCatalog, test_database, item]], fields=[id, amount, price])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[SEARCH(price, Sarg[(300..500)])])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDynamicFilteringFactInLeftRule">
    <Resource name="sql">
      <![CDATA[Select * from fact_part, dim where fact_part.fact_date_sk = dim.dim_date_sk and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], male=[$6], amount0=[$7], price0=[$8], dim_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($4, $9), <($8, 500))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
NestedLoopJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk, id0, male, amount0, price0, dim_date_sk], build=[right])
:- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
:  +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:     +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:        +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDynamicFilteringFactInLeftWithCalcRule">
    <Resource name="sql">
      <![CDATA[Select * from fact_part, dim where fact_part.fact_date_sk = dim.dim_date_sk and fact_part.price > 200 and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], male=[$6], amount0=[$7], price0=[$8], dim_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($4, $9), >($3, 200), <($8, 500))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
NestedLoopJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk, id0, male, amount0, price0, dim_date_sk], build=[right])
:- Calc(select=[id, name, amount, price, fact_date_sk], where=[>(price, 200)])
:  +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, filter=[]]], fields=[id, name, amount, price, fact_date_sk])
:     +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:        +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:           +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDynamicFilteringFactInLeftWithExchangeAndCalcRule">
    <Resource name="sql">
      <![CDATA[Select * from fact_part, dim where fact_part.fact_date_sk = dim.dim_date_sk and fact_part.price > 200 and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], male=[$6], amount0=[$7], price0=[$8], dim_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($4, $9), >($3, 200), <($8, 500))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk, id0, male, amount0, price0, dim_date_sk], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- Calc(select=[id, name, amount, price, fact_date_sk], where=[>(price, 200)])
:     +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, filter=[]]], fields=[id, name, amount, price, fact_date_sk])
:        +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:           +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:              +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDynamicFilteringFactInLeftWithExchangeRule">
    <Resource name="sql">
      <![CDATA[Select * from fact_part, dim where fact_part.fact_date_sk = dim.dim_date_sk and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], male=[$6], amount0=[$7], price0=[$8], dim_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($4, $9), <($8, 500))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk, id0, male, amount0, price0, dim_date_sk], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
:     +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:        +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:           +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDynamicFilteringFactInRightRule">
    <Resource name="sql">
      <![CDATA[Select * from dim, fact_part where fact_part.fact_date_sk = dim.dim_date_sk and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], name=[$6], amount0=[$7], price0=[$8], fact_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($9, $4), <($3, 500))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
NestedLoopJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, id0, name, amount0, price0, fact_date_sk], build=[left])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
   +- DynamicFilteringDataCollector(fields=[dim_date_sk])
      +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
         +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDynamicFilteringFactInRightWithCalcRule">
    <Resource name="sql">
      <![CDATA[Select * from dim, fact_part where fact_part.fact_date_sk = dim.dim_date_sk and fact_part.price > 200 and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], name=[$6], amount0=[$7], price0=[$8], fact_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($9, $4), >($8, 200), <($3, 500))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
NestedLoopJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, id0, name, amount0, price0, fact_date_sk], build=[left])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Calc(select=[id, name, amount, price, fact_date_sk], where=[>(price, 200)])
   +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, filter=[]]], fields=[id, name, amount, price, fact_date_sk])
      +- DynamicFilteringDataCollector(fields=[dim_date_sk])
         +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
            +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDynamicFilteringFactInRightWithExchangeAndCalcRule">
    <Resource name="sql">
      <![CDATA[Select * from dim, fact_part where fact_part.fact_date_sk = dim.dim_date_sk and fact_part.price > 200 and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], name=[$6], amount0=[$7], price0=[$8], fact_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($9, $4), >($8, 200), <($3, 500))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, id0, name, amount0, price0, fact_date_sk], build=[left])
:- Exchange(distribution=[hash[dim_date_sk]])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[fact_date_sk]])
   +- Calc(select=[id, name, amount, price, fact_date_sk], where=[>(price, 200)])
      +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, filter=[]]], fields=[id, name, amount, price, fact_date_sk])
         +- DynamicFilteringDataCollector(fields=[dim_date_sk])
            +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
               +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDynamicFilteringFactInRightWithExchangeRule">
    <Resource name="sql">
      <![CDATA[Select * from dim, fact_part where fact_part.fact_date_sk = dim.dim_date_sk and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], name=[$6], amount0=[$7], price0=[$8], fact_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($9, $4), <($3, 500))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, id0, name, amount0, price0, fact_date_sk], build=[left])
:- Exchange(distribution=[hash[dim_date_sk]])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[fact_date_sk]])
   +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
      +- DynamicFilteringDataCollector(fields=[dim_date_sk])
         +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
            +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testDynamicFilteringFieldIsComputeColumnsInFactSide">
    <Resource name="sql">
      <![CDATA[Select * from dim join (select fact_date_sk, amount + 1 as amount from fact_part) t1 on fact_date_sk = dim_date_sk and t1.amount = dim.amount where dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], fact_date_sk=[$5], amount0=[$6])
+- LogicalFilter(condition=[<($3, 500)])
   +- LogicalJoin(condition=[AND(=($5, $4), =($6, $2))], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalProject(fact_date_sk=[$4], amount=[+($2, 1)])
         +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
NestedLoopJoin(joinType=[InnerJoin], where=[AND(=(fact_date_sk, dim_date_sk), =(amount0, amount))], select=[id, male, amount, price, dim_date_sk, fact_date_sk, amount0], build=[left])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Calc(select=[fact_date_sk, +(amount, 1) AS amount])
   +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, project=[fact_date_sk, amount], metadata=[]]], fields=[fact_date_sk, amount])
      +- DynamicFilteringDataCollector(fields=[dim_date_sk])
         +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
            +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFactTableIsLegacySource">
    <Resource name="sql">
      <![CDATA[Select * from dim, legacy_source where legacy_source.fact_date_sk = dim.dim_date_sk and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], name=[$6], amount0=[$7], price0=[$8], fact_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($9, $4), <($3, 500))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalTableScan(table=[[testCatalog, test_database, legacy_source]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, id0, name, amount0, price0, fact_date_sk], build=[left])
:- Exchange(distribution=[hash[dim_date_sk]])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[fact_date_sk]])
   +- TableSourceScan(table=[[testCatalog, test_database, legacy_source]], fields=[id, name, amount, price, fact_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFactTableIsNotPartitionTable">
    <Resource name="sql">
      <![CDATA[Select * from dim, none_part_fact where none_part_fact.fact_date_sk = dim.dim_date_sk and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], name=[$6], amount0=[$7], price0=[$8], fact_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($9, $4), <($3, 500))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalTableScan(table=[[testCatalog, test_database, none_part_fact]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, id0, name, amount0, price0, fact_date_sk], build=[left])
:- Exchange(distribution=[hash[dim_date_sk]])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[fact_date_sk]])
   +- TableSourceScan(table=[[testCatalog, test_database, none_part_fact]], fields=[id, name, amount, price, fact_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFullOuterJoin">
    <Resource name="sql">
      <![CDATA[Select * from fact_part full outer join (select *  from dim where dim.price < 500) on fact_date_sk = dim_date_sk]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], male=[$6], amount0=[$7], price0=[$8], dim_date_sk=[$9])
+- LogicalJoin(condition=[=($4, $9)], joinType=[full])
   :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
   +- LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4])
      +- LogicalFilter(condition=[<($3, 500)])
         +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[FullOuterJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk, id0, male, amount0, price0, dim_date_sk], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- TableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinKeyIsDynamicFilterFieldNotPartitionKey">
    <Resource name="sql">
      <![CDATA[Select * from dim, fact_part where fact_part.amount = dim.amount and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], name=[$6], amount0=[$7], price0=[$8], fact_date_sk=[$9])
+- LogicalFilter(condition=[AND(=($7, $2), <($3, 500))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(amount0, amount)], select=[id, male, amount, price, dim_date_sk, id0, name, amount0, price0, fact_date_sk], build=[left])
:- Exchange(distribution=[hash[amount]])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[amount]])
   +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
      +- DynamicFilteringDataCollector(fields=[amount])
         +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
            +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinWithFactInLeft">
    <Resource name="sql">
      <![CDATA[Select * from fact_part left outer join dim on fact_part.fact_date_sk = dim.dim_date_sk where dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], male=[$6], amount0=[$7], price0=[$8], dim_date_sk=[$9])
+- LogicalFilter(condition=[<($8, 500)])
   +- LogicalJoin(condition=[=($4, $9)], joinType=[left])
      :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk, id0, male, amount0, price0, dim_date_sk], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
:     +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:        +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:           +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOutJoinWithFactInRight">
    <Resource name="sql">
      <![CDATA[Select * from dim left outer join fact_part on fact_part.fact_date_sk = dim.dim_date_sk where dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], name=[$6], amount0=[$7], price0=[$8], fact_date_sk=[$9])
+- LogicalFilter(condition=[<($3, 500)])
   +- LogicalJoin(condition=[=($9, $4)], joinType=[left])
      :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[LeftOuterJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, id0, name, amount0, price0, fact_date_sk], build=[left])
:- Exchange(distribution=[hash[dim_date_sk]])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[fact_date_sk]])
   +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
      +- DynamicFilteringDataCollector(fields=[dim_date_sk])
         +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
            +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiJoin">
    <Resource name="sql">
      <![CDATA[Select * from fact_part, dim, sales where fact_part.id = sales.id and fact_part.fact_date_sk = dim.dim_date_sk and dim.price < 500 and dim.amount > 100]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4], id0=[$5], male=[$6], amount0=[$7], price0=[$8], dim_date_sk=[$9], id1=[$10], amount1=[$11], price1=[$12])
+- LogicalFilter(condition=[AND(=($0, $10), =($4, $9), <($8, 500), >($7, 100))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
      :  +- LogicalTableScan(table=[[testCatalog, test_database, dim]])
      +- LogicalTableScan(table=[[testCatalog, test_database, sales]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(id, id1)], select=[id, name, amount, price, fact_date_sk, id0, male, amount0, price0, dim_date_sk, id1, amount1, price1], build=[left])
:- Exchange(distribution=[hash[id]])
:  +- HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk, id0, male, amount0, price0, dim_date_sk], build=[right])
:     :- Exchange(distribution=[hash[fact_date_sk]])
:     :  +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
:     :     +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:     :        +- Calc(select=[id, male, amount, price, dim_date_sk], where=[AND(<(price, 500), >(amount, 100))])
:     :           +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
:     +- Exchange(distribution=[hash[dim_date_sk]])
:        +- Calc(select=[id, male, amount, price, dim_date_sk], where=[AND(<(price, 500), >(amount, 100))])
:           +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[id]])
   +- TableSourceScan(table=[[testCatalog, test_database, sales]], fields=[id, amount, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartitionKeysIsComputeColumnsInFactSide">
    <Resource name="sql">
      <![CDATA[Select * from dim join (select fact_date_sk + 1 as fact_date_sk1, price + 1 as price1 from fact_part) t1 on t1.fact_date_sk1 = dim_date_sk and t1.price1 > 200 and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], fact_date_sk1=[$5], price1=[$6])
+- LogicalJoin(condition=[AND(=($5, $4), >($6, 200), <($3, 500))], joinType=[inner])
   :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
   +- LogicalProject(fact_date_sk1=[+($4, 1)], price1=[+($3, 1)])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk1, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, fact_date_sk1, price1], build=[right])
:- Exchange(distribution=[hash[dim_date_sk]])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[fact_date_sk1]])
   +- Calc(select=[+(fact_date_sk, 1) AS fact_date_sk1, +(price, 1) AS price1], where=[>(+(price, 1), 200)])
      +- TableSourceScan(table=[[testCatalog, test_database, fact_part, filter=[], project=[price, fact_date_sk], metadata=[]]], fields=[price, fact_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartitionKeysNameIsChangedInFactSide">
    <Resource name="sql">
      <![CDATA[Select * from dim join (select id, name, amount, price, fact_date_sk as fact_date_sk1 from fact_part) t1 on t1.fact_date_sk1 = dim_date_sk and t1.price > 200 and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], id0=[$5], name=[$6], amount0=[$7], price0=[$8], fact_date_sk1=[$9])
+- LogicalJoin(condition=[AND(=($9, $4), >($8, 200), <($3, 500))], joinType=[inner])
   :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
   +- LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk1=[$4])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, id0, name, amount0, price0, fact_date_sk], build=[left])
:- Exchange(distribution=[hash[dim_date_sk]])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[fact_date_sk]])
   +- Calc(select=[id, name, amount, price, fact_date_sk], where=[>(price, 200)])
      +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, filter=[]]], fields=[id, name, amount, price, fact_date_sk])
         +- DynamicFilteringDataCollector(fields=[dim_date_sk])
            +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
               +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSemiJoin">
    <Resource name="sql">
      <![CDATA[Select * from fact_part where fact_part.fact_date_sk in (select dim_date_sk from dim where dim.price < 500)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], amount=[$2], price=[$3], fact_date_sk=[$4])
+- LogicalFilter(condition=[IN($4, {
LogicalProject(dim_date_sk=[$4])
  LogicalFilter(condition=[<($3, 500)])
    LogicalTableScan(table=[[testCatalog, test_database, dim]])
})])
   +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[LeftSemiJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, name, amount, price, fact_date_sk], build=[right])
:- Exchange(distribution=[hash[fact_date_sk]])
:  +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part]], fields=[id, name, amount, price, fact_date_sk])
:     +- DynamicFilteringDataCollector(fields=[dim_date_sk])
:        +- Calc(select=[dim_date_sk], where=[<(price, 500)])
:           +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[], project=[price, dim_date_sk], metadata=[]]], fields=[price, dim_date_sk])
+- Exchange(distribution=[hash[dim_date_sk]])
   +- Calc(select=[dim_date_sk], where=[<(price, 500)])
      +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[], project=[price, dim_date_sk], metadata=[]]], fields=[price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartitionKeysOrderIsChangedInFactSide">
    <Resource name="sql">
      <![CDATA[Select * from dim join (select fact_date_sk, id, name, amount, price from fact_part) t1 on t1.fact_date_sk = dim_date_sk and t1.price > 200 and dim.price < 500]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], male=[$1], amount=[$2], price=[$3], dim_date_sk=[$4], fact_date_sk=[$5], id0=[$6], name=[$7], amount0=[$8], price0=[$9])
+- LogicalJoin(condition=[AND(=($5, $4), >($9, 200), <($3, 500))], joinType=[inner])
   :- LogicalTableScan(table=[[testCatalog, test_database, dim]])
   +- LogicalProject(fact_date_sk=[$4], id=[$0], name=[$1], amount=[$2], price=[$3])
      +- LogicalTableScan(table=[[testCatalog, test_database, fact_part]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(fact_date_sk, dim_date_sk)], select=[id, male, amount, price, dim_date_sk, fact_date_sk, id0, name, amount0, price0], build=[left])
:- Exchange(distribution=[hash[dim_date_sk]])
:  +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
:     +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
+- Exchange(distribution=[hash[fact_date_sk]])
   +- Calc(select=[fact_date_sk, id, name, amount, price], where=[>(price, 200)])
      +- DynamicFilteringTableSourceScan(table=[[testCatalog, test_database, fact_part, filter=[]]], fields=[id, name, amount, price, fact_date_sk])
         +- DynamicFilteringDataCollector(fields=[dim_date_sk])
            +- Calc(select=[id, male, amount, price, dim_date_sk], where=[<(price, 500)])
               +- TableSourceScan(table=[[testCatalog, test_database, dim, filter=[]]], fields=[id, male, amount, price, dim_date_sk])
]]>
    </Resource>
  </TestCase>
</Root>
