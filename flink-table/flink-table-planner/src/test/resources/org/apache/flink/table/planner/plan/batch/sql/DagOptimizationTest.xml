<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testMultiLevelViews">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a, b, c])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%hello%')])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[<($0, 4)])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalUnion(all=[true])
               :- LogicalProject(a=[$0], b=[$1], c=[$2])
               :  +- LogicalProject(a=[$0], b=[$1], c=[$2])
               :     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%hello%')])
               :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalProject(a=[$0], b=[$1], c=[$2])
                  +- LogicalProject(a=[$0], b=[$1], c=[$2])
                     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%world%')])
                        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink3`], fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[AND(>=($0, 4), <($0, 6))])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalUnion(all=[true])
               :- LogicalProject(a=[$0], b=[$1], c=[$2])
               :  +- LogicalProject(a=[$0], b=[$1], c=[$2])
               :     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%hello%')])
               :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalProject(a=[$0], b=[$1], c=[$2])
                  +- LogicalProject(a=[$0], b=[$1], c=[$2])
                     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%world%')])
                        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])(reuse_id=[2])

Calc(select=[a, b, c], where=[LIKE(c, '%hello%')])(reuse_id=[1])
+- Reused(reference_id=[2])

LegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a, b, c])
+- Reused(reference_id=[1])

HashAggregate(isMerge=[true], groupBy=[b], select=[b, Final_COUNT(count$0) AS cnt])(reuse_id=[3])
+- Exchange(distribution=[hash[b]])
   +- LocalHashAggregate(groupBy=[b], select=[b, Partial_COUNT(a) AS count$0])
      +- Union(all=[true], union=[b, a])
         :- Calc(select=[b, a])
         :  +- Reused(reference_id=[1])
         +- Calc(select=[b, a], where=[LIKE(c, '%world%')])
            +- Reused(reference_id=[2])

LegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[b, cnt])
+- Calc(select=[b, cnt], where=[(b < 4)])
   +- Reused(reference_id=[3])

LegacySink(name=[`default_catalog`.`default_database`.`sink3`], fields=[b, cnt])
+- Calc(select=[b, cnt], where=[SEARCH(b, Sarg[[4..6)])])
   +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks1">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(sum_a=[$0])
      +- LogicalProject(sum_a=[$1], c=[$0])
         +- LogicalAggregate(group=[{0}], sum_a=[SUM($1)])
            +- LogicalProject(c=[$2], a=[$0])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(sum_a=[$0])
      +- LogicalProject(sum_a=[$1], c=[$0])
         +- LogicalAggregate(group=[{0}], sum_a=[SUM($1)])
            +- LogicalProject(c=[$2], a=[$0])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[sum_a])(reuse_id=[1])
+- HashAggregate(isMerge=[true], groupBy=[c], select=[c, Final_SUM(sum$0) AS sum_a])
   +- Exchange(distribution=[hash[c]])
      +- LocalHashAggregate(groupBy=[c], select=[c, Partial_SUM(a) AS sum$0])
         +- Calc(select=[c, a])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])

LegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS total_sum])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(sum_a) AS sum$0])
         +- Reused(reference_id=[1])

LegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[total_min])
+- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS total_min])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_MIN(sum_a) AS min$0])
         +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks2">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a, b1])
+- LogicalUnion(all=[true])
   :- LogicalProject(a1=[$0], b1=[$1])
   :  +- LogicalProject(a1=[$0], b1=[$1])
   :     +- LogicalFilter(condition=[<=($0, 10)])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(a=[$0], b1=[$1])
      +- LogicalProject(a=[$2], b1=[$1])
         +- LogicalFilter(condition=[=($2, $0)])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalProject(a1=[$0], b1=[$1])
               :  +- LogicalFilter(condition=[<=($0, 10)])
               :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c, d, e)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[a, b1])
+- LogicalUnion(all=[true])
   :- LogicalProject(a1=[$0], b1=[$1])
   :  +- LogicalProject(a1=[$0], b1=[$1])
   :     +- LogicalFilter(condition=[<=($0, 10)])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(a=[$0], b1=[$1])
      +- LogicalProject(a=[$2], b1=[$1])
         +- LogicalFilter(condition=[=($2, $0)])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalProject(a1=[$0], b1=[$1])
               :  +- LogicalFilter(condition=[<=($0, 10)])
               :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b], where=[(a <= 10)])(reuse_id=[1])
+- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])

Union(all=[true], union=[a, b])(reuse_id=[2])
:- Reused(reference_id=[1])
+- Calc(select=[a0 AS a, b AS b1])
   +- HashJoin(joinType=[InnerJoin], where=[(a0 = a)], select=[a, b, a0], build=[left])
      :- Exchange(distribution=[hash[a]])
      :  +- Reused(reference_id=[1])
      +- Exchange(distribution=[hash[a]])
         +- Calc(select=[a])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])

LegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a, b1])
+- Reused(reference_id=[2])

LegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[a, b1])
+- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks3">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a, b1])
+- LogicalProject(a=[$2], b1=[$1])
   +- LogicalFilter(condition=[=($2, $0)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(a1=[$0], b1=[$1])
         :  +- LogicalFilter(condition=[<=($0, 10)])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c, d, e)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[a, b1])
+- LogicalUnion(all=[true])
   :- LogicalProject(a1=[$0], b1=[$1])
   :  +- LogicalProject(a1=[$0], b1=[$1])
   :     +- LogicalFilter(condition=[<=($0, 10)])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(a=[$0], b1=[$1])
      +- LogicalProject(a=[$2], b1=[$1])
         +- LogicalFilter(condition=[=($2, $0)])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalProject(a1=[$0], b1=[$1])
               :  +- LogicalFilter(condition=[<=($0, 10)])
               :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b], where=[(a <= 10)])(reuse_id=[1])
+- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])

Calc(select=[a0 AS a, b AS b1])(reuse_id=[2])
+- HashJoin(joinType=[InnerJoin], where=[(a0 = a)], select=[a, b, a0], build=[right])
   :- Exchange(distribution=[hash[a]])
   :  +- Reused(reference_id=[1])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])

LegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a, b1])
+- Reused(reference_id=[2])

LegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[a, b1])
+- Union(all=[true], union=[a, b])
   :- Reused(reference_id=[1])
   +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks4">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a1, b, c2])
+- LogicalProject(a1=[$0], b=[$1], c2=[$3])
   +- LogicalFilter(condition=[=($0, $2)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(a1=[$0], b=[$1])
         :  +- LogicalFilter(condition=[<=($0, 10)])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(a2=[$0], c=[$2])
            +- LogicalFilter(condition=[>=($1, 5)])
               +- LogicalProject(a=[$0], b=[$1], c=[$2])
                  +- LogicalFilter(condition=[>=($0, 0)])
                     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[a1, b, c1])
+- LogicalProject(a1=[$2], b=[$3], c1=[$1])
   +- LogicalFilter(condition=[=($2, $0)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(a3=[$0], c1=[$2])
         :  +- LogicalFilter(condition=[<($1, 5)])
         :     +- LogicalProject(a=[$0], b=[$1], c=[$2])
         :        +- LogicalFilter(condition=[>=($0, 0)])
         :           +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(a1=[$0], b=[$1], c2=[$3])
            +- LogicalFilter(condition=[=($0, $2)])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalProject(a1=[$0], b=[$1])
                  :  +- LogicalFilter(condition=[<=($0, 10)])
                  :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
                  +- LogicalProject(a2=[$0], c=[$2])
                     +- LogicalFilter(condition=[>=($1, 5)])
                        +- LogicalProject(a=[$0], b=[$1], c=[$2])
                           +- LogicalFilter(condition=[>=($0, 0)])
                              +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])(reuse_id=[1])

Calc(select=[a, b, c], where=[(a >= 0)])(reuse_id=[2])
+- Reused(reference_id=[1])

Calc(select=[a AS a1, b, c AS c2])(reuse_id=[3])
+- HashJoin(joinType=[InnerJoin], where=[(a = a2)], select=[a, b, a2, c], build=[left])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, b], where=[(a <= 10)])
   :     +- Reused(reference_id=[1])
   +- Exchange(distribution=[hash[a2]])
      +- Calc(select=[a AS a2, c], where=[(b >= 5)])
         +- Reused(reference_id=[2])

LegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a1, b, c2])
+- Reused(reference_id=[3])

LegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[a1, b, c1])
+- Calc(select=[a1, b, c1])
   +- HashJoin(joinType=[InnerJoin], where=[(a1 = a3)], select=[a3, c1, a1, b], build=[left])
      :- Exchange(distribution=[hash[a3]])
      :  +- Calc(select=[a AS a3, c AS c1], where=[(b < 5)])
      :     +- Reused(reference_id=[2])
      +- Exchange(distribution=[hash[a1]])
         +- Calc(select=[a1, b])
            +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks5">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalProject(a=[random_udf($0)], c=[$2])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalProject(a=[random_udf($0)], c=[$2])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[random_udf(a) AS a])(reuse_id=[1])
+- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])

LegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS total_sum])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Reused(reference_id=[1])

LegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[total_min])
+- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS total_min])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_MIN(a) AS min$0])
         +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion1">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Union(all=[true], union=[a])(reuse_id=[1])
:- Calc(select=[a])
:  +- Calc(select=[a, c])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Calc(select=[d AS a])
   +- Calc(select=[d, f])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])

LegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS total_sum])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Reused(reference_id=[1])

LegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[total_min])
+- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS total_min])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_MIN(a) AS min$0])
         +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion2">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink3`], fields=[a])
+- LogicalProject(a=[$0])
   +- LogicalUnion(all=[true])
      :- LogicalProject(a=[$0], c=[$2])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Union(all=[true], union=[a])(reuse_id=[2])
:- Calc(select=[a])
:  +- Calc(select=[a, c])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Calc(select=[d AS a])
   +- Calc(select=[d, f])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])

Union(all=[true], union=[a])(reuse_id=[1])
:- Reused(reference_id=[2])
+- Calc(select=[a])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])

LegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS total_sum])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Reused(reference_id=[1])

LegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[total_min])
+- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS total_min])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_MIN(a) AS min$0])
         +- Reused(reference_id=[1])

LegacySink(name=[`default_catalog`.`default_database`.`sink3`], fields=[a])
+- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion3">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a, c])
+- LogicalUnion(all=[true])
   :- LogicalProject(a=[$0], c=[$2])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0], f=[$2])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$1])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalProject(a=[$0], c=[$2])
         :     :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         :     +- LogicalProject(d=[$0], f=[$2])
         :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink3`], fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$1])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalProject(a=[$0], c=[$2])
         :     :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         :     +- LogicalProject(d=[$0], f=[$2])
         :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Union(all=[true], union=[a, c])(reuse_id=[1])
:- Calc(select=[a, c])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Calc(select=[d, f])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])

LegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a, c])
+- Reused(reference_id=[1])

Union(all=[true], union=[a])(reuse_id=[2])
:- Calc(select=[a])
:  +- Reused(reference_id=[1])
+- Calc(select=[a])
   +- Calc(select=[a, c])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])

LegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS total_sum])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Reused(reference_id=[2])

LegacySink(name=[`default_catalog`.`default_database`.`sink3`], fields=[total_min])
+- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS total_min])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_MIN(a) AS min$0])
         +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion4">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Union(all=[true], union=[a])(reuse_id=[1])
:- Union(all=[true], union=[a])
:  :- Calc(select=[a])
:  :  +- Calc(select=[a, c])
:  :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
:  +- Calc(select=[d AS a])
:     +- Calc(select=[d, f])
:        +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
+- Calc(select=[a])
   +- Calc(select=[a, c])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])

LegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS total_sum])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Reused(reference_id=[1])

LegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[total_min])
+- HashAggregate(isMerge=[true], select=[Final_MIN(min$0) AS total_min])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_MIN(a) AS min$0])
         +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksWithWindow">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a, sum_c, time, window_start, window_end])
+- LogicalProject(a=[$1], sum_c=[$2], time=[TUMBLE_END($0)], window_start=[TUMBLE_START($0)], window_end=[TUMBLE_END($0)])
   +- LogicalAggregate(group=[{0, 1}], sum_c=[SUM($2)])
      +- LogicalProject($f0=[$TUMBLE($3, 15000:INTERVAL SECOND)], a=[$0], $f2=[CAST($2):DOUBLE])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c, ts)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[a, sum_c, time])
+- LogicalProject(a=[$1], sum_c=[$2], time=[TUMBLE_END($0)])
   +- LogicalAggregate(group=[{0, 1}], sum_c=[SUM($2)])
      +- LogicalProject($f0=[$TUMBLE($3, 15000:INTERVAL SECOND)], a=[$0], $f2=[CAST($2):DOUBLE])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c, ts)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
HashWindowAggregate(groupBy=[a], window=[TumblingGroupWindow('w$, ts, 15000)], properties=[w$start, w$end, w$rowtime], select=[a, Final_SUM(sum$0) AS sum_c])(reuse_id=[1])
+- Exchange(distribution=[hash[a]])
   +- LocalHashWindowAggregate(groupBy=[a], window=[TumblingGroupWindow('w$, ts, 15000)], properties=[w$start, w$end, w$rowtime], select=[a, Partial_SUM(c) AS sum$0])
      +- Calc(select=[ts, a, CAST(c AS DOUBLE) AS c])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(a, b, c, ts)]]], fields=[a, b, c, ts])

LegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a, sum_c, time, window_start, window_end])
+- Calc(select=[a, sum_c, w$end AS time, w$start AS window_start, w$end AS window_end])
   +- Reused(reference_id=[1])

LegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[a, sum_c, time])
+- Calc(select=[a, sum_c, w$end AS time])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksWithUDTF">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a, total_c])
+- LogicalProject(a=[$0], total_c=[$1])
   +- LogicalFilter(condition=[>($0, 50)])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], total_c=[$2])
         :  +- LogicalAggregate(group=[{0, 1}], total_c=[COUNT(DISTINCT $2)])
         :     +- LogicalProject(a=[$0], b=[$1], c=[$3])
         :        +- LogicalFilter(condition=[<>($2, _UTF-16LE'')])
         :           +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :              :- LogicalProject(a=[$0], b=[-($1, MOD($1, 300))], c=[$2])
         :              :  +- LogicalFilter(condition=[>=($1, UNIX_TIMESTAMP(_UTF-16LE'${startTime}'))])
         :              :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         :              +- LogicalTableFunctionScan(invocation=[split($cor0.c)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
         +- LogicalProject(a=[$0], total_c=[0])
            +- LogicalProject(a=[$0], b=[-($1, MOD($1, 300))], c=[$2])
               +- LogicalFilter(condition=[>=($1, UNIX_TIMESTAMP(_UTF-16LE'${startTime}'))])
                  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])

LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[a, total_c])
+- LogicalProject(a=[$0], total_c=[$1])
   +- LogicalFilter(condition=[<($0, 50)])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], total_c=[$2])
         :  +- LogicalAggregate(group=[{0, 1}], total_c=[COUNT(DISTINCT $2)])
         :     +- LogicalProject(a=[$0], b=[$1], c=[$3])
         :        +- LogicalFilter(condition=[<>($2, _UTF-16LE'')])
         :           +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :              :- LogicalProject(a=[$0], b=[-($1, MOD($1, 300))], c=[$2])
         :              :  +- LogicalFilter(condition=[>=($1, UNIX_TIMESTAMP(_UTF-16LE'${startTime}'))])
         :              :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         :              +- LogicalTableFunctionScan(invocation=[split($cor0.c)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
         +- LogicalProject(a=[$0], total_c=[0])
            +- LogicalProject(a=[$0], b=[-($1, MOD($1, 300))], c=[$2])
               +- LogicalFilter(condition=[>=($1, UNIX_TIMESTAMP(_UTF-16LE'${startTime}'))])
                  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])(reuse_id=[1])

Calc(select=[a, total_c])(reuse_id=[2])
+- HashAggregate(isMerge=[true], groupBy=[a, b], select=[a, b, Final_COUNT(count$0) AS total_c])
   +- Exchange(distribution=[hash[a, b]])
      +- LocalHashAggregate(groupBy=[a, b], select=[a, b, Partial_COUNT(c) AS count$0])
         +- HashAggregate(isMerge=[true], groupBy=[a, b, c], select=[a, b, c])
            +- Exchange(distribution=[hash[a, b, c]])
               +- LocalHashAggregate(groupBy=[a, b, c], select=[a, b, c])
                  +- Calc(select=[a, b, f0 AS c])
                     +- Correlate(invocation=[split($cor0.c)], correlate=[table(split($cor0.c))], select=[a,b,c,f0], rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, VARCHAR(2147483647) f0)], joinType=[INNER])
                        +- Calc(select=[a, (b - MOD(b, 300)) AS b, c], where=[((b >= UNIX_TIMESTAMP('${startTime}')) AND (c <> ''))])
                           +- Reused(reference_id=[1])

Calc(select=[a, 0 AS total_c], where=[(b >= UNIX_TIMESTAMP('${startTime}'))])(reuse_id=[3])
+- Reused(reference_id=[1])

LegacySink(name=[`default_catalog`.`default_database`.`sink1`], fields=[a, total_c])
+- Union(all=[true], union=[a, total_c])
   :- Calc(select=[a, total_c], where=[(a > 50)])
   :  +- Reused(reference_id=[2])
   +- Calc(select=[a, CAST(total_c AS BIGINT) AS total_c], where=[(a > 50)])
      +- Reused(reference_id=[3])

LegacySink(name=[`default_catalog`.`default_database`.`sink2`], fields=[a, total_c])
+- Union(all=[true], union=[a, total_c])
   :- Calc(select=[a, total_c], where=[(a < 50)])
   :  +- Reused(reference_id=[2])
   +- Calc(select=[a, CAST(total_c AS BIGINT) AS total_c], where=[(a < 50)])
      +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink1">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`appendSink`], fields=[c, cnt])
+- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
   +- LogicalProject(c=[$2], a=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
LegacySink(name=[`default_catalog`.`default_database`.`appendSink`], fields=[c, cnt])
+- HashAggregate(isMerge=[true], groupBy=[c], select=[c, Final_COUNT(count$0) AS cnt])
   +- Exchange(distribution=[hash[c]])
      +- LocalHashAggregate(groupBy=[c], select=[c, Partial_COUNT(a) AS count$0])
         +- Calc(select=[c, a])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink2">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`appendSink`], fields=[a1, b, c1])
+- LogicalProject(a1=[$2], b=[$3], c1=[$1])
   +- LogicalFilter(condition=[=($2, $0)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(a3=[$0], c1=[$2])
         :  +- LogicalFilter(condition=[<($1, 5)])
         :     +- LogicalProject(a=[$0], b=[$1], c=[$2])
         :        +- LogicalFilter(condition=[>=($0, 0)])
         :           +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(a1=[$0], b=[$1], c2=[$3])
            +- LogicalFilter(condition=[=($0, $2)])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalProject(a1=[$0], b=[$1])
                  :  +- LogicalFilter(condition=[<=($0, 10)])
                  :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
                  +- LogicalProject(a2=[$0], c=[$2])
                     +- LogicalFilter(condition=[>=($1, 5)])
                        +- LogicalProject(a=[$0], b=[$1], c=[$2])
                           +- LogicalFilter(condition=[>=($0, 0)])
                              +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
LegacySink(name=[`default_catalog`.`default_database`.`appendSink`], fields=[a1, b, c1])
+- Calc(select=[a1, b, c1])
   +- MultipleInput(readOrder=[2,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(a1 = a3)], select=[a3, c1, a1, b], build=[right])\n:- [#1] Exchange(distribution=[hash[a3]])\n+- Calc(select=[a AS a1, b])\n   +- HashJoin(joinType=[InnerJoin], where=[(a = a2)], select=[a, b, a2], build=[right])\n      :- [#2] Exchange(distribution=[hash[a]])\n      +- [#3] Exchange(distribution=[hash[a2]])\n])
      :- Exchange(distribution=[hash[a3]])
      :  +- Calc(select=[a AS a3, c AS c1], where=[((a >= 0) AND (b < 5))])
      :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])(reuse_id=[1])
      :- Exchange(distribution=[hash[a]])
      :  +- Calc(select=[a, b], where=[(a <= 10)])
      :     +- Reused(reference_id=[1])
      +- Exchange(distribution=[hash[a2]])
         +- Calc(select=[a AS a2], where=[((a >= 0) AND (b >= 5))])
            +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink3">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`appendSink`], fields=[a1, b1])
+- LogicalUnion(all=[true])
   :- LogicalProject(a1=[$0], b1=[$1])
   :  +- LogicalProject(a1=[$0], b1=[$1])
   :     +- LogicalFilter(condition=[<=($0, 10)])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(a=[$0], b1=[$1])
      +- LogicalProject(a=[$2], b1=[$1])
         +- LogicalFilter(condition=[=($2, $0)])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalProject(a1=[$0], b1=[$1])
               :  +- LogicalFilter(condition=[<=($0, 10)])
               :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
LegacySink(name=[`default_catalog`.`default_database`.`appendSink`], fields=[a1, b1])
+- Union(all=[true], union=[a, b])
   :- Calc(select=[a, b], where=[(a <= 10)])(reuse_id=[1])
   :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Calc(select=[a0 AS a, b AS b1])
      +- HashJoin(joinType=[InnerJoin], where=[(a0 = a)], select=[a, b, a0], build=[left])
         :- Exchange(distribution=[hash[a]])
         :  +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[a]])
            +- Calc(select=[a])
               +- BoundedStreamScan(table=[[default_catalog, default_database, MyTable2]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink4">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink`], fields=[a, b, c])
+- LogicalProject(a1=[$0], b1=[$3], c1=[$4])
   +- LogicalFilter(condition=[=($0, $2)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(a1=[$0], b=[$1])
         :  +- LogicalFilter(condition=[<=($0, 10)])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(a3=[$0], b1=[$3], c1=[$1])
            +- LogicalFilter(condition=[=($2, $0)])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalProject(a3=[$0], c1=[$2])
                  :  +- LogicalFilter(condition=[<($1, 5)])
                  :     +- LogicalProject(a=[$0], b=[$1], c=[$2])
                  :        +- LogicalFilter(condition=[>=($0, 0)])
                  :           +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
                  +- LogicalProject(a1=[$0], b=[$1], c2=[$3])
                     +- LogicalFilter(condition=[=($0, $2)])
                        +- LogicalJoin(condition=[true], joinType=[inner])
                           :- LogicalProject(a1=[$0], b=[$1])
                           :  +- LogicalFilter(condition=[<=($0, 10)])
                           :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
                           +- LogicalProject(a2=[$0], c=[$2])
                              +- LogicalFilter(condition=[>=($1, 5)])
                                 +- LogicalProject(a=[$0], b=[$1], c=[$2])
                                    +- LogicalFilter(condition=[>=($0, 0)])
                                       +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
LegacySink(name=[`default_catalog`.`default_database`.`sink`], fields=[a, b, c])
+- Calc(select=[a AS a1, b1, c1])
   +- MultipleInput(readOrder=[3,2,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[(a = a3)], select=[a, a3, b1, c1], build=[right])\n:- [#1] Exchange(distribution=[hash[a]])\n+- Calc(select=[a3, b AS b1, c1])\n   +- HashJoin(joinType=[InnerJoin], where=[(a1 = a3)], select=[a3, c1, a1, b], build=[right])\n      :- [#2] Exchange(distribution=[hash[a3]])\n      +- Calc(select=[a AS a1, b])\n         +- HashJoin(joinType=[InnerJoin], where=[(a = a2)], select=[a, b, a2], build=[right])\n            :- [#3] Exchange(distribution=[hash[a]])\n            +- [#4] Exchange(distribution=[hash[a2]])\n])
      :- Exchange(distribution=[hash[a]])
      :  +- Calc(select=[a], where=[(a <= 10)])
      :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])(reuse_id=[1])
      :- Exchange(distribution=[hash[a3]])
      :  +- Calc(select=[a AS a3, c AS c1], where=[((a >= 0) AND (b < 5))])
      :     +- Reused(reference_id=[1])
      :- Exchange(distribution=[hash[a]])
      :  +- Calc(select=[a, b], where=[(a <= 10)])
      :     +- Reused(reference_id=[1])
      +- Exchange(distribution=[hash[a2]])
         +- Calc(select=[a AS a2], where=[((a >= 0) AND (b >= 5))])
            +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSinkWithUDTF">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink`], fields=[a, b, c, d, e, f, i, j, k, l, m, s])
+- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], i=[$6], j=[$7], k=[$8], l=[$9], m=[$10], s=[$11])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], i=[$6], j=[$7], k=[$8], l=[$9], m=[$10])
      :  +- LogicalFilter(condition=[AND(=($1, $4), =($0, $6))])
      :     +- LogicalJoin(condition=[true], joinType=[inner])
      :        :- LogicalJoin(condition=[true], joinType=[inner])
      :        :  :- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
      :        :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(i, j, k, l, m)]]])
      +- LogicalTableFunctionScan(invocation=[split($cor0.c)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
LegacySink(name=[`default_catalog`.`default_database`.`sink`], fields=[a, b, c, d, e, f, i, j, k, l, m, s])
+- Correlate(invocation=[split($cor0.c)], correlate=[table(split($cor0.c))], select=[a,b,c,d,e,f,i,j,k,l,m,f0], rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, INTEGER d, BIGINT e, VARCHAR(2147483647) f, INTEGER i, BIGINT j, INTEGER k, VARCHAR(2147483647) l, BIGINT m, VARCHAR(2147483647) f0)], joinType=[INNER])
   +- HashJoin(joinType=[InnerJoin], where=[(a = i)], select=[a, b, c, d, e, f, i, j, k, l, m], build=[left])
      :- Exchange(distribution=[hash[a]])
      :  +- HashJoin(joinType=[InnerJoin], where=[(b = e)], select=[a, b, c, d, e, f], build=[right])
      :     :- Exchange(distribution=[hash[b]])
      :     :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
      :     +- Exchange(distribution=[hash[e]])
      :        +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
      +- Exchange(distribution=[hash[i]])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(i, j, k, l, m)]]], fields=[i, j, k, l, m])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSinkSplitOnUnion">
    <Resource name="ast">
      <![CDATA[
LogicalLegacySink(name=[`default_catalog`.`default_database`.`sink`], fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
LegacySink(name=[`default_catalog`.`default_database`.`sink`], fields=[total_sum])
+- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS total_sum])
   +- Exchange(distribution=[single])
      +- LocalHashAggregate(select=[Partial_SUM(a) AS sum$0])
         +- Union(all=[true], union=[a])
            :- Calc(select=[a])
            :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
            +- Calc(select=[d AS a])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
</Root>
