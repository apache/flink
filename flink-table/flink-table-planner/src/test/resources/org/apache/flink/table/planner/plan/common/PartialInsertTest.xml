<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testPartialInsertCompositeType[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO complex_type_sink (a,b,c.c2,f,h.h2.h3) SELECT a,b,c.c2,f,h.h2.h3 FROM complex_type_src]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- LogicalProject(a=[$0], b=[$1], c=[ROW(null:BIGINT, $2.c2)], d=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], e=[null:DOUBLE], g=[null:INTEGER], h=[ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW($7.h2.h3, null:TIMESTAMP(6)))], f=[$5])
   +- LogicalTableScan(table=[[default_catalog, default_database, complex_type_src]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- Calc(select=[a, b, ROW(null:BIGINT, c.c2) AS c, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS d, null:DOUBLE AS e, null:INTEGER AS g, ROW(null:VARCHAR(2147483647), ROW(h.h2.h3, null:TIMESTAMP(6))) AS h, f])
   +- TableSourceScan(table=[[default_catalog, default_database, complex_type_src, project=[a, b, c, h, f], metadata=[]]], fields=[a, b, c, h, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertCompositeType[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO complex_type_sink (a,b,c.c2,f,h.h2.h3) SELECT a,b,c.c2,f,h.h2.h3 FROM complex_type_src]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- LogicalProject(a=[$0], b=[$1], c=[ROW(null:BIGINT, $2.c2)], d=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], e=[null:DOUBLE], g=[null:INTEGER], h=[ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW($7.h2.h3, null:TIMESTAMP(6)))], f=[$5])
   +- LogicalTableScan(table=[[default_catalog, default_database, complex_type_src]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- Calc(select=[a, b, ROW(null:BIGINT, c.c2) AS c, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS d, null:DOUBLE AS e, null:INTEGER AS g, ROW(null:VARCHAR(2147483647), ROW(h.h2.h3, null:TIMESTAMP(6))) AS h, f])
   +- TableSourceScan(table=[[default_catalog, default_database, complex_type_src, project=[a, b, c, h, f], metadata=[]]], fields=[a, b, c, h, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertCompositeTypeWithOrderBy[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO complex_type_sink (a,b,c.c2,f,h.h2.h3) SELECT a,b,c.c2,f,h.h2.h3 FROM complex_type_src ORDER BY a, b, h]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], g=[$6], h=[$7], f=[$5])
   +- LogicalSort(sort0=[$0], sort1=[$1], sort2=[$8], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first])
      +- LogicalProject(a=[$0], b=[$1], EXPR$2=[ROW(null:BIGINT, $2.c2)], EXPR$3=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], EXPR$4=[null:DOUBLE], f=[$5], EXPR$6=[null:INTEGER], EXPR$7=[ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW($7.h2.h3, null:TIMESTAMP(6)))], h=[$7])
         +- LogicalTableScan(table=[[default_catalog, default_database, complex_type_src]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- Calc(select=[a, b, ROW(null:BIGINT, c.c2) AS c, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS d, null:DOUBLE AS e, null:INTEGER AS g, ROW(null:VARCHAR(2147483647), ROW(h.h2.h3, null:TIMESTAMP(6))) AS h, f])
   +- Sort(orderBy=[a ASC, b ASC, h ASC])
      +- Exchange(distribution=[single])
         +- TableSourceScan(table=[[default_catalog, default_database, complex_type_src, project=[a, b, c, f, h], metadata=[]]], fields=[a, b, c, f, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertCompositeTypeWithOrderBy[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO complex_type_sink (a,b,c.c2,f,h.h2.h3) SELECT a,b,c.c2,f,h.h2.h3 FROM complex_type_src ORDER BY a, b, h]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], g=[$6], h=[$7], f=[$5])
   +- LogicalSort(sort0=[$0], sort1=[$1], sort2=[$8], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first])
      +- LogicalProject(a=[$0], b=[$1], EXPR$2=[ROW(null:BIGINT, $2.c2)], EXPR$3=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], EXPR$4=[null:DOUBLE], f=[$5], EXPR$6=[null:INTEGER], EXPR$7=[ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW($7.h2.h3, null:TIMESTAMP(6)))], h=[$7])
         +- LogicalTableScan(table=[[default_catalog, default_database, complex_type_src]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- Calc(select=[a, b, ROW(null:BIGINT, c.c2) AS c, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS d, null:DOUBLE AS e, null:INTEGER AS g, ROW(null:VARCHAR(2147483647), ROW(h.h2.h3, null:TIMESTAMP(6))) AS h, f])
   +- Sort(orderBy=[a ASC, b ASC, h ASC])
      +- Exchange(distribution=[single])
         +- TableSourceScan(table=[[default_catalog, default_database, complex_type_src, project=[a, b, c, f, h], metadata=[]]], fields=[a, b, c, f, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertCompositeTypeWithUnion[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO complex_type_sink (a,b,c.c2,f,h.h2.h3) SELECT a,b,'hello',f,123 FROM complex_type_src UNION SELECT a,b,'flink',f,456 FROM complex_type_src ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], g=[$6], h=[$7], f=[$5])
   +- LogicalUnion(all=[false])
      :- LogicalProject(a=[$0], b=[$1], EXPR$2=[ROW(null:BIGINT, _UTF-16LE'hello')], EXPR$3=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], EXPR$4=[null:DOUBLE], f=[$5], EXPR$6=[null:INTEGER], EXPR$7=[ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW(123, null:TIMESTAMP(6)))])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, complex_type_src]])
      +- LogicalProject(a=[$0], b=[$1], EXPR$2=[ROW(null:BIGINT, _UTF-16LE'flink')], EXPR$3=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], EXPR$4=[null:DOUBLE], f=[$5], EXPR$6=[null:INTEGER], EXPR$7=[ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW(456, null:TIMESTAMP(6)))])
         +- LogicalTableScan(table=[[default_catalog, default_database, complex_type_src]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f], upsertMaterialize=[true])
+- Calc(select=[a, b, EXPR$2 AS c, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS d, null:DOUBLE AS e, null:INTEGER AS g, EXPR$7 AS h, f])
   +- GroupAggregate(groupBy=[a, b, EXPR$2, EXPR$3, EXPR$4, f, EXPR$6, EXPR$7], select=[a, b, EXPR$2, EXPR$3, EXPR$4, f, EXPR$6, EXPR$7])
      +- Exchange(distribution=[hash[a, b, EXPR$2, EXPR$3, EXPR$4, f, EXPR$6, EXPR$7]])
         +- Union(all=[true], union=[a, b, EXPR$2, EXPR$3, EXPR$4, f, EXPR$6, EXPR$7])
            :- Calc(select=[a, b, ROW(null:BIGINT, 'hello') AS EXPR$2, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS EXPR$3, null:DOUBLE AS EXPR$4, f, null:INTEGER AS EXPR$6, ROW(null:VARCHAR(2147483647), ROW(123, null:TIMESTAMP(6))) AS EXPR$7])
            :  +- TableSourceScan(table=[[default_catalog, default_database, complex_type_src, project=[a, b, f], metadata=[]]], fields=[a, b, f])
            +- Calc(select=[a, b, ROW(null:BIGINT, 'flink') AS EXPR$2, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS EXPR$3, null:DOUBLE AS EXPR$4, f, null:INTEGER AS EXPR$6, ROW(null:VARCHAR(2147483647), ROW(456, null:TIMESTAMP(6))) AS EXPR$7])
               +- TableSourceScan(table=[[default_catalog, default_database, complex_type_src, project=[a, b, f], metadata=[]]], fields=[a, b, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertCompositeTypeWithUnion[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO complex_type_sink (a,b,c.c2,f,h.h2.h3) SELECT a,b,'hello',f,123 FROM complex_type_src UNION SELECT a,b,'flink',f,456 FROM complex_type_src ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], g=[$6], h=[$7], f=[$5])
   +- LogicalUnion(all=[false])
      :- LogicalProject(a=[$0], b=[$1], EXPR$2=[ROW(null:BIGINT, _UTF-16LE'hello')], EXPR$3=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], EXPR$4=[null:DOUBLE], f=[$5], EXPR$6=[null:INTEGER], EXPR$7=[ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW(123, null:TIMESTAMP(6)))])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, complex_type_src]])
      +- LogicalProject(a=[$0], b=[$1], EXPR$2=[ROW(null:BIGINT, _UTF-16LE'flink')], EXPR$3=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], EXPR$4=[null:DOUBLE], f=[$5], EXPR$6=[null:INTEGER], EXPR$7=[ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW(456, null:TIMESTAMP(6)))])
         +- LogicalTableScan(table=[[default_catalog, default_database, complex_type_src]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- Calc(select=[a, b, EXPR$2 AS c, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS d, null:DOUBLE AS e, null:INTEGER AS g, EXPR$7 AS h, f])
   +- HashAggregate(isMerge=[true], groupBy=[a, b, EXPR$2, EXPR$3, EXPR$4, f, EXPR$6, EXPR$7], select=[a, b, EXPR$2, EXPR$3, EXPR$4, f, EXPR$6, EXPR$7])
      +- Exchange(distribution=[hash[a, b, EXPR$2, EXPR$3, EXPR$4, f, EXPR$6, EXPR$7]])
         +- LocalHashAggregate(groupBy=[a, b, EXPR$2, EXPR$3, EXPR$4, f, EXPR$6, EXPR$7], select=[a, b, EXPR$2, EXPR$3, EXPR$4, f, EXPR$6, EXPR$7])
            +- Union(all=[true], union=[a, b, EXPR$2, EXPR$3, EXPR$4, f, EXPR$6, EXPR$7])
               :- Calc(select=[a, b, ROW(null:BIGINT, 'hello') AS EXPR$2, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS EXPR$3, null:DOUBLE AS EXPR$4, f, null:INTEGER AS EXPR$6, ROW(null:VARCHAR(2147483647), ROW(123, null:TIMESTAMP(6))) AS EXPR$7])
               :  +- TableSourceScan(table=[[default_catalog, default_database, complex_type_src, project=[a, b, f], metadata=[]]], fields=[a, b, f])
               +- Calc(select=[a, b, ROW(null:BIGINT, 'flink') AS EXPR$2, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS EXPR$3, null:DOUBLE AS EXPR$4, f, null:INTEGER AS EXPR$6, ROW(null:VARCHAR(2147483647), ROW(456, null:TIMESTAMP(6))) AS EXPR$7])
                  +- TableSourceScan(table=[[default_catalog, default_database, complex_type_src, project=[a, b, f], metadata=[]]], fields=[a, b, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertCompositeTypeWithUnionAll[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO complex_type_sink (a,b,c.c2,f,h.h2.h3) SELECT a,b,'hello',f,123 FROM complex_type_src UNION ALL SELECT a,b,'flink',f,456 FROM complex_type_src ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], g=[$6], h=[$7], f=[$5])
   +- LogicalUnion(all=[true])
      :- LogicalProject(a=[$0], b=[$1], EXPR$2=[ROW(null:BIGINT, _UTF-16LE'hello')], EXPR$3=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], EXPR$4=[null:DOUBLE], f=[$5], EXPR$6=[null:INTEGER], EXPR$7=[ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW(123, null:TIMESTAMP(6)))])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, complex_type_src]])
      +- LogicalProject(a=[$0], b=[$1], EXPR$2=[ROW(null:BIGINT, _UTF-16LE'flink')], EXPR$3=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], EXPR$4=[null:DOUBLE], f=[$5], EXPR$6=[null:INTEGER], EXPR$7=[ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW(456, null:TIMESTAMP(6)))])
         +- LogicalTableScan(table=[[default_catalog, default_database, complex_type_src]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- Union(all=[true], union=[a, b, c, d, e, g, h, f])
   :- Calc(select=[a, b, ROW(null:BIGINT, 'hello') AS c, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS d, null:DOUBLE AS e, null:INTEGER AS g, ROW(null:VARCHAR(2147483647), ROW(123, null:TIMESTAMP(6))) AS h, f])
   :  +- TableSourceScan(table=[[default_catalog, default_database, complex_type_src, project=[a, b, f], metadata=[]]], fields=[a, b, f])
   +- Calc(select=[a, b, ROW(null:BIGINT, 'flink') AS c, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS d, null:DOUBLE AS e, null:INTEGER AS g, ROW(null:VARCHAR(2147483647), ROW(456, null:TIMESTAMP(6))) AS h, f])
      +- TableSourceScan(table=[[default_catalog, default_database, complex_type_src, project=[a, b, f], metadata=[]]], fields=[a, b, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertCompositeTypeWithUnionAll[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO complex_type_sink (a,b,c.c2,f,h.h2.h3) SELECT a,b,'hello',f,123 FROM complex_type_src UNION ALL SELECT a,b,'flink',f,456 FROM complex_type_src ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], g=[$6], h=[$7], f=[$5])
   +- LogicalUnion(all=[true])
      :- LogicalProject(a=[$0], b=[$1], EXPR$2=[ROW(null:BIGINT, _UTF-16LE'hello')], EXPR$3=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], EXPR$4=[null:DOUBLE], f=[$5], EXPR$6=[null:INTEGER], EXPR$7=[ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW(123, null:TIMESTAMP(6)))])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, complex_type_src]])
      +- LogicalProject(a=[$0], b=[$1], EXPR$2=[ROW(null:BIGINT, _UTF-16LE'flink')], EXPR$3=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], EXPR$4=[null:DOUBLE], f=[$5], EXPR$6=[null:INTEGER], EXPR$7=[ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW(456, null:TIMESTAMP(6)))])
         +- LogicalTableScan(table=[[default_catalog, default_database, complex_type_src]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- Union(all=[true], union=[a, b, c, d, e, g, h, f])
   :- Calc(select=[a, b, ROW(null:BIGINT, 'hello') AS c, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS d, null:DOUBLE AS e, null:INTEGER AS g, ROW(null:VARCHAR(2147483647), ROW(123, null:TIMESTAMP(6))) AS h, f])
   :  +- TableSourceScan(table=[[default_catalog, default_database, complex_type_src, project=[a, b, f], metadata=[]]], fields=[a, b, f])
   +- Calc(select=[a, b, ROW(null:BIGINT, 'flink') AS c, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS d, null:DOUBLE AS e, null:INTEGER AS g, ROW(null:VARCHAR(2147483647), ROW(456, null:TIMESTAMP(6))) AS h, f])
      +- TableSourceScan(table=[[default_catalog, default_database, complex_type_src, project=[a, b, f], metadata=[]]], fields=[a, b, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertCompositeTypeWithValues[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO complex_type_sink (a,b,c.c2,f,h.h2.h3) VALUES(1, row('b1', 2), 'c2', 3, 4)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- LogicalProject(a=[1:BIGINT], b=[CAST(ROW(_UTF-16LE'b1', 2)):RecordType:peek_no_expand(VARCHAR(2147483647) CHARACTER SET "UTF-16LE" b1, INTEGER b2)], c=[CAST(ROW(null:BIGINT, _UTF-16LE'c2')):RecordType:peek_no_expand(BIGINT c1, VARCHAR(2147483647) CHARACTER SET "UTF-16LE" c2)], d=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], e=[null:DOUBLE], g=[null:INTEGER], h=[CAST(ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW(4, null:TIMESTAMP(6)))):RecordType:peek_no_expand(VARCHAR(2147483647) CHARACTER SET "UTF-16LE" h1, RecordType:peek_no_expand(INTEGER h3, TIMESTAMP(6) h4) h2)], f=[CAST(3:BIGINT):BIGINT])
   +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- Calc(select=[1 AS a, CAST(ROW('b1', 2) AS RecordType:peek_no_expand(VARCHAR(2147483647) b1, INTEGER b2)) AS b, CAST(ROW(null:BIGINT, 'c2') AS RecordType:peek_no_expand(BIGINT c1, VARCHAR(2147483647) c2)) AS c, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS d, null:DOUBLE AS e, null:INTEGER AS g, CAST(ROW(null:VARCHAR(2147483647), ROW(4, null:TIMESTAMP(6))) AS RecordType:peek_no_expand(VARCHAR(2147483647) h1, RecordType:peek_no_expand(INTEGER h3, TIMESTAMP(6) h4) h2)) AS h, CAST(3 AS BIGINT) AS f])
   +- Values(tuples=[[{ 0 }]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertCompositeTypeWithValues[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO complex_type_sink (a,b,c.c2,f,h.h2.h3) VALUES(1, row('b1', 2), 'c2', 3, 4)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- LogicalProject(a=[1:BIGINT], b=[CAST(ROW(_UTF-16LE'b1', 2)):RecordType:peek_no_expand(VARCHAR(2147483647) CHARACTER SET "UTF-16LE" b1, INTEGER b2)], c=[CAST(ROW(null:BIGINT, _UTF-16LE'c2')):RecordType:peek_no_expand(BIGINT c1, VARCHAR(2147483647) CHARACTER SET "UTF-16LE" c2)], d=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", VARCHAR(2147483647) CHARACTER SET "UTF-16LE") MAP], e=[null:DOUBLE], g=[null:INTEGER], h=[CAST(ROW(null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE", ROW(4, null:TIMESTAMP(6)))):RecordType:peek_no_expand(VARCHAR(2147483647) CHARACTER SET "UTF-16LE" h1, RecordType:peek_no_expand(INTEGER h3, TIMESTAMP(6) h4) h2)], f=[CAST(3:BIGINT):BIGINT])
   +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.complex_type_sink], targetColumns=[[0],[1],[2,1],[5],[7,1,0]], fields=[a, b, c, d, e, g, h, f])
+- Calc(select=[1 AS a, CAST(ROW('b1', 2) AS RecordType:peek_no_expand(VARCHAR(2147483647) b1, INTEGER b2)) AS b, CAST(ROW(null:BIGINT, 'c2') AS RecordType:peek_no_expand(BIGINT c1, VARCHAR(2147483647) c2)) AS c, null:(VARCHAR(2147483647), VARCHAR(2147483647)) MAP AS d, null:DOUBLE AS e, null:INTEGER AS g, CAST(ROW(null:VARCHAR(2147483647), ROW(4, null:TIMESTAMP(6))) AS RecordType:peek_no_expand(VARCHAR(2147483647) h1, RecordType:peek_no_expand(INTEGER h3, TIMESTAMP(6) h4) h2)) AS h, CAST(3 AS BIGINT) AS f])
   +- Values(tuples=[[{ 0 }]], values=[ZERO])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithGroupBy[isBatch: false]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[3]], fields=[a, EXPR$1, d, e, EXPR$4, EXPR$5])
+- LogicalProject(a=[$0], EXPR$1=[null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE"], d=[$3], e=[$4], EXPR$4=[null:BIGINT], EXPR$5=[null:INTEGER])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])

== Optimized Physical Plan ==
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[3]], fields=[a, EXPR$1, d, e, EXPR$4, EXPR$5])
+- Calc(select=[a, null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE" AS EXPR$1, d, e, null:BIGINT AS EXPR$4, null:INTEGER AS EXPR$5])
   +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
      +- Exchange(distribution=[hash[a, b, c, d, e]])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])

== Optimized Execution Plan ==
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[3]], fields=[a, EXPR$1, d, e, EXPR$4, EXPR$5])
+- Calc(select=[a, null:VARCHAR(2147483647) AS EXPR$1, d, e, null:BIGINT AS EXPR$4, null:INTEGER AS EXPR$5])
   +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
      +- Exchange(distribution=[hash[a, b, c, d, e]])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithUnionAll[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e UNION ALL SELECT e,a,789,456,c,d FROM MyTable GROUP BY a,b,c,d,e ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$1], d=[$2], e=[$3], f=[CAST($4):BIGINT], g=[CAST($5):INTEGER])
   +- LogicalUnion(all=[true])
      :- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[123], EXPR$5=[456])
      :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
      +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[456], EXPR$5=[789])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Sort(orderBy=[c ASC, d ASC])
   +- Union(all=[true], union=[a, c, d, e, f, g])
      :- Calc(select=[a, c, d, e, CAST(123 AS BIGINT) AS f, CAST(456 AS INTEGER) AS g])
      :  +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
      :     +- Exchange(distribution=[hash[a, b, c, d, e]])
      :        +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
      :           +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
      +- Calc(select=[a, c, d, e, CAST(456 AS BIGINT) AS f, CAST(789 AS INTEGER) AS g])
         +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
            +- Exchange(distribution=[hash[a, b, c, d, e]])
               +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithGroupBy[isBatch: true]">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[3]], fields=[a, EXPR$1, d, e, EXPR$4, EXPR$5])
+- LogicalProject(a=[$0], EXPR$1=[null:VARCHAR(2147483647) CHARACTER SET "UTF-16LE"], d=[$3], e=[$4], EXPR$4=[null:BIGINT], EXPR$5=[null:INTEGER])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])

== Optimized Physical Plan ==
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[3]], fields=[a, EXPR$1, d, e, EXPR$4, EXPR$5])
+- Sort(orderBy=[EXPR$1 ASC, d ASC])
   +- Calc(select=[a, null:VARCHAR(2147483647) AS EXPR$1, d, e, null:BIGINT AS EXPR$4, null:INTEGER AS EXPR$5])
      +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
         +- Exchange(distribution=[hash[a, b, c, d, e]])
            +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])

== Optimized Execution Plan ==
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[3]], fields=[a, EXPR$1, d, e, EXPR$4, EXPR$5])
+- Sort(orderBy=[EXPR$1 ASC, d ASC])
   +- Calc(select=[a, null:VARCHAR(2147483647) AS EXPR$1, d, e, null:BIGINT AS EXPR$4, null:INTEGER AS EXPR$5])
      +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
         +- Exchange(distribution=[hash[a, b, c, d, e]])
            +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithComplexReorder[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO sink (b,e,a,g,f,c,d) SELECT b,e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.sink], targetColumns=[[1],[4],[0],[6],[5],[2],[3]], fields=[a, b, c, d, e, f, g])
+- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[123:BIGINT], g=[456])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.sink], targetColumns=[[1],[4],[0],[6],[5],[2],[3]], fields=[a, b, c, d, e, f, g])
+- Calc(select=[a, b, c, d, e, 123 AS f, 456 AS g])
   +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
      +- Exchange(distribution=[hash[a, b, c, d, e]])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithComplexReorder[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO sink (b,e,a,g,f,c,d) SELECT b,e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.sink], targetColumns=[[1],[4],[0],[6],[5],[2],[3]], fields=[a, b, c, d, e, f, g])
+- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[123:BIGINT], g=[456])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.sink], targetColumns=[[1],[4],[0],[6],[5],[2],[3]], fields=[a, b, c, d, e, f, g])
+- Calc(select=[a, b, c, d, e, 123 AS f, 456 AS g])
   +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
      +- Exchange(distribution=[hash[a, b, c, d, e]])
         +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithComplexReorderAndComputedColumn[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], f=[123:BIGINT], g=[456])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Calc(select=[a, c, d, e, 123 AS f, 456 AS g])
   +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
      +- Exchange(distribution=[hash[a, b, c, d, e]])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithComplexReorderAndComputedColumn[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], f=[123:BIGINT], g=[456])
   +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Sort(orderBy=[c ASC, d ASC])
   +- Calc(select=[a, c, d, e, 123 AS f, 456 AS g])
      +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
         +- Exchange(distribution=[hash[a, b, c, d, e]])
            +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithExceptAll[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e EXCEPT ALL SELECT e,a,789,456,c,d FROM MyTable GROUP BY a,b,c,d,e ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$1], d=[$2], e=[$3], f=[CAST($4):BIGINT], g=[CAST($5):INTEGER])
   +- LogicalMinus(all=[true])
      :- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[123], EXPR$5=[456])
      :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
      +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[456], EXPR$5=[789])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Calc(select=[a0 AS a, c0 AS c, d0 AS d, e0 AS e, f0 AS f, g0 AS g])
   +- Correlate(invocation=[$REPLICATE_ROWS$1($0, $1, $2, $3, $4, $5, $6)], correlate=[table($REPLICATE_ROWS$1(sum_vcol_marker,a,c,d,e,f,g))], select=[sum_vcol_marker,a,c,d,e,f,g,a0,c0,d0,e0,f0,g0], rowType=[RecordType(BIGINT sum_vcol_marker, INTEGER a, VARCHAR(2147483647) c, VARCHAR(2147483647) d, DOUBLE e, BIGINT f, INTEGER g, INTEGER a0, VARCHAR(2147483647) c0, VARCHAR(2147483647) d0, DOUBLE e0, BIGINT f0, INTEGER g0)], joinType=[INNER])
      +- Calc(select=[sum_vcol_marker, a, c, d, e, f, g], where=[>(sum_vcol_marker, 0)])
         +- GroupAggregate(groupBy=[a, c, d, e, f, g], select=[a, c, d, e, f, g, SUM_RETRACT(vcol_marker) AS sum_vcol_marker])
            +- Exchange(distribution=[hash[a, c, d, e, f, g]])
               +- Union(all=[true], union=[a, c, d, e, f, g, vcol_marker])
                  :- Calc(select=[a, c, d, e, CAST(123 AS BIGINT) AS f, CAST(456 AS INTEGER) AS g, 1 AS vcol_marker])
                  :  +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                  :     +- Exchange(distribution=[hash[a, b, c, d, e]])
                  :        +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
                  +- Calc(select=[a, c, d, e, CAST(123 AS BIGINT) AS f, CAST(456 AS INTEGER) AS g, -1 AS vcol_marker])
                     +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                        +- Exchange(distribution=[hash[a, b, c, d, e]])
                           +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithExceptAll[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e EXCEPT ALL SELECT e,a,789,456,c,d FROM MyTable GROUP BY a,b,c,d,e ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$1], d=[$2], e=[$3], f=[CAST($4):BIGINT], g=[CAST($5):INTEGER])
   +- LogicalMinus(all=[true])
      :- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[123], EXPR$5=[456])
      :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
      +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[456], EXPR$5=[789])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Sort(orderBy=[c ASC, d ASC])
   +- Calc(select=[a0 AS a, c0 AS c, d0 AS d, e0 AS e, f0 AS f, g0 AS g])
      +- Correlate(invocation=[$REPLICATE_ROWS$1($0, $1, $2, $3, $4, $5, $6)], correlate=[table($REPLICATE_ROWS$1(sum_vcol_marker,a,c,d,e,f,g))], select=[sum_vcol_marker,a,c,d,e,f,g,a0,c0,d0,e0,f0,g0], rowType=[RecordType(BIGINT sum_vcol_marker, INTEGER a, VARCHAR(2147483647) c, VARCHAR(2147483647) d, DOUBLE e, BIGINT f, INTEGER g, INTEGER a0, VARCHAR(2147483647) c0, VARCHAR(2147483647) d0, DOUBLE e0, BIGINT f0, INTEGER g0)], joinType=[INNER])
         +- Calc(select=[sum_vcol_marker, a, c, d, e, f, g], where=[>(sum_vcol_marker, 0)])
            +- HashAggregate(isMerge=[true], groupBy=[a, c, d, e, f, g], select=[a, c, d, e, f, g, Final_SUM(sum$0) AS sum_vcol_marker])
               +- Exchange(distribution=[hash[a, c, d, e, f, g]])
                  +- LocalHashAggregate(groupBy=[a, c, d, e, f, g], select=[a, c, d, e, f, g, Partial_SUM(vcol_marker) AS sum$0])
                     +- Union(all=[true], union=[a, c, d, e, f, g, vcol_marker])
                        :- Calc(select=[a, c, d, e, CAST(123 AS BIGINT) AS f, CAST(456 AS INTEGER) AS g, 1 AS vcol_marker])
                        :  +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                        :     +- Exchange(distribution=[hash[a, b, c, d, e]])
                        :        +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                        :           +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
                        +- Calc(select=[a, c, d, e, CAST(123 AS BIGINT) AS f, CAST(456 AS INTEGER) AS g, -1 AS vcol_marker])
                           +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                              +- Exchange(distribution=[hash[a, b, c, d, e]])
                                 +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                                    +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithIntersectAll[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e INTERSECT ALL SELECT e,a,789,456,c,d FROM MyTable GROUP BY a,b,c,d,e ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$1], d=[$2], e=[$3], f=[CAST($4):BIGINT], g=[CAST($5):INTEGER])
   +- LogicalIntersect(all=[true])
      :- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[123], EXPR$5=[456])
      :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
      +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[456], EXPR$5=[789])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Calc(select=[a0 AS a, c0 AS c, d0 AS d, e0 AS e, f0 AS f, g0 AS g])
   +- Correlate(invocation=[$REPLICATE_ROWS$1($0, $1, $2, $3, $4, $5, $6)], correlate=[table($REPLICATE_ROWS$1($f0,a,c,d,e,f,g))], select=[$f0,a,c,d,e,f,g,a0,c0,d0,e0,f0,g0], rowType=[RecordType(BIGINT $f0, INTEGER a, VARCHAR(2147483647) c, VARCHAR(2147483647) d, DOUBLE e, BIGINT f, INTEGER g, INTEGER a0, VARCHAR(2147483647) c0, VARCHAR(2147483647) d0, DOUBLE e0, BIGINT f0, INTEGER g0)], joinType=[INNER])
      +- Calc(select=[IF(>(vcol_left_cnt, vcol_right_cnt), vcol_right_cnt, vcol_left_cnt) AS $f0, a, c, d, e, f, g], where=[AND(>=(vcol_left_cnt, 1), >=(vcol_right_cnt, 1))])
         +- GroupAggregate(groupBy=[a, c, d, e, f, g], select=[a, c, d, e, f, g, COUNT_RETRACT(vcol_left_marker) AS vcol_left_cnt, COUNT_RETRACT(vcol_right_marker) AS vcol_right_cnt])
            +- Exchange(distribution=[hash[a, c, d, e, f, g]])
               +- Union(all=[true], union=[a, c, d, e, f, g, vcol_left_marker, vcol_right_marker])
                  :- Calc(select=[a, c, d, e, CAST(123 AS BIGINT) AS f, CAST(456 AS INTEGER) AS g, true AS vcol_left_marker, null:BOOLEAN AS vcol_right_marker])
                  :  +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                  :     +- Exchange(distribution=[hash[a, b, c, d, e]])
                  :        +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
                  +- Calc(select=[a, c, d, e, CAST(456 AS BIGINT) AS f, CAST(789 AS INTEGER) AS g, null:BOOLEAN AS vcol_left_marker, true AS vcol_right_marker])
                     +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                        +- Exchange(distribution=[hash[a, b, c, d, e]])
                           +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithIntersectAll[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e INTERSECT ALL SELECT e,a,789,456,c,d FROM MyTable GROUP BY a,b,c,d,e ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$1], d=[$2], e=[$3], f=[CAST($4):BIGINT], g=[CAST($5):INTEGER])
   +- LogicalIntersect(all=[true])
      :- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[123], EXPR$5=[456])
      :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
      +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[456], EXPR$5=[789])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Sort(orderBy=[c ASC, d ASC])
   +- Calc(select=[a0 AS a, c0 AS c, d0 AS d, e0 AS e, f0 AS f, g0 AS g])
      +- Correlate(invocation=[$REPLICATE_ROWS$1($0, $1, $2, $3, $4, $5, $6)], correlate=[table($REPLICATE_ROWS$1($f0,a,c,d,e,f,g))], select=[$f0,a,c,d,e,f,g,a0,c0,d0,e0,f0,g0], rowType=[RecordType(BIGINT $f0, INTEGER a, VARCHAR(2147483647) c, VARCHAR(2147483647) d, DOUBLE e, BIGINT f, INTEGER g, INTEGER a0, VARCHAR(2147483647) c0, VARCHAR(2147483647) d0, DOUBLE e0, BIGINT f0, INTEGER g0)], joinType=[INNER])
         +- Calc(select=[IF(>(vcol_left_cnt, vcol_right_cnt), vcol_right_cnt, vcol_left_cnt) AS $f0, a, c, d, e, f, g], where=[AND(>=(vcol_left_cnt, 1), >=(vcol_right_cnt, 1))])
            +- HashAggregate(isMerge=[true], groupBy=[a, c, d, e, f, g], select=[a, c, d, e, f, g, Final_COUNT(count$0) AS vcol_left_cnt, Final_COUNT(count$1) AS vcol_right_cnt])
               +- Exchange(distribution=[hash[a, c, d, e, f, g]])
                  +- LocalHashAggregate(groupBy=[a, c, d, e, f, g], select=[a, c, d, e, f, g, Partial_COUNT(vcol_left_marker) AS count$0, Partial_COUNT(vcol_right_marker) AS count$1])
                     +- Union(all=[true], union=[a, c, d, e, f, g, vcol_left_marker, vcol_right_marker])
                        :- Calc(select=[a, c, d, e, CAST(123 AS BIGINT) AS f, CAST(456 AS INTEGER) AS g, true AS vcol_left_marker, null:BOOLEAN AS vcol_right_marker])
                        :  +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                        :     +- Exchange(distribution=[hash[a, b, c, d, e]])
                        :        +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                        :           +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
                        +- Calc(select=[a, c, d, e, CAST(456 AS BIGINT) AS f, CAST(789 AS INTEGER) AS g, null:BOOLEAN AS vcol_left_marker, true AS vcol_right_marker])
                           +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                              +- Exchange(distribution=[hash[a, b, c, d, e]])
                                 +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                                    +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithOrderBy[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable ORDER BY a,e,c,d]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$1], d=[$2], e=[$3], f=[CAST($4):BIGINT], g=[CAST($5):INTEGER])
   +- LogicalSort(sort0=[$0], sort1=[$3], sort2=[$1], sort3=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first])
      +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[123], EXPR$5=[456])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Calc(select=[a, c, d, e, CAST(123 AS BIGINT) AS f, CAST(456 AS INTEGER) AS g])
   +- Sort(orderBy=[a ASC, e ASC, c ASC, d ASC])
      +- Exchange(distribution=[single])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithOrderBy[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable ORDER BY a,e,c,d]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$1], d=[$2], e=[$3], f=[CAST($4):BIGINT], g=[CAST($5):INTEGER])
   +- LogicalSort(sort0=[$0], sort1=[$3], sort2=[$1], sort3=[$2], dir0=[ASC-nulls-first], dir1=[ASC-nulls-first], dir2=[ASC-nulls-first], dir3=[ASC-nulls-first])
      +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[123], EXPR$5=[456])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Calc(select=[a, c, d, e, CAST(123 AS BIGINT) AS f, CAST(456 AS INTEGER) AS g])
   +- Sort(orderBy=[a ASC, e ASC, c ASC, d ASC])
      +- Exchange(distribution=[single])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithPersistedMetadata[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO metadata_sink (a,b,c,d,e,f) SELECT a,b,c,d,e,123 FROM MyTable]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.metadata_sink], targetColumns=[[0],[1],[2],[3],[4],[5]], fields=[a, b, c, d, e, f])
+- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[CAST(123:BIGINT):BIGINT])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.metadata_sink], targetColumns=[[0],[1],[2],[3],[4],[5]], fields=[a, b, c, d, e, f])
+- Calc(select=[a, b, c, d, e, CAST(123 AS BIGINT) AS f])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithPersistedMetadata[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO metadata_sink (a,b,c,d,e,f) SELECT a,b,c,d,e,123 FROM MyTable]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.metadata_sink], targetColumns=[[0],[1],[2],[3],[4],[5]], fields=[a, b, c, d, e, f])
+- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[CAST(123:BIGINT):BIGINT])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.metadata_sink], targetColumns=[[0],[1],[2],[3],[4],[5]], fields=[a, b, c, d, e, f])
+- Calc(select=[a, b, c, d, e, CAST(123 AS BIGINT) AS f])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithUnion[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e UNION SELECT e,a,789,456,c,d FROM MyTable GROUP BY a,b,c,d,e ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$1], d=[$2], e=[$3], f=[CAST($4):BIGINT], g=[CAST($5):INTEGER])
   +- LogicalUnion(all=[false])
      :- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[123], EXPR$5=[456])
      :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
      +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[456], EXPR$5=[789])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Calc(select=[a, c, d, e, CAST(EXPR$4 AS BIGINT) AS f, CAST(EXPR$5 AS INTEGER) AS g])
   +- GroupAggregate(groupBy=[a, c, d, e, EXPR$4, EXPR$5], select=[a, c, d, e, EXPR$4, EXPR$5])
      +- Exchange(distribution=[hash[a, c, d, e, EXPR$4, EXPR$5]])
         +- Union(all=[true], union=[a, c, d, e, EXPR$4, EXPR$5])
            :- Calc(select=[a, c, d, e, 123 AS EXPR$4, 456 AS EXPR$5])
            :  +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
            :     +- Exchange(distribution=[hash[a, b, c, d, e]])
            :        +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
            +- Calc(select=[a, c, d, e, 456 AS EXPR$4, 789 AS EXPR$5])
               +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                  +- Exchange(distribution=[hash[a, b, c, d, e]])
                     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithUnionAll[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e UNION ALL SELECT e,a,789,456,c,d FROM MyTable GROUP BY a,b,c,d,e ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$1], d=[$2], e=[$3], f=[CAST($4):BIGINT], g=[CAST($5):INTEGER])
   +- LogicalUnion(all=[true])
      :- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[123], EXPR$5=[456])
      :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
      +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[456], EXPR$5=[789])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Union(all=[true], union=[a, c, d, e, f, g])
   :- Calc(select=[a, c, d, e, CAST(123 AS BIGINT) AS f, CAST(456 AS INTEGER) AS g])
   :  +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
   :     +- Exchange(distribution=[hash[a, b, c, d, e]])
   :        +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
   +- Calc(select=[a, c, d, e, CAST(456 AS BIGINT) AS f, CAST(789 AS INTEGER) AS g])
      +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
         +- Exchange(distribution=[hash[a, b, c, d, e]])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithUnionAllNested[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e UNION ALL SELECT e,a,789,456,c,d FROM MyTable GROUP BY a,b,c,d,e UNION ALL SELECT e,a,123,456,c,d FROM MyTable GROUP BY a,b,c,d,e ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$1], d=[$2], e=[$3], f=[CAST($4):BIGINT], g=[CAST($5):INTEGER])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[123], EXPR$5=[456])
      :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      :  :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
      :  +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[456], EXPR$5=[789])
      :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
      +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[456], EXPR$5=[123])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Sort(orderBy=[c ASC, d ASC])
   +- Union(all=[true], union=[a, c, d, e, f, g])
      :- Union(all=[true], union=[a, c, d, e, f, g])
      :  :- Calc(select=[a, c, d, e, CAST(123 AS BIGINT) AS f, CAST(456 AS INTEGER) AS g])
      :  :  +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
      :  :     +- Exchange(distribution=[hash[a, b, c, d, e]])
      :  :        +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
      :  :           +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
      :  +- Calc(select=[a, c, d, e, CAST(456 AS BIGINT) AS f, CAST(789 AS INTEGER) AS g])
      :     +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
      :        +- Exchange(distribution=[hash[a, b, c, d, e]])
      :           +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
      :              +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
      +- Calc(select=[a, c, d, e, CAST(456 AS BIGINT) AS f, CAST(123 AS INTEGER) AS g])
         +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
            +- Exchange(distribution=[hash[a, b, c, d, e]])
               +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithUnion[isBatch: true]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e UNION SELECT e,a,789,456,c,d FROM MyTable GROUP BY a,b,c,d,e ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$1], d=[$2], e=[$3], f=[CAST($4):BIGINT], g=[CAST($5):INTEGER])
   +- LogicalUnion(all=[false])
      :- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[123], EXPR$5=[456])
      :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
      +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[456], EXPR$5=[789])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Sort(orderBy=[c ASC, d ASC])
   +- Calc(select=[a, c, d, e, CAST(EXPR$4 AS BIGINT) AS f, CAST(EXPR$5 AS INTEGER) AS g])
      +- HashAggregate(isMerge=[true], groupBy=[a, c, d, e, EXPR$4, EXPR$5], select=[a, c, d, e, EXPR$4, EXPR$5])
         +- Exchange(distribution=[hash[a, c, d, e, EXPR$4, EXPR$5]])
            +- LocalHashAggregate(groupBy=[a, c, d, e, EXPR$4, EXPR$5], select=[a, c, d, e, EXPR$4, EXPR$5])
               +- Union(all=[true], union=[a, c, d, e, EXPR$4, EXPR$5])
                  :- Calc(select=[a, c, d, e, 123 AS EXPR$4, 456 AS EXPR$5])
                  :  +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                  :     +- Exchange(distribution=[hash[a, b, c, d, e]])
                  :        +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                  :           +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
                  +- Calc(select=[a, c, d, e, 456 AS EXPR$4, 789 AS EXPR$5])
                     +- HashAggregate(isMerge=[true], groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                        +- Exchange(distribution=[hash[a, b, c, d, e]])
                           +- LocalHashAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
                              +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialInsertWithUnionAllNested[isBatch: false]">
    <Resource name="sql">
      <![CDATA[INSERT INTO partitioned_sink (e,a,g,f,c,d) SELECT e,a,456,123,c,d FROM MyTable GROUP BY a,b,c,d,e UNION ALL SELECT e,a,789,456,c,d FROM MyTable GROUP BY a,b,c,d,e UNION ALL SELECT e,a,123,456,c,d FROM MyTable GROUP BY a,b,c,d,e ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- LogicalProject(a=[$0], c=[$1], d=[$2], e=[$3], f=[CAST($4):BIGINT], g=[CAST($5):INTEGER])
   +- LogicalUnion(all=[true])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[123], EXPR$5=[456])
      :  :  +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      :  :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
      :  +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[456], EXPR$5=[789])
      :     +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
      +- LogicalProject(a=[$0], c=[$2], d=[$3], e=[$4], EXPR$4=[456], EXPR$5=[123])
         +- LogicalAggregate(group=[{0, 1, 2, 3, 4}])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.partitioned_sink], targetColumns=[[4],[0],[6],[5],[2],[3]], fields=[a, c, d, e, f, g])
+- Union(all=[true], union=[a, c, d, e, f, g])
   :- Union(all=[true], union=[a, c, d, e, f, g])
   :  :- Calc(select=[a, c, d, e, CAST(123 AS BIGINT) AS f, CAST(456 AS INTEGER) AS g])
   :  :  +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
   :  :     +- Exchange(distribution=[hash[a, b, c, d, e]])
   :  :        +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
   :  +- Calc(select=[a, c, d, e, CAST(456 AS BIGINT) AS f, CAST(789 AS INTEGER) AS g])
   :     +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
   :        +- Exchange(distribution=[hash[a, b, c, d, e]])
   :           +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
   +- Calc(select=[a, c, d, e, CAST(456 AS BIGINT) AS f, CAST(123 AS INTEGER) AS g])
      +- GroupAggregate(groupBy=[a, b, c, d, e], select=[a, b, c, d, e])
         +- Exchange(distribution=[hash[a, b, c, d, e]])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e])
]]>
    </Resource>
  </TestCase>
</Root>
