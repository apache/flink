<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testCrossJoin">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 CROSS JOIN MyTable1]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[true], joinType=[inner])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[d, e, f, g, h, a, b, c], build=[right])
:- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- Exchange(distribution=[broadcast])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFullOuterJoinOnFalse">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 FULL OUTER JOIN MyTable1 ON false]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[false], joinType=[full])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[FullOuterJoin], where=[false], select=[d, e, f, g, h, a, b, c], build=[right])
:- Exchange(distribution=[single])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- Exchange(distribution=[single])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFullOuterJoinOnTrue">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 FULL OUTER JOIN MyTable1 ON true]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[true], joinType=[full])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[FullOuterJoin], where=[true], select=[d, e, f, g, h, a, b, c], build=[right])
:- Exchange(distribution=[single])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- Exchange(distribution=[single])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFullOuterJoinWithEquiAndLocalPred">
    <Resource name="sql">
      <![CDATA[SELECT c, g FROM MyTable2 FULL OUTER JOIN  MyTable1 ON a = d AND d < 2]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$7], g=[$3])
+- LogicalJoin(condition=[AND(=($5, $0), <($0, 2))], joinType=[full])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(joinType=[FullOuterJoin], where=[((a = d) AND (d < 2))], select=[d, g, a, c], build=[left])
   :- Exchange(distribution=[single])
   :  +- Calc(select=[d, g])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
   +- Exchange(distribution=[single])
      +- Calc(select=[a, c])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFullOuterJoinWithEquiAndNonEquiPred">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 FULL OUTER JOIN MyTable1 ON a = d AND d < 2 AND b < h]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[AND(=($5, $0), <($0, 2), <($6, $4))], joinType=[full])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[FullOuterJoin], where=[((a = d) AND (d < 2) AND (b < h))], select=[d, e, f, g, h, a, b, c], build=[right])
:- Exchange(distribution=[single])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- Exchange(distribution=[single])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFullOuterJoinWithEquiPred">
    <Resource name="sql">
      <![CDATA[SELECT c, g FROM MyTable1 FULL OUTER JOIN MyTable2 ON b = e]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2], g=[$6])
+- LogicalJoin(condition=[=($1, $4)], joinType=[full])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(joinType=[FullOuterJoin], where=[(b = e)], select=[b, c, e, g], build=[left])
   :- Exchange(distribution=[single])
   :  +- Calc(select=[b, c])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Exchange(distribution=[single])
      +- Calc(select=[e, g])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFullOuterJoinWithNonEquiPred">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 FULL OUTER JOIN MyTable1 ON a <> d]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[<>($5, $0)], joinType=[full])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[FullOuterJoin], where=[(a <> d)], select=[d, e, f, g, h, a, b, c], build=[right])
:- Exchange(distribution=[single])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- Exchange(distribution=[single])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFullOuterWithUsing">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM (SELECT * FROM MyTable1) FULL JOIN (SELECT * FROM MyTable3) USING (a)
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[COALESCE($0, $3)], b=[$1], c=[$2], b0=[$4], c0=[$5])
+- LogicalJoin(condition=[=($0, $3)], joinType=[full])
   :- LogicalProject(a=[$0], b=[$1], c=[$2])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(a=[$0], b=[$1], c=[$2])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable3, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[COALESCE(a, a0) AS a, b, c, b0, c0])
+- NestedLoopJoin(joinType=[FullOuterJoin], where=[(a = a0)], select=[a, b, c, a0, b0, c0], build=[left])
   :- Exchange(distribution=[single])
   :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Exchange(distribution=[single])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable3, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInnerJoinWithEquiAndLocalPred">
    <Resource name="sql">
      <![CDATA[SELECT c, g FROM MyTable2 INNER JOIN MyTable1 ON a = d AND d < 2]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$7], g=[$3])
+- LogicalJoin(condition=[AND(=($5, $0), <($0, 2))], joinType=[inner])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(joinType=[InnerJoin], where=[(a = d)], select=[d, g, a, c], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[d, g], where=[(d < 2)])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
   +- Calc(select=[a, c], where=[(a < 2)])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInnerJoinWithEquiAndNonEquiPred">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 INNER JOIN MyTable1 ON a = d AND d < 2 AND b < h]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[AND(=($5, $0), <($0, 2), <($6, $4))], joinType=[inner])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[InnerJoin], where=[((a = d) AND (b < h))], select=[d, e, f, g, h, a, b, c], build=[right])
:- Calc(select=[d, e, f, g, h], where=[(d < 2)])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- Exchange(distribution=[broadcast])
   +- Calc(select=[a, b, c], where=[(a < 2)])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInnerJoinWithEquiPred">
    <Resource name="sql">
      <![CDATA[SELECT c, g FROM MyTable1, MyTable2 WHERE a = d]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2], g=[$6])
+- LogicalFilter(condition=[=($0, $3)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, c, d, g], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a, c])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Calc(select=[d, g])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInnerJoinWithFilter">
    <Resource name="sql">
      <![CDATA[SELECT c, g FROM MyTable2, MyTable1 WHERE a = d AND d < 2]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$7], g=[$3])
+- LogicalFilter(condition=[AND(=($5, $0), <($0, 2))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(joinType=[InnerJoin], where=[(a = d)], select=[d, g, a, c], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[d, g], where=[(d < 2)])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
   +- Calc(select=[a, c], where=[(a < 2)])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInnerJoinWithFilterPushDown">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
   (select a, count(b) as b from MyTable1 group by a)
   join
   (select d, count(e) as e from MyTable2 group by d)
   on true where a = d and b = e and d = 2
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], d=[$2], e=[$3])
+- LogicalFilter(condition=[AND(=($0, $2), =($1, $3), =($2, 2))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalAggregate(group=[{0}], b=[COUNT($1)])
      :  +- LogicalProject(a=[$0], b=[$1])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
      +- LogicalAggregate(group=[{0}], e=[COUNT($1)])
         +- LogicalProject(d=[$0], e=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, CAST(2 AS INTEGER) AS d, e])
+- MultipleInput(readOrder=[0,1], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[((a = d) AND (b = e))], select=[a, b, d, e], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- HashAggregate(isMerge=[true], groupBy=[d], select=[d, Final_COUNT(count$0) AS e])\n   +- [#2] Exchange(distribution=[hash[d]])\n])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], groupBy=[a], select=[a, Final_COUNT(count$0) AS b])
   :     +- Exchange(distribution=[hash[a]])
   :        +- LocalHashAggregate(groupBy=[a], select=[a, Partial_COUNT(b) AS count$0])
   :           +- Calc(select=[CAST(2 AS INTEGER) AS a, b], where=[(a = 2)])
   :              +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Exchange(distribution=[hash[d]])
      +- LocalHashAggregate(groupBy=[d], select=[d, Partial_COUNT(e) AS count$0])
         +- Calc(select=[CAST(2 AS INTEGER) AS d, e], where=[(d = 2)])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInnerJoinWithInvertedField">
    <Resource name="sql">
      <![CDATA[SELECT c, g FROM MyTable1, MyTable2 WHERE b = e AND a = d]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2], g=[$6])
+- LogicalFilter(condition=[AND(=($1, $4), =($0, $3))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(joinType=[InnerJoin], where=[((b = e) AND (a = d))], select=[a, b, c, d, e, g], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Calc(select=[d, e, g])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInnerJoinWithJoinConditionPushDown">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
   (select a, count(b) as b from MyTable1 group by a)
   join
   (select d, count(e) as e from MyTable2 group by d)
   on a = d and b = e and d = 2 and b = 1
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], d=[$2], e=[$3])
+- LogicalJoin(condition=[AND(=($0, $2), =($1, $3), =($2, 2), =($1, 1))], joinType=[inner])
   :- LogicalAggregate(group=[{0}], b=[COUNT($1)])
   :  +- LogicalProject(a=[$0], b=[$1])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
   +- LogicalAggregate(group=[{0}], e=[COUNT($1)])
      +- LogicalProject(d=[$0], e=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, 1 AS b, CAST(2 AS INTEGER) AS d, 1 AS e])
+- MultipleInput(readOrder=[0,1], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- Calc(select=[d], where=[(e = 1)])\n   +- HashAggregate(isMerge=[true], groupBy=[d], select=[d, Final_COUNT(count$0) AS e])\n      +- [#2] Exchange(distribution=[hash[d]])\n])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a], where=[(b = 1)])
   :     +- HashAggregate(isMerge=[true], groupBy=[a], select=[a, Final_COUNT(count$0) AS b])
   :        +- Exchange(distribution=[hash[a]])
   :           +- LocalHashAggregate(groupBy=[a], select=[a, Partial_COUNT(b) AS count$0])
   :              +- Calc(select=[CAST(2 AS INTEGER) AS a, b], where=[(a = 2)])
   :                 +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Exchange(distribution=[hash[d]])
      +- LocalHashAggregate(groupBy=[d], select=[d, Partial_COUNT(e) AS count$0])
         +- Calc(select=[CAST(2 AS INTEGER) AS d, e], where=[(d = 2)])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInnerJoinWithMultipleKeys">
    <Resource name="sql">
      <![CDATA[SELECT c, g FROM MyTable2 INNER JOIN MyTable1 ON a = d AND b = e]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$7], g=[$3])
+- LogicalJoin(condition=[AND(=($5, $0), =($6, $1))], joinType=[inner])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(joinType=[InnerJoin], where=[((a = d) AND (b = e))], select=[d, e, g, a, b, c], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[d, e, g])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInnerJoinWithNonEquiPred">
    <Resource name="sql">
      <![CDATA[SELECT a, d FROM MyTable1, MyTable2 WHERE a + 1 = d]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], d=[$3])
+- LogicalFilter(condition=[=(+($0, 1), $3)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, d])
+- NestedLoopJoin(joinType=[InnerJoin], where=[($f3 = d)], select=[a, $f3, d], build=[right])
   :- Calc(select=[a, (a + 1) AS $f3])
   :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[d])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInnerJoinWithoutJoinPred">
    <Resource name="sql">
      <![CDATA[SELECT a, d FROM MyTable1, MyTable2]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], d=[$3])
+- LogicalJoin(condition=[true], joinType=[inner])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[a, d], build=[left])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[a])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Calc(select=[d])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinPartitionTableWithNonExistentPartition">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM leftPartitionTable, rightPartitionTable WHERE b1 = 1 AND b2 = 3 AND a1 = a2
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a1=[$0], b1=[$1], a2=[$2], b2=[$3])
+- LogicalFilter(condition=[AND(=($1, 1), =($3, 3), =($0, $2))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, leftPartitionTable]])
      +- LogicalTableScan(table=[[default_catalog, default_database, rightPartitionTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Values(tuples=[[]], values=[a1, b1, a2, b2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftJoinWithFilterPushDown">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
   (select a, count(b) as b from MyTable1 group by a)
   left join
   (select d, count(e) as e from MyTable2 group by d)
   on true where a = d and b = e and a = 2
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], d=[$2], e=[$3])
+- LogicalFilter(condition=[AND(=($0, $2), =($1, $3), =($0, 2))])
   +- LogicalJoin(condition=[true], joinType=[left])
      :- LogicalAggregate(group=[{0}], b=[COUNT($1)])
      :  +- LogicalProject(a=[$0], b=[$1])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
      +- LogicalAggregate(group=[{0}], e=[COUNT($1)])
         +- LogicalProject(d=[$0], e=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[CAST(2 AS INTEGER) AS a, b, d, CAST(e AS BIGINT) AS e])
+- MultipleInput(readOrder=[0,1], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[((a = d) AND (b = e))], select=[a, b, d, e], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- HashAggregate(isMerge=[true], groupBy=[d], select=[d, Final_COUNT(count$0) AS e])\n   +- [#2] Exchange(distribution=[hash[d]])\n])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], groupBy=[a], select=[a, Final_COUNT(count$0) AS b])
   :     +- Exchange(distribution=[hash[a]])
   :        +- LocalHashAggregate(groupBy=[a], select=[a, Partial_COUNT(b) AS count$0])
   :           +- Calc(select=[CAST(2 AS INTEGER) AS a, b], where=[(a = 2)])
   :              +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Exchange(distribution=[hash[d]])
      +- LocalHashAggregate(groupBy=[d], select=[d, Partial_COUNT(e) AS count$0])
         +- Calc(select=[CAST(2 AS INTEGER) AS d, e], where=[(d = 2)])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftJoinWithJoinConditionPushDown">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
   (select a, count(b) as b from MyTable1 group by a)
   left join
   (select d, count(e) as e from MyTable2 group by d)
   on a = d and b = e and a = 2 and e = 1
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], d=[$2], e=[$3])
+- LogicalJoin(condition=[AND(=($0, $2), =($1, $3), =($0, 2), =($3, 1))], joinType=[left])
   :- LogicalAggregate(group=[{0}], b=[COUNT($1)])
   :  +- LogicalProject(a=[$0], b=[$1])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
   +- LogicalAggregate(group=[{0}], e=[COUNT($1)])
      +- LogicalProject(d=[$0], e=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[0,1], members=[\nNestedLoopJoin(joinType=[LeftOuterJoin], where=[((a = d) AND (b = 1) AND (a = 2))], select=[a, b, d, e], build=[right])\n:- HashAggregate(isMerge=[true], groupBy=[a], select=[a, Final_COUNT(count$0) AS b])\n:  +- [#2] Exchange(distribution=[hash[a]])\n+- [#1] Exchange(distribution=[broadcast])\n])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[d, e], where=[(e = 1)])
:     +- HashAggregate(isMerge=[true], groupBy=[d], select=[d, Final_COUNT(count$0) AS e])
:        +- Exchange(distribution=[hash[d]])
:           +- LocalHashAggregate(groupBy=[d], select=[d, Partial_COUNT(e) AS count$0])
:              +- Calc(select=[d, e])
:                 +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- Exchange(distribution=[hash[a]])
   +- LocalHashAggregate(groupBy=[a], select=[a, Partial_COUNT(b) AS count$0])
      +- Calc(select=[a, b])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinNoEquiPred">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 LEFT OUTER JOIN MyTable1 ON a <> d]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[<>($5, $0)], joinType=[left])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a <> d)], select=[d, e, f, g, h, a, b, c], build=[right])
:- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- Exchange(distribution=[broadcast])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinOnFalse">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 LEFT OUTER JOIN MyTable1 ON false]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[false], joinType=[left])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[d, e, f, g, h, a, b, c], build=[right])
:- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- Exchange(distribution=[broadcast])
   +- Values(tuples=[[]], values=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinOnTrue">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 LEFT OUTER JOIN MyTable1 ON true]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[true], joinType=[left])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[LeftOuterJoin], where=[true], select=[d, e, f, g, h, a, b, c], build=[right])
:- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- Exchange(distribution=[broadcast])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinWithEquiAndLocalPred">
    <Resource name="sql">
      <![CDATA[SELECT c, g FROM MyTable2 LEFT OUTER JOIN  MyTable1 ON a = d AND d < 2]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$7], g=[$3])
+- LogicalJoin(condition=[AND(=($5, $0), <($0, 2))], joinType=[left])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(joinType=[LeftOuterJoin], where=[((a = d) AND (d < 2))], select=[d, g, a, c], build=[right])
   :- Calc(select=[d, g])
   :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[a, c])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinWithFilter1">
    <Resource name="sql">
      <![CDATA[SELECT d, e, f FROM MyTable1 LEFT JOIN MyTable2 ON a = d where d = 10 AND a < 12]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($3, 10), <($0, 12))])
   +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[CAST(10 AS INTEGER) AS d, e, f])
+- NestedLoopJoin(joinType=[InnerJoin], where=[true], select=[a, e, f], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a], where=[(a = 10)])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Calc(select=[e, f], where=[(d = 10)])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinWithEquiAndNonEquiPred">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 LEFT OUTER JOIN  MyTable1 ON a = d AND d < 2 AND b < h]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[AND(=($5, $0), <($0, 2), <($6, $4))], joinType=[left])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[LeftOuterJoin], where=[((a = d) AND (d < 2) AND (b < h))], select=[d, e, f, g, h, a, b, c], build=[right])
:- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- Exchange(distribution=[broadcast])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinWithEquiPred">
    <Resource name="sql">
      <![CDATA[SELECT c, g FROM MyTable1 LEFT OUTER JOIN MyTable2 ON b = e]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2], g=[$6])
+- LogicalJoin(condition=[=($1, $4)], joinType=[left])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(b = e)], select=[b, c, e, g], build=[right])
   :- Calc(select=[b, c])
   :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[e, g])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinWithFilter2">
    <Resource name="sql">
      <![CDATA[SELECT d, e, f FROM MyTable1 LEFT JOIN MyTable2 ON a = d where d IS NULL AND a < 12]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(IS NULL($3), <($0, 12))])
   +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[null:INTEGER AS d, e, f], where=[d IS NULL])
+- NestedLoopJoin(joinType=[LeftOuterJoin], where=[(a = d)], select=[a, d, e, f], build=[right])
   :- Calc(select=[a], where=[(a < 12)])
   :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Exchange(distribution=[broadcast])
      +- Calc(select=[d, e, f], where=[(d < 12)])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinWithFilter3">
    <Resource name="sql">
      <![CDATA[SELECT d, e, f FROM MyTable1 LEFT JOIN MyTable2 ON a = d where d < 10 AND a < 12]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(<($3, 10), <($0, 12))])
   +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[d, e, f])
+- NestedLoopJoin(joinType=[InnerJoin], where=[(a = d)], select=[a, d, e, f], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[a], where=[(a < 10)])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Calc(select=[d, e, f], where=[(d < 10)])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftOuterJoinWithFilter4">
    <Resource name="sql">
      <![CDATA[SELECT d, e, f FROM MyTable1 LEFT JOIN MyTable2 ON a = d where d = null]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[=($3, null)])
   +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Values(tuples=[[]], values=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightJoinWithFilterPushDown">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
   (select a, count(b) as b from MyTable1 group by a)
   right join
   (select d, count(e) as e from MyTable2 group by d)
   on true where a = d and b = e and d = 2
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], d=[$2], e=[$3])
+- LogicalFilter(condition=[AND(=($0, $2), =($1, $3), =($2, 2))])
   +- LogicalJoin(condition=[true], joinType=[right])
      :- LogicalAggregate(group=[{0}], b=[COUNT($1)])
      :  +- LogicalProject(a=[$0], b=[$1])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
      +- LogicalAggregate(group=[{0}], e=[COUNT($1)])
         +- LogicalProject(d=[$0], e=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, CAST(b AS BIGINT) AS b, CAST(2 AS INTEGER) AS d, e])
+- MultipleInput(readOrder=[0,1], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[((a = d) AND (b = e))], select=[a, b, d, e], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- HashAggregate(isMerge=[true], groupBy=[d], select=[d, Final_COUNT(count$0) AS e])\n   +- [#2] Exchange(distribution=[hash[d]])\n])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[true], groupBy=[a], select=[a, Final_COUNT(count$0) AS b])
   :     +- Exchange(distribution=[hash[a]])
   :        +- LocalHashAggregate(groupBy=[a], select=[a, Partial_COUNT(b) AS count$0])
   :           +- Calc(select=[CAST(2 AS INTEGER) AS a, b], where=[(a = 2)])
   :              +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Exchange(distribution=[hash[d]])
      +- LocalHashAggregate(groupBy=[d], select=[d, Partial_COUNT(e) AS count$0])
         +- Calc(select=[CAST(2 AS INTEGER) AS d, e], where=[(d = 2)])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightOuterJoinWithEquiPred">
    <Resource name="sql">
      <![CDATA[SELECT c, g FROM MyTable1 RIGHT OUTER JOIN MyTable2 ON b = e]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2], g=[$6])
+- LogicalJoin(condition=[=($1, $4)], joinType=[right])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(joinType=[RightOuterJoin], where=[(b = e)], select=[b, c, e, g], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[b, c])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Calc(select=[e, g])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightJoinWithJoinConditionPushDown">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
   (select a, count(b) as b from MyTable1 group by a)
   right join
   (select d, count(e) as e from MyTable2 group by d)
   on a = d and b = e and d = 2 and b = 1
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], d=[$2], e=[$3])
+- LogicalJoin(condition=[AND(=($0, $2), =($1, $3), =($2, 2), =($1, 1))], joinType=[right])
   :- LogicalAggregate(group=[{0}], b=[COUNT($1)])
   :  +- LogicalProject(a=[$0], b=[$1])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
   +- LogicalAggregate(group=[{0}], e=[COUNT($1)])
      +- LogicalProject(d=[$0], e=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
MultipleInput(readOrder=[0,1], members=[\nNestedLoopJoin(joinType=[RightOuterJoin], where=[((a = d) AND (1 = e) AND (d = 2))], select=[a, b, d, e], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- HashAggregate(isMerge=[true], groupBy=[d], select=[d, Final_COUNT(count$0) AS e])\n   +- [#2] Exchange(distribution=[hash[d]])\n])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[a, b], where=[(b = 1)])
:     +- HashAggregate(isMerge=[true], groupBy=[a], select=[a, Final_COUNT(count$0) AS b])
:        +- Exchange(distribution=[hash[a]])
:           +- LocalHashAggregate(groupBy=[a], select=[a, Partial_COUNT(b) AS count$0])
:              +- Calc(select=[a, b])
:                 +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Exchange(distribution=[hash[d]])
   +- LocalHashAggregate(groupBy=[d], select=[d, Partial_COUNT(e) AS count$0])
      +- Calc(select=[d, e])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightOuterJoinOnFalse">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 RIGHT OUTER JOIN MyTable1 ON false]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[false], joinType=[right])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[RightOuterJoin], where=[true], select=[d, e, f, g, h, a, b, c], build=[left])
:- Exchange(distribution=[broadcast])
:  +- Values(tuples=[[]], values=[d, e, f, g, h])
+- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightOuterJoinOnTrue">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 RIGHT OUTER JOIN MyTable1 ON true]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[true], joinType=[right])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[RightOuterJoin], where=[true], select=[d, e, f, g, h, a, b, c], build=[left])
:- Exchange(distribution=[broadcast])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightOuterJoinWithEquiAndLocalPred">
    <Resource name="sql">
      <![CDATA[SELECT c, g FROM MyTable2 RIGHT OUTER JOIN  MyTable1 ON a = d AND d < 2]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$7], g=[$3])
+- LogicalJoin(condition=[AND(=($5, $0), <($0, 2))], joinType=[right])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[c, g])
+- NestedLoopJoin(joinType=[RightOuterJoin], where=[(a = d)], select=[d, g, a, c], build=[left])
   :- Exchange(distribution=[broadcast])
   :  +- Calc(select=[d, g], where=[(d < 2)])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
   +- Calc(select=[a, c])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightOuterJoinWithNonEquiPred">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 RIGHT OUTER JOIN MyTable1 ON a <> d]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[<>($5, $0)], joinType=[right])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[RightOuterJoin], where=[(a <> d)], select=[d, e, f, g, h, a, b, c], build=[left])
:- Exchange(distribution=[broadcast])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRightOuterJoinWithEquiAndNonEquiPred">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable2 RIGHT OUTER JOIN  MyTable1 ON a = d AND d < 2 AND b < h]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(d=[$0], e=[$1], f=[$2], g=[$3], h=[$4], a=[$5], b=[$6], c=[$7])
+- LogicalJoin(condition=[AND(=($5, $0), <($0, 2), <($6, $4))], joinType=[right])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[RightOuterJoin], where=[((a = d) AND (b < h))], select=[d, e, f, g, h, a, b, c], build=[left])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[d, e, f, g, h], where=[(d < 2)])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable2, source: [TestTableSource(d, e, f, g, h)]]], fields=[d, e, f, g, h])
+- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSelfJoin">
    <Resource name="sql">
      <![CDATA[SELECT * FROM
  (SELECT * FROM src WHERE k = 0) src1
LEFT OUTER JOIN
  (SELECT * from src WHERE k = 0) src2
ON (src1.k = src2.k AND src2.k > 10)
         ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(k=[$0], v=[$1], k0=[$2], v0=[$3])
+- LogicalJoin(condition=[AND(=($0, $2), >($2, 10))], joinType=[left])
   :- LogicalProject(k=[$0], v=[$1])
   :  +- LogicalFilter(condition=[=($0, 0)])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, src, source: [TestTableSource(k, v)]]])
   +- LogicalProject(k=[$0], v=[$1])
      +- LogicalFilter(condition=[=($0, 0)])
         +- LogicalTableScan(table=[[default_catalog, default_database, src, source: [TestTableSource(k, v)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
NestedLoopJoin(joinType=[LeftOuterJoin], where=[(k = k0)], select=[k, v, k0, v0], build=[right])
:- Calc(select=[CAST(0 AS BIGINT) AS k, v], where=[(k = 0)])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, src, source: [TestTableSource(k, v)]]], fields=[k, v])
+- Exchange(distribution=[broadcast])
   +- Values(tuples=[[]], values=[k, v])
]]>
    </Resource>
  </TestCase>
</Root>
