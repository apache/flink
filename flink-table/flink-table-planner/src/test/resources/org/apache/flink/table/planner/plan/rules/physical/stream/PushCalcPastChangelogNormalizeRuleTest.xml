<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testFilterAndProjection">
    <Resource name="sql">
      <![CDATA[SELECT f1, f5 FROM T WHERE (f1 < 1 OR f2 > 10) AND f3 IS NOT NULL]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(f1=[$1], f5=[$5])
+- LogicalFilter(condition=[AND(OR(<($1, 1), >($2, 10)), IS NOT NULL($3))])
   +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[f1, f5])
+- ChangelogNormalize(key=[f1, f2], condition=[IS NOT NULL(f3)])
   +- Exchange(distribution=[hash[f1, f2]])
      +- Calc(select=[f1, f2, f3, f5], where=[OR(<(f1, 1), >(f2, 10))])
         +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3, f4, f5, f6, f7])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNonPrimaryKeySameSourcesAndSargNotPushedDown">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T WHERE f0 < 10 AND f0 > 1 AND f0 IS NOT NULL
 UNION SELECT * FROM T WHERE f0 < 2 AND f0 > 0 AND f0 IS NOT NULL
 INTERSECT SELECT * FROM T WHERE f0 < 4 AND f0 > 2 AND f0 IS NOT NULL]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[false])
:- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
:  +- LogicalFilter(condition=[AND(<($0, 10), >($0, 1), IS NOT NULL($0))])
:     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
+- LogicalIntersect(all=[false])
   :- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
   :  +- LogicalFilter(condition=[AND(<($0, 2), >($0, 0), IS NOT NULL($0))])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
   +- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
      +- LogicalFilter(condition=[AND(<($0, 4), >($0, 2), IS NOT NULL($0))])
         +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
GroupAggregate(groupBy=[f0, f1, f2, f3], select=[f0, f1, f2, f3])
+- Exchange(distribution=[hash[f0, f1, f2, f3]])
   +- Union(all=[true], union=[f0, f1, f2, f3])
      :- Calc(select=[f0, f1, f2, f3], where=[SEARCH(f0, Sarg[(1..10)])])
      :  +- ChangelogNormalize(key=[f1], condition=[f0 IS NOT NULL])(reuse_id=[1])
      :     +- Exchange(distribution=[hash[f1]])
      :        +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3])
      +- Join(joinType=[LeftSemiJoin], where=[(((f0 = f00) OR (f0 IS NULL AND f00 IS NULL)) AND (f1 = f10) AND ((f2 = f20) OR (f2 IS NULL AND f20 IS NULL)) AND (f3 = f30))], select=[f0, f1, f2, f3], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
         :- Exchange(distribution=[hash[f0, f1, f2, f3]])
         :  +- Calc(select=[f0, f1, f2, f3], where=[SEARCH(f0, Sarg[(0..2)])])
         :     +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[f0, f1, f2, f3]])
            +- Calc(select=[f0, f1, f2, f3], where=[SEARCH(f0, Sarg[(2..4)])])
               +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNonPrimaryKeySeveralDifferentSources">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T WHERE f3 < 1 AND f3 > 0
 UNION SELECT * FROM T2 WHERE f3 < 1 AND f3 > 0
 INTERSECT SELECT * FROM T3 WHERE f3 < 1 AND f3 > 0]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[false])
:- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
:  +- LogicalFilter(condition=[AND(<($3, 1), >($3, 0))])
:     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
+- LogicalIntersect(all=[false])
   :- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
   :  +- LogicalFilter(condition=[AND(<($3, 1), >($3, 0))])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T2]])
   +- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
      +- LogicalFilter(condition=[AND(<($3, 1), >($3, 0))])
         +- LogicalTableScan(table=[[default_catalog, default_database, T3]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
GroupAggregate(groupBy=[f0, f1, f2, f3], select=[f0, f1, f2, f3])
+- Exchange(distribution=[hash[f0, f1, f2, f3]])
   +- Union(all=[true], union=[f0, f1, f2, f3])
      :- ChangelogNormalize(key=[f1], condition=[SEARCH(f3, Sarg[(0..1)])])
      :  +- Exchange(distribution=[hash[f1]])
      :     +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3])
      +- Join(joinType=[LeftSemiJoin], where=[(((f0 = f00) OR (f0 IS NULL AND f00 IS NULL)) AND (f1 = f10) AND ((f2 = f20) OR (f2 IS NULL AND f20 IS NULL)) AND (f3 = f30))], select=[f0, f1, f2, f3], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
         :- Exchange(distribution=[hash[f0, f1, f2, f3]])
         :  +- ChangelogNormalize(key=[f1], condition=[SEARCH(f3, Sarg[(0..1)])])
         :     +- Exchange(distribution=[hash[f1]])
         :        +- TableSourceScan(table=[[default_catalog, default_database, T2]], fields=[f0, f1, f2, f3])
         +- Exchange(distribution=[hash[f0, f1, f2, f3]])
            +- ChangelogNormalize(key=[f1], condition=[SEARCH(f3, Sarg[(0..1)])])
               +- Exchange(distribution=[hash[f1]])
                  +- TableSourceScan(table=[[default_catalog, default_database, T3]], fields=[f0, f1, f2, f3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testWithMultiplePrimaryKeyColumns">
    <Resource name="sql">
      <![CDATA[SELECT f0, f1 FROM T WHERE (f1 < 1 OR f2 > 10) AND f0 IS NOT NULL]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(f0=[$0], f1=[$1])
+- LogicalFilter(condition=[AND(OR(<($1, 1), >($2, 10)), IS NOT NULL($0))])
   +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[f0, f1])
+- ChangelogNormalize(key=[f1, f2], condition=[IS NOT NULL(f0)])
   +- Exchange(distribution=[hash[f1, f2]])
      +- Calc(select=[f0, f1, f2], where=[OR(<(f1, 1), >(f2, 10))])
         +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3, f4, f5, f6, f7])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNonPrimaryKeySeveralSameSources">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T WHERE f3 < 1
UNION SELECT * FROM T WHERE f3 < 3
INTERSECT SELECT * FROM T WHERE f3 > 0]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[false])
:- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
:  +- LogicalFilter(condition=[<($3, 1)])
:     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
+- LogicalIntersect(all=[false])
   :- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
   :  +- LogicalFilter(condition=[<($3, 3)])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
   +- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
      +- LogicalFilter(condition=[>($3, 0)])
         +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
GroupAggregate(groupBy=[f0, f1, f2, f3], select=[f0, f1, f2, f3])
+- Exchange(distribution=[hash[f0, f1, f2, f3]])
   +- Union(all=[true], union=[f0, f1, f2, f3])
      :- Calc(select=[f0, f1, f2, f3], where=[(f3 < 1)])
      :  +- ChangelogNormalize(key=[f1])(reuse_id=[1])
      :     +- Exchange(distribution=[hash[f1]])
      :        +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3])
      +- Join(joinType=[LeftSemiJoin], where=[(((f0 = f00) OR (f0 IS NULL AND f00 IS NULL)) AND (f1 = f10) AND ((f2 = f20) OR (f2 IS NULL AND f20 IS NULL)) AND (f3 = f30))], select=[f0, f1, f2, f3], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
         :- Exchange(distribution=[hash[f0, f1, f2, f3]])
         :  +- Calc(select=[f0, f1, f2, f3], where=[(f3 < 3)])
         :     +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[f0, f1, f2, f3]])
            +- Calc(select=[f0, f1, f2, f3], where=[(f3 > 0)])
               +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNonPrimaryKeySeveralSameSourcesPartialPushedDown">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T WHERE f3 < 1 AND f3 > 0
 UNION SELECT * FROM T WHERE f3 < 3 AND f3 > 0
 INTERSECT SELECT * FROM T WHERE f3 > 0 AND f3 < 10]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[false])
:- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
:  +- LogicalFilter(condition=[AND(<($3, 1), >($3, 0))])
:     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
+- LogicalIntersect(all=[false])
   :- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
   :  +- LogicalFilter(condition=[AND(<($3, 3), >($3, 0))])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
   +- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
      +- LogicalFilter(condition=[AND(>($3, 0), <($3, 10))])
         +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
GroupAggregate(groupBy=[f0, f1, f2, f3], select=[f0, f1, f2, f3])
+- Exchange(distribution=[hash[f0, f1, f2, f3]])
   +- Union(all=[true], union=[f0, f1, f2, f3])
      :- Calc(select=[f0, f1, f2, f3], where=[(f3 < 1)])
      :  +- ChangelogNormalize(key=[f1], condition=[(f3 > 0)])(reuse_id=[1])
      :     +- Exchange(distribution=[hash[f1]])
      :        +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3])
      +- Join(joinType=[LeftSemiJoin], where=[(((f0 = f00) OR (f0 IS NULL AND f00 IS NULL)) AND (f1 = f10) AND ((f2 = f20) OR (f2 IS NULL AND f20 IS NULL)) AND (f3 = f30))], select=[f0, f1, f2, f3], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
         :- Exchange(distribution=[hash[f0, f1, f2, f3]])
         :  +- Calc(select=[f0, f1, f2, f3], where=[(f3 < 3)])
         :     +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[f0, f1, f2, f3]])
            +- Calc(select=[f0, f1, f2, f3], where=[(f3 < 10)])
               +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOnlyProjection">
    <Resource name="sql">
      <![CDATA[SELECT f1, f2 FROM T]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(f1=[$1], f2=[$2])
+- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
ChangelogNormalize(key=[f1])
+- Exchange(distribution=[hash[f1]])
   +- Calc(select=[f1, f2])
      +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNonPrimaryKeySeveralSameSourcesWithFullPushDown">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T WHERE f3 < 1 AND f3 > 0
 UNION SELECT * FROM T WHERE f3 < 1 AND f3 > 0
 INTERSECT SELECT * FROM T WHERE f3 < 1 AND f3 > 0]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[false])
:- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
:  +- LogicalFilter(condition=[AND(<($3, 1), >($3, 0))])
:     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
+- LogicalIntersect(all=[false])
   :- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
   :  +- LogicalFilter(condition=[AND(<($3, 1), >($3, 0))])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
   +- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
      +- LogicalFilter(condition=[AND(<($3, 1), >($3, 0))])
         +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
GroupAggregate(groupBy=[f0, f1, f2, f3], select=[f0, f1, f2, f3])
+- Exchange(distribution=[hash[f0, f1, f2, f3]])
   +- Union(all=[true], union=[f0, f1, f2, f3])
      :- ChangelogNormalize(key=[f1], condition=[SEARCH(f3, Sarg[(0..1)])])(reuse_id=[1])
      :  +- Exchange(distribution=[hash[f1]])
      :     +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3])
      +- Join(joinType=[LeftSemiJoin], where=[(((f0 = f00) OR (f0 IS NULL AND f00 IS NULL)) AND (f1 = f10) AND ((f2 = f20) OR (f2 IS NULL AND f20 IS NULL)) AND (f3 = f30))], select=[f0, f1, f2, f3], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
         :- Exchange(distribution=[hash[f0, f1, f2, f3]])(reuse_id=[2])
         :  +- Reused(reference_id=[1])
         +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartialPrimaryKeyFilterAndProjection">
    <Resource name="sql">
      <![CDATA[SELECT f1, f5 FROM T WHERE f1 < 1 AND f3 IS NOT NULL]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(f1=[$1], f5=[$5])
+- LogicalFilter(condition=[AND(<($1, 1), IS NOT NULL($3))])
   +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[f1, f5])
+- ChangelogNormalize(key=[f1, f2], condition=[IS NOT NULL(f3)])
   +- Exchange(distribution=[hash[f1, f2]])
      +- Calc(select=[f1, f2, f3, f5], where=[<(f1, 1)])
         +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3, f4, f5, f6, f7])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPrimaryKeySeveralDifferentSources">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T WHERE f1 < 1 AND f1 > 0
 UNION SELECT * FROM T2 WHERE f1 < 1 AND f1 > 0
 INTERSECT SELECT * FROM T3 WHERE f1 < 1 AND f1 > 0]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[false])
:- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
:  +- LogicalFilter(condition=[AND(<($1, 1), >($1, 0))])
:     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
+- LogicalIntersect(all=[false])
   :- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
   :  +- LogicalFilter(condition=[AND(<($1, 1), >($1, 0))])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T2]])
   +- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
      +- LogicalFilter(condition=[AND(<($1, 1), >($1, 0))])
         +- LogicalTableScan(table=[[default_catalog, default_database, T3]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
GroupAggregate(groupBy=[f0, f1, f2, f3], select=[f0, f1, f2, f3])
+- Exchange(distribution=[hash[f0, f1, f2, f3]])
   +- Union(all=[true], union=[f0, f1, f2, f3])
      :- ChangelogNormalize(key=[f1])
      :  +- Exchange(distribution=[hash[f1]])
      :     +- Calc(select=[f0, f1, f2, f3], where=[SEARCH(f1, Sarg[(0..1)])])
      :        +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3])
      +- Join(joinType=[LeftSemiJoin], where=[(((f0 = f00) OR (f0 IS NULL AND f00 IS NULL)) AND (f1 = f10) AND ((f2 = f20) OR (f2 IS NULL AND f20 IS NULL)) AND (f3 = f30))], select=[f0, f1, f2, f3], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
         :- Exchange(distribution=[hash[f0, f1, f2, f3]])
         :  +- ChangelogNormalize(key=[f1])
         :     +- Exchange(distribution=[hash[f1]])
         :        +- Calc(select=[f0, f1, f2, f3], where=[SEARCH(f1, Sarg[(0..1)])])
         :           +- TableSourceScan(table=[[default_catalog, default_database, T2]], fields=[f0, f1, f2, f3])
         +- Exchange(distribution=[hash[f0, f1, f2, f3]])
            +- ChangelogNormalize(key=[f1])
               +- Exchange(distribution=[hash[f1]])
                  +- Calc(select=[f0, f1, f2, f3], where=[SEARCH(f1, Sarg[(0..1)])])
                     +- TableSourceScan(table=[[default_catalog, default_database, T3]], fields=[f0, f1, f2, f3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPrimaryKeySeveralSameSources">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T WHERE f1 < 1
UNION SELECT * FROM T WHERE f1 < 3
INTERSECT SELECT * FROM T WHERE f1 > 0]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[false])
:- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
:  +- LogicalFilter(condition=[<($1, 1)])
:     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
+- LogicalIntersect(all=[false])
   :- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
   :  +- LogicalFilter(condition=[<($1, 3)])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
   +- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
      +- LogicalFilter(condition=[>($1, 0)])
         +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
GroupAggregate(groupBy=[f0, f1, f2, f3], select=[f0, f1, f2, f3])
+- Exchange(distribution=[hash[f0, f1, f2, f3]])
   +- Union(all=[true], union=[f0, f1, f2, f3])
      :- Calc(select=[f0, f1, f2, f3], where=[(f1 < 1)])
      :  +- ChangelogNormalize(key=[f1])(reuse_id=[1])
      :     +- Exchange(distribution=[hash[f1]])
      :        +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3])
      +- Join(joinType=[LeftSemiJoin], where=[(((f0 = f00) OR (f0 IS NULL AND f00 IS NULL)) AND (f1 = f10) AND ((f2 = f20) OR (f2 IS NULL AND f20 IS NULL)) AND (f3 = f30))], select=[f0, f1, f2, f3], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
         :- Exchange(distribution=[hash[f0, f1, f2, f3]])
         :  +- Calc(select=[f0, f1, f2, f3], where=[(f1 < 3)])
         :     +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[f0, f1, f2, f3]])
            +- Calc(select=[f0, f1, f2, f3], where=[(f1 > 0)])
               +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPrimaryKeySeveralSameSourcesWithFullPushDown">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T WHERE f1 < 1 AND f1 > 0
 UNION SELECT * FROM T WHERE f1 < 1 AND f1 > 0
 INTERSECT SELECT * FROM T WHERE f1 < 1 AND f1 > 0]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[false])
:- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
:  +- LogicalFilter(condition=[AND(<($1, 1), >($1, 0))])
:     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
+- LogicalIntersect(all=[false])
   :- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
   :  +- LogicalFilter(condition=[AND(<($1, 1), >($1, 0))])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
   +- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
      +- LogicalFilter(condition=[AND(<($1, 1), >($1, 0))])
         +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
GroupAggregate(groupBy=[f0, f1, f2, f3], select=[f0, f1, f2, f3])
+- Exchange(distribution=[hash[f0, f1, f2, f3]])
   +- Union(all=[true], union=[f0, f1, f2, f3])
      :- ChangelogNormalize(key=[f1])(reuse_id=[1])
      :  +- Exchange(distribution=[hash[f1]])
      :     +- Calc(select=[f0, f1, f2, f3], where=[SEARCH(f1, Sarg[(0..1)])])
      :        +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3])
      +- Join(joinType=[LeftSemiJoin], where=[(((f0 = f00) OR (f0 IS NULL AND f00 IS NULL)) AND (f1 = f10) AND ((f2 = f20) OR (f2 IS NULL AND f20 IS NULL)) AND (f3 = f30))], select=[f0, f1, f2, f3], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
         :- Exchange(distribution=[hash[f0, f1, f2, f3]])(reuse_id=[2])
         :  +- Reused(reference_id=[1])
         +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPrimaryKeySeveralSameSourcesWithPartialPushDown">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T WHERE f1 < 1 AND f1 > 0
 UNION SELECT * FROM T WHERE f1 < 3 AND f1 > 0
 INTERSECT SELECT * FROM T WHERE f1 > 0 AND f1 < 10]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalUnion(all=[false])
:- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
:  +- LogicalFilter(condition=[AND(<($1, 1), >($1, 0))])
:     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
+- LogicalIntersect(all=[false])
   :- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
   :  +- LogicalFilter(condition=[AND(<($1, 3), >($1, 0))])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T]])
   +- LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
      +- LogicalFilter(condition=[AND(>($1, 0), <($1, 10))])
         +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
GroupAggregate(groupBy=[f0, f1, f2, f3], select=[f0, f1, f2, f3])
+- Exchange(distribution=[hash[f0, f1, f2, f3]])
   +- Union(all=[true], union=[f0, f1, f2, f3])
      :- Calc(select=[f0, f1, f2, f3], where=[(f1 < 1)])
      :  +- ChangelogNormalize(key=[f1])(reuse_id=[1])
      :     +- Exchange(distribution=[hash[f1]])
      :        +- Calc(select=[f0, f1, f2, f3], where=[(f1 > 0)])
      :           +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3])
      +- Join(joinType=[LeftSemiJoin], where=[(((f0 = f00) OR (f0 IS NULL AND f00 IS NULL)) AND (f1 = f10) AND ((f2 = f20) OR (f2 IS NULL AND f20 IS NULL)) AND (f3 = f30))], select=[f0, f1, f2, f3], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
         :- Exchange(distribution=[hash[f0, f1, f2, f3]])
         :  +- Calc(select=[f0, f1, f2, f3], where=[(f1 < 3)])
         :     +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[f0, f1, f2, f3]])
            +- Calc(select=[f0, f1, f2, f3], where=[(f1 < 10)])
               +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testWithSinglePrimaryKeyFilter">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T WHERE f1 < 1]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(f0=[$0], f1=[$1], f2=[$2], f3=[$3])
+- LogicalFilter(condition=[<($1, 1)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
ChangelogNormalize(key=[f1])
+- Exchange(distribution=[hash[f1]])
   +- Calc(select=[f0, f1, f2, f3], where=[<(f1, 1)])
      +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testWithMultipleFilters">
    <Resource name="sql">
      <![CDATA[SELECT f1, SUM(f1) AS `sum` FROM T WHERE f1 < 10 AND (f1 > 3 OR f2 IS NULL) GROUP BY f1]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalAggregate(group=[{0}], sum=[SUM($0)])
+- LogicalProject(f1=[$1])
   +- LogicalFilter(condition=[AND(<($1, 10), OR(>($1, 3), IS NULL($2)))])
      +- LogicalTableScan(table=[[default_catalog, default_database, T]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Calc(select=[f1, f1 AS sum])
+- ChangelogNormalize(key=[f1], condition=[OR(IS NULL(f2), >(f1, 3))])
   +- Exchange(distribution=[hash[f1]])
      +- Calc(select=[f1, f2], where=[<(f1, 10)])
         +- TableSourceScan(table=[[default_catalog, default_database, T]], fields=[f0, f1, f2, f3])
]]>
    </Resource>
  </TestCase>
</Root>
