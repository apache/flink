<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testCrossWithUnnest">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM MyTable, UNNEST(MyTable.c) as A (s)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(s=[$0])
      +- Uncollect
         +- LogicalProject(c=[$cor0.c])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(s=[$0])
      +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS$1($cor0.c)], rowType=[RecordType:peek_no_expand(VARCHAR(2147483647) f0)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTumbleWindowAggregateWithCollectUnnest">
    <Resource name="sql">
      <![CDATA[
WITH T AS (SELECT b, COLLECT(b) as `set`
    FROM MyTable
    GROUP BY b, TUMBLE(rowtime, INTERVAL '3' SECOND)
)
SELECT b, s FROM T, UNNEST(T.`set`) AS A(s) where b < 3
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$0], s=[$2])
+- LogicalFilter(condition=[<($0, 3)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalProject(b=[$0], set=[$2])
      :  +- LogicalAggregate(group=[{0, 1}], set=[COLLECT($0)])
      :     +- LogicalProject(b=[$1], $f1=[$TUMBLE($3, 3000:INTERVAL SECOND)])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(s=[$0])
         +- Uncollect
            +- LogicalProject(set=[$cor0.set])
               +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$0], s=[$2])
+- LogicalFilter(condition=[<($0, 3)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalProject(b=[$0], set=[$2])
      :  +- LogicalAggregate(group=[{0, 1}], set=[COLLECT($0)])
      :     +- LogicalProject(b=[$1], $f1=[$TUMBLE($3, 3000:INTERVAL SECOND)])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(s=[$0])
         +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS$1($cor0.set)], rowType=[RecordType:peek_no_expand(BIGINT f0)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestWithValues">
		<Resource name="sql">
			<![CDATA[SELECT * FROM UNNEST(ARRAY[1,2,3])]]>
		</Resource>
		<Resource name="ast">
			<![CDATA[
LogicalProject(EXPR$0=[$0])
+- Uncollect
   +- LogicalProject(EXPR$0=[ARRAY(1, 2, 3)])
      +- LogicalValues(tuples=[[{ 0 }]])
]]>
		</Resource>
		<Resource name="optimized rel plan">
			<![CDATA[
LogicalProject(EXPR$0=[$0])
+- Uncollect
   +- LogicalProject(EXPR$0=[ARRAY(1, 2, 3)])
      +- LogicalValues(tuples=[[{ 0 }]])
]]>
		</Resource>
  </TestCase>
  <TestCase name="testCrossWithUnnestForMap">
    <Resource name="sql">
      <![CDATA[SELECT a, b, v FROM MyTable CROSS JOIN UNNEST(c) as f(k, v)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], v=[$4])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(k=[$0], v=[$1])
      +- Uncollect
         +- LogicalProject(c=[$cor0.c])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], v=[$4])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(k=[$0], v=[$1])
      +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS$1($cor0.c)], rowType=[RecordType:peek_no_expand(VARCHAR(2147483647) f0, VARCHAR(2147483647) f1)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinWithUnnestOfTuple">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, x, y FROM
    (SELECT a, b FROM MyTable WHERE a < 3) as tf,
    UNNEST(tf.b) as A (x, y)
WHERE x > a
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], x=[$2], y=[$3])
+- LogicalFilter(condition=[>($2, $0)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalProject(a=[$0], b=[$1])
      :  +- LogicalFilter(condition=[<($0, 3)])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(x=[$0], y=[$1])
         +- Uncollect
            +- LogicalProject(b=[$cor0.b])
               +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], x=[$2], y=[$3])
+- LogicalFilter(condition=[>($2, $0)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalProject(a=[$0], b=[$1])
      :  +- LogicalFilter(condition=[<($0, 3)])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(x=[$0], y=[$1])
         +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS$1($cor0.b)], rowType=[RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) _2)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftUnnestMultiSetFromCollectResult">
    <Resource name="sql">
      <![CDATA[
WITH T AS (SELECT a, COLLECT(b) as `set` FROM MyTable GROUP BY a)
SELECT a, s FROM T LEFT JOIN UNNEST(T.`set`) AS A(s) ON TRUE WHERE a < 5
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], s=[$2])
+- LogicalFilter(condition=[<($0, 5)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{1}])
      :- LogicalAggregate(group=[{0}], set=[COLLECT($1)])
      :  +- LogicalProject(a=[$0], b=[$1])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(s=[$0])
         +- Uncollect
            +- LogicalProject(set=[$cor0.set])
               +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], s=[$2])
+- LogicalFilter(condition=[<($0, 5)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{1}])
      :- LogicalAggregate(group=[{0}], set=[COLLECT($1)])
      :  +- LogicalProject(a=[$0], b=[$1])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(s=[$0])
         +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS$1($cor0.set)], rowType=[RecordType:peek_no_expand(VARCHAR(2147483647) f0)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestArrayOfArrayFromTable">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM MyTable, UNNEST(MyTable.c) AS A (s)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(s=[$0])
      +- Uncollect
         +- LogicalProject(c=[$cor0.c])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(s=[$0])
      +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS$1($cor0.c)], rowType=[RecordType:peek_no_expand(INTEGER ARRAY f0)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestMultiSetFromCollectResult">
    <Resource name="sql">
      <![CDATA[
WITH T AS (SELECT b, COLLECT(c) as `set` FROM MyTable GROUP BY b)
SELECT b, id, point FROM T, UNNEST(T.`set`) AS A(id, point) WHERE b < 3
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$0], id=[$2], point=[$3])
+- LogicalFilter(condition=[<($0, 3)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalAggregate(group=[{0}], set=[COLLECT($1)])
      :  +- LogicalProject(b=[$1], c=[$2])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(id=[$0], point=[$1])
         +- Uncollect
            +- LogicalProject(set=[$cor0.set])
               +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$0], id=[$2], point=[$3])
+- LogicalFilter(condition=[<($0, 3)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalAggregate(group=[{0}], set=[COLLECT($1)])
      :  +- LogicalProject(b=[$1], c=[$2])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(id=[$0], point=[$1])
         +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS$1($cor0.set)], rowType=[RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) _2)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestPrimitiveArrayFromTable">
    <Resource name="sql">
      <![CDATA[SELECT a, b, s FROM MyTable, UNNEST(MyTable.b) AS A (s)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], s=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(s=[$0])
      +- Uncollect
         +- LogicalProject(b=[$cor0.b])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], s=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(s=[$0])
      +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS$1($cor0.b)], rowType=[RecordType:peek_no_expand(INTEGER f0)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestObjectArrayFromTableWithFilter">
    <Resource name="sql">
      <![CDATA[SELECT a, b, s, t FROM MyTable, UNNEST(MyTable.b) AS A (s, t) WHERE s > 13]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], s=[$2], t=[$3])
+- LogicalFilter(condition=[>($2, 13)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(s=[$0], t=[$1])
         +- Uncollect
            +- LogicalProject(b=[$cor0.b])
               +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], s=[$2], t=[$3])
+- LogicalFilter(condition=[>($2, 13)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(s=[$0], t=[$1])
         +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS$1($cor0.b)], rowType=[RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) _2)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestObjectArrayWithoutAlias">
    <Resource name="sql">
      <![CDATA[SELECT a, b, A._1, A._2 FROM MyTable, UNNEST(MyTable.b) AS A where A._1 > 1]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], _1=[$2], _2=[$3])
+- LogicalFilter(condition=[>($2, 1)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- Uncollect
         +- LogicalProject(b=[$cor0.b])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], _1=[$2], _2=[$3])
+- LogicalFilter(condition=[>($2, 1)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS$1($cor0.b)], rowType=[RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) _2)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestWithNestedFilter">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM (
   SELECT a, b1, b2 FROM
       (SELECT a, b FROM MyTable) T
       CROSS JOIN
       UNNEST(T.b) AS S(b1, b2)
       WHERE S.b1 >= 12
   ) tmp
WHERE b2 <> 'Hello'
    ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b1=[$1], b2=[$2])
+- LogicalFilter(condition=[<>($2, _UTF-16LE'Hello')])
   +- LogicalProject(a=[$0], b1=[$2], b2=[$3])
      +- LogicalFilter(condition=[>=($2, 12)])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
            :- LogicalProject(a=[$0], b=[$1])
            :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
            +- LogicalProject(b1=[$0], b2=[$1])
               +- Uncollect
                  +- LogicalProject(b=[$cor0.b])
                     +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b1=[$1], b2=[$2])
+- LogicalFilter(condition=[<>($2, _UTF-16LE'Hello')])
   +- LogicalProject(a=[$0], b1=[$2], b2=[$3])
      +- LogicalFilter(condition=[>=($2, 12)])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
            :- LogicalProject(a=[$0], b=[$1])
            :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
            +- LogicalProject(b1=[$0], b2=[$1])
               +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS$1($cor0.b)], rowType=[RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) _2)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestWithOrdinalityAndValues">
    <Resource name="sql">
      <![CDATA[SELECT val, pos FROM UNNEST(ARRAY[1,2,3]) WITH ORDINALITY AS t(val, pos)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(val=[$0], pos=[$1])
+- LogicalProject(val=[$0], pos=[$1])
   +- Uncollect(withOrdinality=[true])
      +- LogicalProject(EXPR$0=[ARRAY(1, 2, 3)])
         +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(val=[$0], pos=[$1])
+- LogicalProject(val=[$0], pos=[$1])
   +- Uncollect(withOrdinality=[true])
      +- LogicalProject(EXPR$0=[ARRAY(1, 2, 3)])
         +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestWithOrdinalityArray">
    <Resource name="sql">
      <![CDATA[SELECT a, number, ordinality FROM MyTable CROSS JOIN UNNEST(b) WITH ORDINALITY AS t(number, ordinality)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], number=[$2], ordinality=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(number=[$0], ordinality=[$1])
      +- Uncollect(withOrdinality=[true])
         +- LogicalProject(b=[$cor0.b])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], number=[$2], ordinality=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(number=[$0], ordinality=[$1])
      +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS_WITH_ORDINALITY$1($cor0.b)], rowType=[RecordType:peek_no_expand(INTEGER EXPR$0, INTEGER ORDINALITY)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestWithOrdinalityArrayOfArray">
    <Resource name="sql">
      <![CDATA[
SELECT id, array_val, array_pos, elem, element_pos
FROM MyTable
CROSS JOIN UNNEST(nested_array) WITH ORDINALITY AS A(array_val, array_pos)
CROSS JOIN UNNEST(array_val) WITH ORDINALITY AS B(elem, element_pos)
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], array_val=[$2], array_pos=[$3], elem=[$4], element_pos=[$5])
+- LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{2}])
   :- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   :  +- LogicalProject(array_val=[$0], array_pos=[$1])
   :     +- Uncollect(withOrdinality=[true])
   :        +- LogicalProject(nested_array=[$cor0.nested_array])
   :           +- LogicalValues(tuples=[[{ 0 }]])
   +- LogicalProject(elem=[$0], element_pos=[$1])
      +- Uncollect(withOrdinality=[true])
         +- LogicalProject(array_val=[$cor1.array_val])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(id=[$0], array_val=[$2], array_pos=[$3], elem=[$4], element_pos=[$5])
+- LogicalCorrelate(correlation=[$cor1], joinType=[inner], requiredColumns=[{2}])
   :- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   :  +- LogicalProject(array_val=[$0], array_pos=[$1])
   :     +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS_WITH_ORDINALITY$1($cor0.nested_array)], rowType=[RecordType:peek_no_expand(INTEGER ARRAY EXPR$0, INTEGER ORDINALITY)])
   +- LogicalProject(elem=[$0], element_pos=[$1])
      +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS_WITH_ORDINALITY$1($cor1.array_val)], rowType=[RecordType:peek_no_expand(INTEGER EXPR$0, INTEGER ORDINALITY)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestWithOrdinalityArrayOfRowsFromTableWithFilter">
    <Resource name="sql">
      <![CDATA[SELECT a, b, s, t, o FROM MyTable, UNNEST(MyTable.b) WITH ORDINALITY AS A (s, t, o) WHERE s > 13]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], s=[$2], t=[$3], o=[$4])
+- LogicalFilter(condition=[>($2, 13)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(s=[$0], t=[$1], o=[$2])
         +- Uncollect(withOrdinality=[true])
            +- LogicalProject(b=[$cor0.b])
               +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], s=[$2], t=[$3], o=[$4])
+- LogicalFilter(condition=[>($2, 13)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(s=[$0], t=[$1], o=[$2])
         +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS_WITH_ORDINALITY$1($cor0.b)], rowType=[RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) _2, INTEGER ORDINALITY)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestWithOrdinalityArrayOfRowsWithoutAlias">
    <Resource name="sql">
      <![CDATA[SELECT a, b, A._1, A._2, A.`ORDINALITY` FROM MyTable, UNNEST(MyTable.b) WITH ORDINALITY AS A where A._1 > 1]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], _1=[$2], _2=[$3], ORDINALITY=[$4])
+- LogicalFilter(condition=[>($2, 1)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- Uncollect(withOrdinality=[true])
         +- LogicalProject(b=[$cor0.b])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], _1=[$2], _2=[$3], ORDINALITY=[$4])
+- LogicalFilter(condition=[>($2, 1)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS_WITH_ORDINALITY$1($cor0.b)], rowType=[RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) _2, INTEGER ORDINALITY)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestWithOrdinalityMap">
    <Resource name="sql">
      <![CDATA[SELECT id, k, v, pos FROM MyTable CROSS JOIN UNNEST(map_data) WITH ORDINALITY AS f(k, v, pos)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(id=[$0], k=[$2], v=[$3], pos=[$4])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(k=[$0], v=[$1], pos=[$2])
      +- Uncollect(withOrdinality=[true])
         +- LogicalProject(map_data=[$cor0.map_data])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(id=[$0], k=[$2], v=[$3], pos=[$4])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(k=[$0], v=[$1], pos=[$2])
      +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS_WITH_ORDINALITY$1($cor0.map_data)], rowType=[RecordType:peek_no_expand(VARCHAR(2147483647) f0, VARCHAR(2147483647) f1, INTEGER ORDINALITY)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestWithOrdinalityMultiset">
    <Resource name="sql">
      <![CDATA[
WITH T AS (SELECT a, COLLECT(c) as words FROM MyTable GROUP BY a)
SELECT a, word, pos
FROM T CROSS JOIN UNNEST(words) WITH ORDINALITY AS A(word, pos)
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], word=[$2], pos=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
   :- LogicalAggregate(group=[{0}], words=[COLLECT($1)])
   :  +- LogicalProject(a=[$0], c=[$2])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(word=[$0], pos=[$1])
      +- Uncollect(withOrdinality=[true])
         +- LogicalProject(words=[$cor0.words])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], word=[$2], pos=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
   :- LogicalAggregate(group=[{0}], words=[COLLECT($1)])
   :  +- LogicalProject(a=[$0], c=[$2])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(word=[$0], pos=[$1])
      +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS_WITH_ORDINALITY$1($cor0.words)], rowType=[RecordType:peek_no_expand(VARCHAR(2147483647) EXPR$0, INTEGER ORDINALITY)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestWithOrdinalityWithFilter">
    <Resource name="sql">
      <![CDATA[
SELECT a, number, ordinality 
FROM MyTable 
CROSS JOIN UNNEST(b) WITH ORDINALITY AS t(number, ordinality)
WHERE number > 10 AND ordinality < 3
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], number=[$2], ordinality=[$3])
+- LogicalFilter(condition=[AND(>($2, 10), <($3, 3))])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(number=[$0], ordinality=[$1])
         +- Uncollect(withOrdinality=[true])
            +- LogicalProject(b=[$cor0.b])
               +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], number=[$2], ordinality=[$3])
+- LogicalFilter(condition=[AND(>($2, 10), <($3, 3))])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(number=[$0], ordinality=[$1])
         +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS_WITH_ORDINALITY$1($cor0.b)], rowType=[RecordType:peek_no_expand(INTEGER EXPR$0, INTEGER ORDINALITY)])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestWithOrdinalityInSubquery">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM (
  SELECT a, number, ordinality 
  FROM MyTable 
  CROSS JOIN UNNEST(b) WITH ORDINALITY AS t(number, ordinality)
) subquery 
WHERE ordinality = 1
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], number=[$1], ordinality=[$2])
+- LogicalFilter(condition=[=($2, 1)])
   +- LogicalProject(a=[$0], number=[$2], ordinality=[$3])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
         :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
         +- LogicalProject(number=[$0], ordinality=[$1])
            +- Uncollect(withOrdinality=[true])
               +- LogicalProject(b=[$cor0.b])
                  +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], number=[$1], ordinality=[$2])
+- LogicalFilter(condition=[=($2, 1)])
   +- LogicalProject(a=[$0], number=[$2], ordinality=[$3])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
         :- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
         +- LogicalProject(number=[$0], ordinality=[$1])
            +- LogicalTableFunctionScan(invocation=[$UNNEST_ROWS_WITH_ORDINALITY$1($cor0.b)], rowType=[RecordType:peek_no_expand(INTEGER EXPR$0, INTEGER ORDINALITY)])
]]>
    </Resource>
  </TestCase>
</Root>
