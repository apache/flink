<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testAppendSink">
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.appendSink], fields=[EXPR$0, c])
+- LogicalProject(EXPR$0=[+($0, $1)], c=[$2])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.appendSink], fields=[EXPR$0, c], changelogMode=[NONE])
+- Calc(select=[+(a, b) AS EXPR$0, c], changelogMode=[I])
   +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInsertPartColumn">
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.zm_test], fields=[a, m1, m2, m3, m4])
+- LogicalProject(a=[CAST($0):BIGINT], m1=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP], m2=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP], m3=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP], m4=[null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.zm_test], fields=[a, m1, m2, m3, m4], changelogMode=[NONE])
+- Calc(select=[CAST(a) AS a, null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP AS m1, null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP AS m2, null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP AS m3, null:(VARCHAR(2147483647) CHARACTER SET "UTF-16LE", BIGINT) MAP AS m4], changelogMode=[I])
   +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAppendUpsertAndRetractSink">
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.appendSink], fields=[a, b])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalUnion(all=[true])
      :- LogicalProject(a=[$0], b=[$1])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(d=[$0], e=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2]])

LogicalSink(table=[default_catalog.default_database.retractSink], fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], b=[$1])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalProject(a=[$0], b=[$1])
         :     :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
         :     +- LogicalProject(d=[$0], e=[$1])
         :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2]])
         +- LogicalProject(i=[$0], j=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable3]])

LogicalSink(table=[default_catalog.default_database.upsertSink], fields=[a, total_min])
+- LogicalAggregate(group=[{0}], total_min=[MIN($1)])
   +- LogicalUnion(all=[true])
      :- LogicalProject(a=[$0], b=[$1])
      :  +- LogicalUnion(all=[true])
      :     :- LogicalProject(a=[$0], b=[$1])
      :     :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      :     +- LogicalProject(d=[$0], e=[$1])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2]])
      +- LogicalProject(i=[$0], j=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable3]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.appendSink], fields=[a, b], changelogMode=[NONE])
+- Union(all=[true], union=[a, b], changelogMode=[I])
   :- Calc(select=[a, b], changelogMode=[I])
   :  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
   +- Calc(select=[d, e], changelogMode=[I])
      +- DataStreamScan(table=[[default_catalog, default_database, MyTable2]], fields=[d, e, f], changelogMode=[I])

Sink(table=[default_catalog.default_database.retractSink], fields=[total_sum], changelogMode=[NONE])
+- GroupAggregate(select=[SUM(a) AS total_sum], changelogMode=[I,UB,UA])
   +- Exchange(distribution=[single], changelogMode=[I])
      +- Calc(select=[a], changelogMode=[I])
         +- Union(all=[true], union=[a, b], changelogMode=[I])
            :- Union(all=[true], union=[a, b], changelogMode=[I])
            :  :- Calc(select=[a, b], changelogMode=[I])
            :  :  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
            :  +- Calc(select=[d, e], changelogMode=[I])
            :     +- DataStreamScan(table=[[default_catalog, default_database, MyTable2]], fields=[d, e, f], changelogMode=[I])
            +- Calc(select=[i, j], changelogMode=[I])
               +- DataStreamScan(table=[[default_catalog, default_database, MyTable3]], fields=[i, j, k], changelogMode=[I])

Sink(table=[default_catalog.default_database.upsertSink], fields=[a, total_min], changelogMode=[NONE])
+- GroupAggregate(groupBy=[a], select=[a, MIN(b) AS total_min], changelogMode=[I,UA])
   +- Exchange(distribution=[hash[a]], changelogMode=[I])
      +- Union(all=[true], union=[a, b], changelogMode=[I])
         :- Union(all=[true], union=[a, b], changelogMode=[I])
         :  :- Calc(select=[a, b], changelogMode=[I])
         :  :  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
         :  +- Calc(select=[d, e], changelogMode=[I])
         :     +- DataStreamScan(table=[[default_catalog, default_database, MyTable2]], fields=[d, e, f], changelogMode=[I])
         +- Calc(select=[i, j], changelogMode=[I])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable3]], fields=[i, j, k], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMetadataColumn">
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.MetadataTable], fields=[a, b, c, metadata_1, metadata_2])
+- LogicalProject(a=[$0], b=[$1], c=[$2], metadata_1=[$3], metadata_2=[CAST(CAST($4):INTEGER):BIGINT])
   +- LogicalTableScan(table=[[default_catalog, default_database, MetadataTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.MetadataTable], fields=[a, b, c, metadata_1, metadata_2])
+- Calc(select=[a, b, c, metadata_1, CAST(CAST(metadata_2)) AS metadata_2])
   +- TableSourceScan(table=[[default_catalog, default_database, MetadataTable, project=[a, b, c, metadata_1, metadata_2], metadata=[metadata_1, metadata_2]]], fields=[a, b, c, metadata_1, metadata_2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRetractAndUpsertSink">
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.retractSink], fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[<($0, 4)])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

LogicalSink(table=[default_catalog.default_database.upsertSink], fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[AND(>=($0, 4), <($0, 6))])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

LogicalSink(table=[default_catalog.default_database.upsertSink], fields=[cnt, frequency])
+- LogicalAggregate(group=[{0}], frequency=[COUNT($1)])
   +- LogicalProject(cnt=[$1], b=[$0])
      +- LogicalFilter(condition=[<($0, 4)])
         +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
            +- LogicalProject(b=[$1], a=[$0])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.retractSink], fields=[b, cnt], changelogMode=[NONE])
+- Calc(select=[b, cnt], where=[<(b, 4)], changelogMode=[I,UB,UA])
   +- GroupAggregate(groupBy=[b], select=[b, COUNT(a) AS cnt], changelogMode=[I,UB,UA])
      +- Exchange(distribution=[hash[b]], changelogMode=[I])
         +- Calc(select=[b, a], changelogMode=[I])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])

Sink(table=[default_catalog.default_database.upsertSink], fields=[b, cnt], changelogMode=[NONE])
+- Calc(select=[b, cnt], where=[SEARCH(b, Sarg[[4..6)])], changelogMode=[I,UB,UA])
   +- GroupAggregate(groupBy=[b], select=[b, COUNT(a) AS cnt], changelogMode=[I,UB,UA])
      +- Exchange(distribution=[hash[b]], changelogMode=[I])
         +- Calc(select=[b, a], changelogMode=[I])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])

Sink(table=[default_catalog.default_database.upsertSink], fields=[cnt, frequency], changelogMode=[NONE])
+- GroupAggregate(groupBy=[cnt], select=[cnt, COUNT_RETRACT(b) AS frequency], changelogMode=[I,UA,D])
   +- Exchange(distribution=[hash[cnt]], changelogMode=[I,UB,UA])
      +- Calc(select=[b, cnt], where=[<(b, 4)], changelogMode=[I,UB,UA])
         +- GroupAggregate(groupBy=[b], select=[b, COUNT(a) AS cnt], changelogMode=[I,UB,UA])
            +- Exchange(distribution=[hash[b]], changelogMode=[I])
               +- Calc(select=[b, a], changelogMode=[I])
                  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUpsertSink">
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.upsertSink], fields=[a, cnt])
+- LogicalAggregate(group=[{0}], cnt=[COUNT()])
   +- LogicalProject(a=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.upsertSink], fields=[a, cnt], changelogMode=[NONE])
+- GroupAggregate(groupBy=[a], select=[a, COUNT(*) AS cnt], changelogMode=[I,UA])
   +- Exchange(distribution=[hash[a]], changelogMode=[I])
      +- Calc(select=[a], changelogMode=[I])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRetractSink1">
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.retractSink], fields=[a, cnt])
+- LogicalAggregate(group=[{0}], cnt=[COUNT()])
   +- LogicalProject(a=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.retractSink], fields=[a, cnt], changelogMode=[NONE])
+- GroupAggregate(groupBy=[a], select=[a, COUNT(*) AS cnt], changelogMode=[I,UB,UA])
   +- Exchange(distribution=[hash[a]], changelogMode=[I])
      +- Calc(select=[a], changelogMode=[I])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRetractSink2">
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.retractSink], fields=[cnt, a])
+- LogicalAggregate(group=[{0}], a=[COUNT($1)])
   +- LogicalProject(cnt=[$1], a=[$0])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
         +- LogicalProject(a=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.retractSink], fields=[cnt, a], changelogMode=[NONE])
+- GroupAggregate(groupBy=[cnt], select=[cnt, COUNT_RETRACT(a) AS a], changelogMode=[I,UB,UA,D])
   +- Exchange(distribution=[hash[cnt]], changelogMode=[I,UB,UA])
      +- GroupAggregate(groupBy=[a], select=[a, COUNT(*) AS cnt], changelogMode=[I,UB,UA])
         +- Exchange(distribution=[hash[a]], changelogMode=[I])
            +- Calc(select=[a], changelogMode=[I])
               +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSinkDisorderChangeLogWithRank">
    <Resource name="sql">
      <![CDATA[
INSERT INTO SinkRankChangeLog
SELECT person, sum_votes FROM
 (SELECT person, sum_votes,
   ROW_NUMBER() OVER (PARTITION BY vote_section ORDER BY sum_votes DESC) AS rank_number
   FROM (SELECT person, SUM(votes) AS sum_votes, SUM(votes) / 2 AS vote_section FROM src
      GROUP BY person))
   WHERE rank_number < 10
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.SinkRankChangeLog], fields=[person, sum_votes])
+- LogicalProject(person=[$0], sum_votes=[$1])
   +- LogicalFilter(condition=[<($2, 10)])
      +- LogicalProject(person=[$0], sum_votes=[$1], rank_number=[ROW_NUMBER() OVER (PARTITION BY /($1, 2) ORDER BY $1 DESC NULLS LAST)])
         +- LogicalAggregate(group=[{0}], sum_votes=[SUM($1)])
            +- LogicalTableScan(table=[[default_catalog, default_database, src]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.SinkRankChangeLog], fields=[person, sum_votes], upsertMaterialize=[true])
+- Calc(select=[person, sum_votes])
   +- Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=9], partitionBy=[$2], orderBy=[sum_votes DESC], select=[person, sum_votes, $2])
      +- Exchange(distribution=[hash[$2]])
         +- Calc(select=[person, sum_votes, (sum_votes / 2) AS $2])
            +- GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS sum_votes])
               +- Exchange(distribution=[hash[person]])
                  +- TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUpsertSinkWithFilter">
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.upsertSink], fields=[a, cnt])
+- LogicalProject(a=[$0], cnt=[$1])
   +- LogicalFilter(condition=[<($1, 10)])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
         +- LogicalProject(a=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.upsertSink], fields=[a, cnt], changelogMode=[NONE])
+- Calc(select=[a, cnt], where=[<(cnt, 10)], changelogMode=[I,UB,UA])
   +- GroupAggregate(groupBy=[a], select=[a, COUNT(*) AS cnt], changelogMode=[I,UB,UA])
      +- Exchange(distribution=[hash[a]], changelogMode=[I])
         +- Calc(select=[a], changelogMode=[I])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSinkDisorderChangeLogWithJoin">
    <Resource name="sql">
      <![CDATA[
INSERT INTO SinkJoinChangeLog
SELECT T.person, T.sum_votes, award.prize FROM
   (SELECT person, SUM(votes) AS sum_votes FROM src GROUP BY person) T, award
   WHERE T.sum_votes = award.votes
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalSink(table=[default_catalog.default_database.SinkJoinChangeLog], fields=[person, sum_votes, prize])
+- LogicalProject(person=[$0], sum_votes=[$1], prize=[$3])
   +- LogicalFilter(condition=[=($1, $2)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalAggregate(group=[{0}], sum_votes=[SUM($1)])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, src]])
         +- LogicalTableScan(table=[[default_catalog, default_database, award]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Sink(table=[default_catalog.default_database.SinkJoinChangeLog], fields=[person, sum_votes, prize], upsertMaterialize=[true])
+- Calc(select=[person, sum_votes, prize])
   +- Join(joinType=[InnerJoin], where=[(sum_votes = votes)], select=[person, sum_votes, votes, prize], leftInputSpec=[HasUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
      :- Exchange(distribution=[hash[sum_votes]])
      :  +- GroupAggregate(groupBy=[person], select=[person, SUM(votes) AS sum_votes])
      :     +- Exchange(distribution=[hash[person]])
      :        +- TableSourceScan(table=[[default_catalog, default_database, src]], fields=[person, votes])
      +- Exchange(distribution=[hash[votes]])
         +- TableSourceScan(table=[[default_catalog, default_database, award]], fields=[votes, prize])
]]>
    </Resource>
  </TestCase>
	<TestCase name="testInsertWithTargetColumnsAndSqlHint">
		<Resource name="ast">
			<![CDATA[
LogicalSink(table=[default_catalog.default_database.appendSink], fields=[EXPR$0, c], hints=[[[OPTIONS options:{sink.parallelism=1}]]])
+- LogicalProject(EXPR$0=[+($0, $1)], c=[$2])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
		</Resource>
		<Resource name="optimized rel plan">
			<![CDATA[
Sink(table=[default_catalog.default_database.appendSink], fields=[EXPR$0, c], hints=[[[OPTIONS options:{sink.parallelism=1}]]], changelogMode=[NONE])
+- Calc(select=[+(a, b) AS EXPR$0, c], changelogMode=[I])
   +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], changelogMode=[I])
]]>
		</Resource>
	</TestCase>
</Root>
