<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testInvalidRowNumberConditionOnProctime">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, ROW_NUMBER() OVER (PARTITION BY b ORDER BY proctime DESC) as rank_num
  FROM MyTable)
WHERE rank_num = 2
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], rank_num=[$1])
+- LogicalFilter(condition=[=($1, 2)])
   +- LogicalProject(a=[$0], rank_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $3 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, 2 AS $1])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=2, rankEnd=2], partitionBy=[b], orderBy=[proctime DESC], select=[a, b, proctime])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[a, b, proctime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInvalidRowNumberConditionOnRowtime">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, ROW_NUMBER() OVER (PARTITION BY b ORDER BY rowtime DESC) as rank_num
  FROM MyTable)
WHERE rank_num = 3
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], rank_num=[$1])
+- LogicalFilter(condition=[=($1, 3)])
   +- LogicalProject(a=[$0], rank_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $4 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, 3 AS $1])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=3, rankEnd=3], partitionBy=[b], orderBy=[rowtime DESC], select=[a, b, rowtime])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[a, b, rowtime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLastRowWithWindowOnRowtime">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(b=[$0], EXPR$1=[$2], EXPR$2=[TUMBLE_START($1)])
+- LogicalAggregate(group=[{0, 1}], EXPR$1=[SUM($2)])
   +- LogicalProject(b=[$1], $f1=[$TUMBLE($2, 4:INTERVAL SECOND)], a=[$0])
      +- LogicalProject(a=[$0], b=[$1], ts=[$2])
         +- LogicalFilter(condition=[=($3, 1)])
            +- LogicalProject(a=[$0], b=[$1], ts=[$2], rowNum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
               +- LogicalWatermarkAssigner(rowtime=[ts], watermark=[$2])
                  +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, ts)]]])

== Optimized Physical Plan ==
Calc(select=[b, EXPR$1, w$start AS EXPR$2])
+- GroupWindowAggregate(groupBy=[b], window=[TumblingGroupWindow('w$, ts, 4)], properties=[w$start, w$end, w$rowtime, w$proctime], select=[b, SUM(a) AS EXPR$1, start('w$) AS w$start, end('w$) AS w$end, rowtime('w$) AS w$rowtime, proctime('w$) AS w$proctime])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[b, ts, a])
         +- Deduplicate(keep=[LastRow], key=[a], order=[ROWTIME])
            +- Exchange(distribution=[hash[a]])
               +- WatermarkAssigner(rowtime=[ts], watermark=[ts])
                  +- LegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, ts)]]], fields=[a, b, ts])

== Optimized Execution Plan ==
Calc(select=[b, EXPR$1, w$start AS EXPR$2])
+- GroupWindowAggregate(groupBy=[b], window=[TumblingGroupWindow('w$, ts, 4)], properties=[w$start, w$end, w$rowtime, w$proctime], select=[b, SUM(a) AS EXPR$1, start('w$) AS w$start, end('w$) AS w$end, rowtime('w$) AS w$rowtime, proctime('w$) AS w$proctime])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[b, ts, a])
         +- Deduplicate(keep=[LastRow], key=[a], order=[ROWTIME])
            +- Exchange(distribution=[hash[a]])
               +- WatermarkAssigner(rowtime=[ts], watermark=[ts])
                  +- LegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, ts)]]], fields=[a, b, ts])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMiniBatchInferFirstRowOnRowtime">
    <Resource name="sql">
      <![CDATA[
SELECT COUNT(b) FROM (
  SELECT a, b
  FROM (
    SELECT *,
        ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime ASC) as rank_num
    FROM T)
  WHERE rank_num <= 1
)
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT($0)])
+- LogicalProject(b=[$1])
   +- LogicalProject(a=[$0], b=[$1])
      +- LogicalFilter(condition=[<=($4, 1)])
         +- LogicalProject(a=[$0], b=[$1], rowtime=[$2], proctime=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 NULLS FIRST)])
            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])
               +- LogicalProject(a=[$0], b=[$1], rowtime=[$2], proctime=[PROCTIME()])
                  +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, rowtime)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
GlobalGroupAggregate(select=[COUNT_RETRACT(count$0) AS EXPR$0])
+- Exchange(distribution=[single])
   +- LocalGroupAggregate(select=[COUNT_RETRACT(b) AS count$0, COUNT_RETRACT(*) AS count1$1])
      +- Calc(select=[b])
         +- Deduplicate(keep=[FirstRow], key=[a], order=[ROWTIME])
            +- Exchange(distribution=[hash[a]])
               +- Calc(select=[a, b, rowtime])
                  +- MiniBatchAssigner(interval=[1000ms], mode=[RowTime])
                     +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])
                        +- Calc(select=[a, b, rowtime, PROCTIME() AS proctime])
                           +- LegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, rowtime)]]], fields=[a, b, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMiniBatchInferLastRowOnRowtime">
    <Resource name="sql">
      <![CDATA[
SELECT COUNT(b) FROM (
  SELECT a, b
  FROM (
    SELECT *,
        ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime DESC) as rank_num
    FROM T)
  WHERE rank_num = 1
)
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT($0)])
+- LogicalProject(b=[$1])
   +- LogicalProject(a=[$0], b=[$1])
      +- LogicalFilter(condition=[=($4, 1)])
         +- LogicalProject(a=[$0], b=[$1], rowtime=[$2], proctime=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])
               +- LogicalProject(a=[$0], b=[$1], rowtime=[$2], proctime=[PROCTIME()])
                  +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, rowtime)]]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
GlobalGroupAggregate(select=[COUNT_RETRACT(count$0) AS EXPR$0])
+- Exchange(distribution=[single])
   +- LocalGroupAggregate(select=[COUNT_RETRACT(b) AS count$0, COUNT_RETRACT(*) AS count1$1])
      +- Calc(select=[b])
         +- Deduplicate(keep=[LastRow], key=[a], order=[ROWTIME])
            +- Exchange(distribution=[hash[a]])
               +- Calc(select=[a, b, rowtime])
                  +- MiniBatchAssigner(interval=[1000ms], mode=[RowTime])
                     +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])
                        +- Calc(select=[a, b, rowtime, PROCTIME() AS proctime])
                           +- LegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, rowtime)]]], fields=[a, b, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSimpleFirstRowOnBuiltinProctime">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT *,
    ROW_NUMBER() OVER (PARTITION BY a ORDER BY PROCTIME() ASC) as rowNum
  FROM MyTable
)
WHERE rowNum = 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rowNum=[$5])
+- LogicalFilter(condition=[=($5, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rowNum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY PROCTIME() NULLS FIRST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, 1 AS $5])
+- Deduplicate(keep=[FirstRow], key=[a], order=[PROCTIME])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c, proctime, rowtime, PROCTIME() AS $5])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSimpleLastRowOnBuiltinProctime">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT *,
    ROW_NUMBER() OVER (ORDER BY PROCTIME() DESC) as rowNum
  FROM MyTable
)
WHERE rowNum = 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rowNum=[$5])
+- LogicalFilter(condition=[=($5, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rowNum=[ROW_NUMBER() OVER (ORDER BY PROCTIME() DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, 1 AS $5])
+- Deduplicate(keep=[LastRow], key=[], order=[PROCTIME])
   +- Exchange(distribution=[single])
      +- Calc(select=[a, b, c, proctime, rowtime, PROCTIME() AS $5])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSimpleFirstRowOnProctime">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT *,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY proctime ASC) as rank_num
  FROM MyTable)
WHERE rank_num = 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[=($5, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 NULLS FIRST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c])
+- Deduplicate(keep=[FirstRow], key=[a], order=[PROCTIME])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c, proctime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSimpleLastRowOnRowtime">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT *,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime DESC) as rank_num
  FROM MyTable)
WHERE rank_num = 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[=($5, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c])
+- Deduplicate(keep=[LastRow], key=[a], order=[ROWTIME])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c, rowtime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSimpleFirstRowOnRowtime">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT *,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime ASC) as rank_num
  FROM MyTable)
WHERE rank_num <= 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($5, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 NULLS FIRST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c])
+- Deduplicate(keep=[FirstRow], key=[a], order=[ROWTIME])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c, rowtime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSimpleLastRowOnProctime">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT *,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY proctime DESC) as rank_num
  FROM MyTable)
WHERE rank_num = 1
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rank_num=[$5])
+- LogicalFilter(condition=[=($5, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, 1 AS rank_num])
+- Deduplicate(keep=[LastRow], key=[a], order=[PROCTIME])
   +- Exchange(distribution=[hash[a]])
      +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
</Root>
