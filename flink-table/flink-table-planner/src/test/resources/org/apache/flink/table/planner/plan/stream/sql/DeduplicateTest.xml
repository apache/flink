<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testInvalidChangelogInput">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a=[$0], rank_num=[$1])
+- LogicalFilter(condition=[=($1, 1)])
   +- LogicalProject(a=[$0], rank_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST)])
      +- LogicalWatermarkAssigner(rowtime=[ts], watermark=[-($2, 5000:INTERVAL SECOND)])
         +- LogicalTableScan(table=[[default_catalog, default_database, cdc]])

== Optimized Physical Plan ==
Calc(select=[a, 1:BIGINT AS $1], changelogMode=[I,UA,D])
+- Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[b], orderBy=[ROWTIME ts DESC], select=[a, b, ts], changelogMode=[I,UA,D])
   +- Exchange(distribution=[hash[b]], changelogMode=[I,UB,UA,D])
      +- WatermarkAssigner(rowtime=[ts], watermark=[-(ts, 5000:INTERVAL SECOND)], changelogMode=[I,UB,UA,D])
         +- TableSourceScan(table=[[default_catalog, default_database, cdc]], fields=[a, b, ts], changelogMode=[I,UB,UA,D])

== Optimized Execution Plan ==
Calc(select=[a, 1 AS $1])
+- Rank(strategy=[RetractStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[b], orderBy=[ROWTIME ts DESC], select=[a, b, ts])
   +- Exchange(distribution=[hash[b]])
      +- WatermarkAssigner(rowtime=[ts], watermark=[(ts - 5000:INTERVAL SECOND)])
         +- TableSourceScan(table=[[default_catalog, default_database, cdc]], fields=[a, b, ts])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInvalidRowNumberConditionOnProctime">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a=[$0], rank_num=[$1])
+- LogicalFilter(condition=[=($1, 2)])
   +- LogicalProject(a=[$0], rank_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $3 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

== Optimized Physical Plan ==
Calc(select=[a, 2:BIGINT AS $1], changelogMode=[I,UA,D])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=2, rankEnd=2], partitionBy=[b], orderBy=[proctime DESC], select=[a, b, proctime], changelogMode=[I,UA,D])
   +- Exchange(distribution=[hash[b]], changelogMode=[I])
      +- Calc(select=[a, b, proctime], changelogMode=[I])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
Calc(select=[a, 2 AS $1])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=2, rankEnd=2], partitionBy=[b], orderBy=[proctime DESC], select=[a, b, proctime])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[a, b, proctime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], rank_num=[$1])
+- LogicalFilter(condition=[=($1, 2)])
   +- LogicalProject(a=[$0], rank_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $3 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="optimized exec plan">
      <![CDATA[
Calc(select=[a, 2 AS $1])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=2, rankEnd=2], partitionBy=[b], orderBy=[proctime DESC], select=[a, b, proctime])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[a, b, proctime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInvalidRowNumberConditionOnRowtime">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a=[$0], rank_num=[$1])
+- LogicalFilter(condition=[=($1, 3)])
   +- LogicalProject(a=[$0], rank_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $4 DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

== Optimized Physical Plan ==
Calc(select=[a, 3:BIGINT AS $1], changelogMode=[I,UA,D])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=3, rankEnd=3], partitionBy=[b], orderBy=[ROWTIME rowtime DESC], select=[a, b, rowtime], changelogMode=[I,UA,D])
   +- Exchange(distribution=[hash[b]], changelogMode=[I])
      +- Calc(select=[a, b, rowtime], changelogMode=[I])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
Calc(select=[a, 3 AS $1])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=3, rankEnd=3], partitionBy=[b], orderBy=[ROWTIME rowtime DESC], select=[a, b, rowtime])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[a, b, rowtime])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLastRowWithWindowOnRowtime">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(b=[$0], EXPR$1=[$2], EXPR$2=[TUMBLE_START($1)])
+- LogicalAggregate(group=[{0, 1}], EXPR$1=[SUM($2)])
   +- LogicalProject(b=[$1], $f1=[$TUMBLE($2, 4:INTERVAL SECOND)], a=[$0])
      +- LogicalProject(a=[$0], b=[$1], ts=[$2])
         +- LogicalFilter(condition=[=($3, 1)])
            +- LogicalProject(a=[$0], b=[$1], ts=[$2], rowNum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
               +- LogicalWatermarkAssigner(rowtime=[ts], watermark=[$2])
                  +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, ts)]]])

== Optimized Physical Plan ==
Calc(select=[b, EXPR$1, w$start AS EXPR$2], changelogMode=[I])
+- GroupWindowAggregate(groupBy=[b], window=[TumblingGroupWindow('w$, ts, 4)], properties=[w$start, w$end, w$rowtime, w$proctime], select=[b, SUM(a) AS EXPR$1, start('w$) AS w$start, end('w$) AS w$end, rowtime('w$) AS w$rowtime, proctime('w$) AS w$proctime], changelogMode=[I])
   +- Exchange(distribution=[hash[b]], changelogMode=[I,UB,UA,D])
      +- Calc(select=[b, ts, a], changelogMode=[I,UB,UA,D])
         +- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[ROWTIME ts DESC], select=[a, b, ts], changelogMode=[I,UB,UA,D])
            +- Exchange(distribution=[hash[a]], changelogMode=[I])
               +- WatermarkAssigner(rowtime=[ts], watermark=[ts], changelogMode=[I])
                  +- LegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, ts)]]], fields=[a, b, ts], changelogMode=[I])

== Optimized Execution Plan ==
Calc(select=[b, EXPR$1, w$start AS EXPR$2])
+- GroupWindowAggregate(groupBy=[b], window=[TumblingGroupWindow('w$, ts, 4)], properties=[w$start, w$end, w$rowtime, w$proctime], select=[b, SUM(a) AS EXPR$1, start('w$) AS w$start, end('w$) AS w$end, rowtime('w$) AS w$rowtime, proctime('w$) AS w$proctime])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[b, ts, a])
         +- Deduplicate(keep=[LastRow], key=[a], order=[ROWTIME], outputInsertOnly=[false])
            +- Exchange(distribution=[hash[a]])
               +- WatermarkAssigner(rowtime=[ts], watermark=[ts])
                  +- LegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, ts)]]], fields=[a, b, ts])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMiniBatchInferFirstRowOnRowtime">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalAggregate(group=[{}], EXPR$0=[COUNT($0)])
+- LogicalProject(b=[$1])
   +- LogicalProject(a=[$0], b=[$1])
      +- LogicalFilter(condition=[<=($4, 1)])
         +- LogicalProject(a=[$0], b=[$1], rowtime=[$2], proctime=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 NULLS FIRST)])
            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])
               +- LogicalProject(a=[$0], b=[$1], rowtime=[$2], proctime=[PROCTIME()])
                  +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, rowtime)]]])

== Optimized Physical Plan ==
GlobalGroupAggregate(select=[COUNT_RETRACT(count$0) AS EXPR$0], changelogMode=[I,UA,D])
+- Exchange(distribution=[single], changelogMode=[I])
   +- LocalGroupAggregate(select=[COUNT_RETRACT(b) AS count$0, COUNT_RETRACT(*) AS count1$1], changelogMode=[I])
      +- Calc(select=[b], changelogMode=[I,UB,UA,D])
         +- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[ROWTIME rowtime ASC], select=[a, b, rowtime], changelogMode=[I,UB,UA,D])
            +- Exchange(distribution=[hash[a]], changelogMode=[I])
               +- Calc(select=[a, b, rowtime], changelogMode=[I])
                  +- MiniBatchAssigner(interval=[1000ms], mode=[RowTime], changelogMode=[I])
                     +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime], changelogMode=[I])
                        +- Calc(select=[a, b, rowtime, PROCTIME() AS proctime], changelogMode=[I])
                           +- LegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, rowtime)]]], fields=[a, b, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
GlobalGroupAggregate(select=[COUNT_RETRACT(count$0) AS EXPR$0])
+- Exchange(distribution=[single])
   +- LocalGroupAggregate(select=[COUNT_RETRACT(b) AS count$0, COUNT_RETRACT(*) AS count1$1])
      +- Calc(select=[b])
         +- Deduplicate(keep=[FirstRow], key=[a], order=[ROWTIME], outputInsertOnly=[false])
            +- Exchange(distribution=[hash[a]])
               +- Calc(select=[a, b, rowtime])
                  +- MiniBatchAssigner(interval=[1000ms], mode=[RowTime])
                     +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])
                        +- Calc(select=[a, b, rowtime, PROCTIME() AS proctime])
                           +- LegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, rowtime)]]], fields=[a, b, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMiniBatchInferLastRowOnRowtime">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalAggregate(group=[{}], EXPR$0=[COUNT($0)])
+- LogicalProject(b=[$1])
   +- LogicalProject(a=[$0], b=[$1])
      +- LogicalFilter(condition=[=($4, 1)])
         +- LogicalProject(a=[$0], b=[$1], rowtime=[$2], proctime=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 DESC NULLS LAST)])
            +- LogicalWatermarkAssigner(rowtime=[rowtime], watermark=[$2])
               +- LogicalProject(a=[$0], b=[$1], rowtime=[$2], proctime=[PROCTIME()])
                  +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, rowtime)]]])

== Optimized Physical Plan ==
GlobalGroupAggregate(select=[COUNT_RETRACT(count$0) AS EXPR$0], changelogMode=[I,UA,D])
+- Exchange(distribution=[single], changelogMode=[I])
   +- LocalGroupAggregate(select=[COUNT_RETRACT(b) AS count$0, COUNT_RETRACT(*) AS count1$1], changelogMode=[I])
      +- Calc(select=[b], changelogMode=[I,UB,UA,D])
         +- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[ROWTIME rowtime DESC], select=[a, b, rowtime], changelogMode=[I,UB,UA,D])
            +- Exchange(distribution=[hash[a]], changelogMode=[I])
               +- Calc(select=[a, b, rowtime], changelogMode=[I])
                  +- MiniBatchAssigner(interval=[1000ms], mode=[RowTime], changelogMode=[I])
                     +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime], changelogMode=[I])
                        +- Calc(select=[a, b, rowtime, PROCTIME() AS proctime], changelogMode=[I])
                           +- LegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, rowtime)]]], fields=[a, b, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
GlobalGroupAggregate(select=[COUNT_RETRACT(count$0) AS EXPR$0])
+- Exchange(distribution=[single])
   +- LocalGroupAggregate(select=[COUNT_RETRACT(b) AS count$0, COUNT_RETRACT(*) AS count1$1])
      +- Calc(select=[b])
         +- Deduplicate(keep=[LastRow], key=[a], order=[ROWTIME], outputInsertOnly=[false])
            +- Exchange(distribution=[hash[a]])
               +- Calc(select=[a, b, rowtime])
                  +- MiniBatchAssigner(interval=[1000ms], mode=[RowTime])
                     +- WatermarkAssigner(rowtime=[rowtime], watermark=[rowtime])
                        +- Calc(select=[a, b, rowtime, PROCTIME() AS proctime])
                           +- LegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [CollectionTableSource(a, b, rowtime)]]], fields=[a, b, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSimpleFirstRowOnBuiltinProctime">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rowNum=[$5])
+- LogicalFilter(condition=[=($5, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rowNum=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY PROCTIME() NULLS FIRST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

== Optimized Physical Plan ==
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, 1:BIGINT AS $5], changelogMode=[I])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[$5 ASC], select=[a, b, c, proctime, rowtime, $5], changelogMode=[I])
   +- Exchange(distribution=[hash[a]], changelogMode=[I])
      +- Calc(select=[a, b, c, proctime, rowtime, PROCTIME() AS $5], changelogMode=[I])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, 1 AS $5])
+- Deduplicate(keep=[FirstRow], key=[a], order=[PROCTIME], outputInsertOnly=[true])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, c, proctime, rowtime, PROCTIME() AS $5])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSimpleLastRowOnBuiltinProctime">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rowNum=[$5])
+- LogicalFilter(condition=[=($5, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rowNum=[ROW_NUMBER() OVER (ORDER BY PROCTIME() DESC NULLS LAST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

== Optimized Physical Plan ==
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, 1:BIGINT AS $5], changelogMode=[I,UA,D])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[], orderBy=[$5 DESC], select=[a, b, c, proctime, rowtime, $5], changelogMode=[I,UA,D])
   +- Exchange(distribution=[single], changelogMode=[I])
      +- Calc(select=[a, b, c, proctime, rowtime, PROCTIME() AS $5], changelogMode=[I])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, 1 AS $5])
+- Deduplicate(keep=[LastRow], key=[], order=[PROCTIME], outputInsertOnly=[false])
   +- Exchange(distribution=[single])
      +- Calc(select=[a, b, c, proctime, rowtime, PROCTIME() AS $5])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSimpleFirstRowOnProctime">
	  <Resource name="explain">
		  <![CDATA[== Abstract Syntax Tree ==
LogicalProject(EXPR$0=[$1], b=[$0], EXPR$2=[$2])
+- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)], EXPR$2=[SUM($2)])
   +- LogicalProject(b=[$1], a=[$0], c=[$2])
      +- LogicalProject(a=[$0], b=[$1], c=[$2])
         +- LogicalFilter(condition=[=($5, 1)])
            +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 NULLS FIRST)])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

== Optimized Physical Plan ==
Calc(select=[EXPR$0, b, EXPR$2], changelogMode=[I,UA])
+- GroupAggregate(groupBy=[b], select=[b, SUM(a) AS EXPR$0, SUM(c) AS EXPR$2], changelogMode=[I,UA])
   +- Exchange(distribution=[hash[b]], changelogMode=[I])
      +- Calc(select=[b, a, c], changelogMode=[I])
         +- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[proctime ASC], select=[a, b, c, proctime], changelogMode=[I])
            +- Exchange(distribution=[hash[a]], changelogMode=[I])
               +- Calc(select=[a, b, c, proctime], changelogMode=[I])
                  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
Calc(select=[EXPR$0, b, EXPR$2])
+- GroupAggregate(groupBy=[b], select=[b, SUM(a) AS EXPR$0, SUM(c) AS EXPR$2])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[b, a, c])
         +- Deduplicate(keep=[FirstRow], key=[a], order=[PROCTIME], outputInsertOnly=[true])
            +- Exchange(distribution=[hash[a]])
               +- Calc(select=[a, b, c, proctime])
                  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
	  </Resource>
  </TestCase>
  <TestCase name="testSimpleLastRowOnRowtime">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(EXPR$0=[$1], b=[$0], EXPR$2=[$2])
+- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)], EXPR$2=[SUM($2)])
   +- LogicalProject(b=[$1], a=[$0], c=[$2])
      +- LogicalProject(a=[$0], b=[$1], c=[$2])
         +- LogicalFilter(condition=[=($5, 1)])
            +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST)])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

== Optimized Physical Plan ==
Calc(select=[EXPR$0, b, EXPR$2], changelogMode=[I,UA,D])
+- GroupAggregate(groupBy=[b], select=[b, SUM_RETRACT(a) AS EXPR$0, SUM_RETRACT(c) AS EXPR$2], changelogMode=[I,UA,D])
   +- Exchange(distribution=[hash[b]], changelogMode=[I,UB,UA,D])
      +- Calc(select=[b, a, c], changelogMode=[I,UB,UA,D])
         +- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[ROWTIME rowtime DESC], select=[a, b, c, rowtime], changelogMode=[I,UB,UA,D])
            +- Exchange(distribution=[hash[a]], changelogMode=[I])
               +- Calc(select=[a, b, c, rowtime], changelogMode=[I])
                  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
Calc(select=[EXPR$0, b, EXPR$2])
+- GroupAggregate(groupBy=[b], select=[b, SUM_RETRACT(a) AS EXPR$0, SUM_RETRACT(c) AS EXPR$2])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[b, a, c])
         +- Deduplicate(keep=[LastRow], key=[a], order=[ROWTIME], outputInsertOnly=[false])
            +- Exchange(distribution=[hash[a]])
               +- Calc(select=[a, b, c, rowtime])
                  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSimpleFirstRowOnRowtime">

	  <Resource name="explain">
		  <![CDATA[== Abstract Syntax Tree ==
LogicalProject(EXPR$0=[$1], b=[$0], EXPR$2=[$2])
+- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)], EXPR$2=[SUM($2)])
   +- LogicalProject(b=[$1], a=[$0], c=[$2])
      +- LogicalProject(a=[$0], b=[$1], c=[$2])
         +- LogicalFilter(condition=[<=($5, 1)])
            +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 NULLS FIRST)])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

== Optimized Physical Plan ==
Calc(select=[EXPR$0, b, EXPR$2], changelogMode=[I,UA])
+- GroupAggregate(groupBy=[b], select=[b, SUM(a) AS EXPR$0, SUM(c) AS EXPR$2], changelogMode=[I,UA])
   +- Exchange(distribution=[hash[b]], changelogMode=[I])
      +- Calc(select=[b, a, c], changelogMode=[I])
         +- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[ROWTIME rowtime ASC], select=[a, b, c, rowtime], changelogMode=[I])
            +- Exchange(distribution=[hash[a]], changelogMode=[I])
               +- Calc(select=[a, b, c, rowtime], changelogMode=[I])
                  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
Calc(select=[EXPR$0, b, EXPR$2])
+- GroupAggregate(groupBy=[b], select=[b, SUM(a) AS EXPR$0, SUM(c) AS EXPR$2])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[b, a, c])
         +- Deduplicate(keep=[FirstRow], key=[a], order=[ROWTIME], outputInsertOnly=[true])
            +- Exchange(distribution=[hash[a]])
               +- Calc(select=[a, b, c, rowtime])
                  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
	  </Resource>
  </TestCase>
  <TestCase name="testSimpleLastRowOnProctime">
    <Resource name="explain">
      <![CDATA[== Abstract Syntax Tree ==
LogicalProject(EXPR$0=[$1], b=[$0], EXPR$2=[$2])
+- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)], EXPR$2=[SUM($2)])
   +- LogicalProject(b=[$1], a=[$0], c=[$2])
      +- LogicalProject(a=[$0], b=[$1], c=[$2])
         +- LogicalFilter(condition=[=($5, 1)])
            +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST)])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

== Optimized Physical Plan ==
Calc(select=[EXPR$0, b, EXPR$2], changelogMode=[I,UA,D])
+- GroupAggregate(groupBy=[b], select=[b, SUM_RETRACT(a) AS EXPR$0, SUM_RETRACT(c) AS EXPR$2], changelogMode=[I,UA,D])
   +- Exchange(distribution=[hash[b]], changelogMode=[I,UB,UA,D])
      +- Calc(select=[b, a, c], changelogMode=[I,UB,UA,D])
         +- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[proctime DESC], select=[a, b, c, proctime], changelogMode=[I,UB,UA,D])
            +- Exchange(distribution=[hash[a]], changelogMode=[I])
               +- Calc(select=[a, b, c, proctime], changelogMode=[I])
                  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime], changelogMode=[I])

== Optimized Execution Plan ==
Calc(select=[EXPR$0, b, EXPR$2])
+- GroupAggregate(groupBy=[b], select=[b, SUM_RETRACT(a) AS EXPR$0, SUM_RETRACT(c) AS EXPR$2])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[b, a, c])
         +- Deduplicate(keep=[LastRow], key=[a], order=[PROCTIME], outputInsertOnly=[false])
            +- Exchange(distribution=[hash[a]])
               +- Calc(select=[a, b, c, proctime])
                  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
</Root>
