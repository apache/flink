# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{
  # Generated parser implementation package and class name.
  package: "org.apache.flink.sql.parser.hive.impl",
  class: "FlinkHiveSqlParserImpl",

  # List of additional classes and packages to import.
  # Example. "org.apache.calcite.sql.*", "java.util.List".
  # Please keep the import classes in alphabetical order if new class is added.
  imports: [
    "org.apache.flink.sql.parser.hive.ddl.HiveDDLUtils"
    "org.apache.flink.sql.parser.hive.ddl.SqlAlterHiveDatabaseLocation"
    "org.apache.flink.sql.parser.hive.ddl.SqlAlterHiveDatabaseOwner"
    "org.apache.flink.sql.parser.hive.ddl.SqlAlterHiveDatabaseProps"
    "org.apache.flink.sql.parser.hive.ddl.SqlAlterHivePartitionRename"
    "org.apache.flink.sql.parser.hive.ddl.SqlAlterHiveTableAddReplaceColumn"
    "org.apache.flink.sql.parser.hive.ddl.SqlAlterHiveTableChangeColumn"
    "org.apache.flink.sql.parser.hive.ddl.SqlAlterHiveTableFileFormat"
    "org.apache.flink.sql.parser.hive.ddl.SqlAlterHiveTableLocation"
    "org.apache.flink.sql.parser.hive.ddl.SqlAlterHiveTableProps"
    "org.apache.flink.sql.parser.hive.ddl.SqlAlterHiveTableSerDe"
    "org.apache.flink.sql.parser.hive.ddl.SqlCreateHiveDatabase"
    "org.apache.flink.sql.parser.hive.ddl.SqlCreateHiveTable"
    "org.apache.flink.sql.parser.hive.ddl.SqlCreateHiveTable.HiveTableCreationContext"
    "org.apache.flink.sql.parser.hive.ddl.SqlCreateHiveTable.HiveTableRowFormat"
    "org.apache.flink.sql.parser.hive.ddl.SqlCreateHiveTable.HiveTableStoredAs"
    "org.apache.flink.sql.parser.hive.ddl.SqlDescribeHiveTable"
    "org.apache.flink.sql.parser.hive.ddl.SqlHiveConstraintEnable"
    "org.apache.flink.sql.parser.hive.ddl.SqlHiveConstraintRely"
    "org.apache.flink.sql.parser.hive.ddl.SqlHiveConstraintTrait"
    "org.apache.flink.sql.parser.hive.ddl.SqlHiveConstraintValidate"
    "org.apache.flink.sql.parser.hive.dml.RichSqlHiveInsert"
    "org.apache.flink.sql.parser.hive.type.ExtendedHiveStructTypeNameSpec"
    "org.apache.flink.sql.parser.ddl.constraint.SqlConstraintEnforcement"
    "org.apache.flink.sql.parser.ddl.constraint.SqlTableConstraint"
    "org.apache.flink.sql.parser.ddl.constraint.SqlUniqueSpec"
    "org.apache.flink.sql.parser.ddl.SqlAlterDatabase"
    "org.apache.flink.sql.parser.ddl.SqlAlterTable"
    "org.apache.flink.sql.parser.ddl.SqlAlterTableProperties"
    "org.apache.flink.sql.parser.ddl.SqlAlterTableRename"
    "org.apache.flink.sql.parser.ddl.SqlCreateCatalog"
    "org.apache.flink.sql.parser.ddl.SqlCreateFunction"
    "org.apache.flink.sql.parser.ddl.SqlCreateTable"
    "org.apache.flink.sql.parser.ddl.SqlCreateTable.TableCreationContext"
    "org.apache.flink.sql.parser.ddl.SqlCreateView"
    "org.apache.flink.sql.parser.ddl.SqlDropDatabase"
    "org.apache.flink.sql.parser.ddl.SqlDropFunction"
    "org.apache.flink.sql.parser.ddl.SqlDropTable"
    "org.apache.flink.sql.parser.ddl.SqlDropView"
    "org.apache.flink.sql.parser.ddl.SqlTableColumn"
    "org.apache.flink.sql.parser.ddl.SqlTableOption"
    "org.apache.flink.sql.parser.ddl.SqlUseCatalog"
    "org.apache.flink.sql.parser.ddl.SqlUseDatabase"
    "org.apache.flink.sql.parser.ddl.SqlWatermark"
    "org.apache.flink.sql.parser.dml.RichSqlInsert"
    "org.apache.flink.sql.parser.dml.RichSqlInsertKeyword"
    "org.apache.flink.sql.parser.dql.SqlDescribeCatalog"
    "org.apache.flink.sql.parser.dql.SqlDescribeDatabase"
    "org.apache.flink.sql.parser.dql.SqlShowCatalogs"
    "org.apache.flink.sql.parser.dql.SqlShowDatabases"
    "org.apache.flink.sql.parser.dql.SqlShowFunctions"
    "org.apache.flink.sql.parser.dql.SqlShowTables"
    "org.apache.flink.sql.parser.dql.SqlRichDescribeTable"
    "org.apache.flink.sql.parser.type.ExtendedSqlCollectionTypeNameSpec"
    "org.apache.flink.sql.parser.type.ExtendedSqlRowTypeNameSpec"
    "org.apache.flink.sql.parser.type.SqlMapTypeNameSpec"
    "org.apache.flink.sql.parser.utils.ParserResource"
    "org.apache.flink.sql.parser.validate.FlinkSqlConformance"
    "org.apache.flink.sql.parser.SqlProperty"
    "org.apache.calcite.sql.SqlAlienSystemTypeNameSpec"
    "org.apache.calcite.sql.SqlCreate"
    "org.apache.calcite.sql.SqlDrop"
    "java.util.List"
    "java.util.ArrayList"
  ]

  # List of new keywords. Example: "DATABASES", "TABLES". If the keyword is not a reserved
  # keyword, please also add it to 'nonReservedKeywords' section.
  # Please keep the keyword in alphabetical order if new keyword is added.
  keywords: [
    "BYTES"
    "CATALOGS"
    "CHANGE"
    "COLLECTION"
    "COLUMNS"
    "COMMENT"
    "DATABASES"
    "DBPROPERTIES"
    "DELIMITED"
    "DISABLE"
    "ENABLE"
    "ESCAPED"
    "EXTENDED"
    "FIELDS"
    "FILEFORMAT"
    "FORMATTED"
    "FUNCTIONS"
    "IF"
    "INPUTFORMAT"
    "ITEMS"
    "KEYS"
    "LINES"
    "LOCATION"
    "NORELY"
    "NOVALIDATE"
    "OUTPUTFORMAT"
    "OVERWRITE"
    "OWNER"
    "PARTITIONED"
    "RAW"
    "RELY"
    "RENAME"
    "SCALA"
    "SERDE"
    "SERDEPROPERTIES"
    "STORED"
    "STRING"
    "STRUCT"
    "TABLES"
    "TBLPROPERTIES"
    "TERMINATED"
    "USE"
    "VALIDATE"
  ]

  # List of keywords from "keywords" section that are not reserved.
  nonReservedKeywords: [
    "A"
    "ABSENT"
    "ABSOLUTE"
    "ACTION"
    "ADA"
    "ADD"
    "ADMIN"
    "AFTER"
    "ALWAYS"
    "APPLY"
    "ASC"
    "ASSERTION"
    "ASSIGNMENT"
    "ATTRIBUTE"
    "ATTRIBUTES"
    "BEFORE"
    "BERNOULLI"
    "BREADTH"
    "C"
    "CASCADE"
    "CATALOG"
    "CATALOG_NAME"
    "CENTURY"
    "CHAIN"
    "CHARACTERISTICS"
    "CHARACTERS"
    "CHARACTER_SET_CATALOG"
    "CHARACTER_SET_NAME"
    "CHARACTER_SET_SCHEMA"
    "CLASS_ORIGIN"
    "COBOL"
    "COLLATION"
    "COLLATION_CATALOG"
    "COLLATION_NAME"
    "COLLATION_SCHEMA"
    "COLUMN_NAME"
    "COMMAND_FUNCTION"
    "COMMAND_FUNCTION_CODE"
    "COMMITTED"
    "CONDITIONAL"
    "CONDITION_NUMBER"
    "CONNECTION"
    "CONNECTION_NAME"
    "CONSTRAINT_CATALOG"
    "CONSTRAINT_NAME"
    "CONSTRAINTS"
    "CONSTRAINT_SCHEMA"
    "CONSTRUCTOR"
    "CONTINUE"
    "CURSOR_NAME"
    "DATA"
    "DATABASE"
    "DATETIME_INTERVAL_CODE"
    "DATETIME_INTERVAL_PRECISION"
    "DAYS"
    "DECADE"
    "DEFAULTS"
    "DEFERRABLE"
    "DEFERRED"
    "DEFINED"
    "DEFINER"
    "DEGREE"
    "DEPTH"
    "DERIVED"
    "DESC"
    "DESCRIPTION"
    "DESCRIPTOR"
    "DIAGNOSTICS"
    "DISPATCH"
    "DOMAIN"
    "DOW"
    "DOY"
    "DYNAMIC_FUNCTION"
    "DYNAMIC_FUNCTION_CODE"
    "ENCODING"
    "EPOCH"
    "ERROR"
    "EXCEPTION"
    "EXCLUDE"
    "EXCLUDING"
    "FINAL"
    "FIRST"
    "FOLLOWING"
    "FORMAT"
    "FORTRAN"
    "FOUND"
    "FRAC_SECOND"
    "G"
    "GENERAL"
    "GENERATED"
    "GEOMETRY"
    "GO"
    "GOTO"
    "GRANTED"
    "HIERARCHY"
    "HOURS"
    "IGNORE"
    "IMMEDIATE"
    "IMMEDIATELY"
    "IMPLEMENTATION"
    "INCLUDING"
    "INCREMENT"
    "INITIALLY"
    "INPUT"
    "INSTANCE"
    "INSTANTIABLE"
    "INVOKER"
    "ISODOW"
    "ISOLATION"
    "ISOYEAR"
    "JAVA"
    "JSON"
    "K"
    "KEY"
    "KEY_MEMBER"
    "KEY_TYPE"
    "LABEL"
    "LAST"
    "LENGTH"
    "LEVEL"
    "LIBRARY"
    "LOCATOR"
    "M"
    "MAP"
    "MATCHED"
    "MAXVALUE"
    "MESSAGE_LENGTH"
    "MESSAGE_OCTET_LENGTH"
    "MESSAGE_TEXT"
    "MICROSECOND"
    "MILLENNIUM"
    "MILLISECOND"
    "MINUTES"
    "MINVALUE"
    "MONTHS"
    "MORE_"
    "MUMPS"
    "NAME"
    "NAMES"
    "NANOSECOND"
    "NESTING"
    "NORMALIZED"
    "NULLABLE"
    "NULLS"
    "NUMBER"
    "OBJECT"
    "OCTETS"
    "OPTION"
    "OPTIONS"
    "ORDERING"
    "ORDINALITY"
    "OTHERS"
    "OUTPUT"
    "OVERRIDING"
    "PAD"
    "PARAMETER_MODE"
    "PARAMETER_NAME"
    "PARAMETER_ORDINAL_POSITION"
    "PARAMETER_SPECIFIC_CATALOG"
    "PARAMETER_SPECIFIC_NAME"
    "PARAMETER_SPECIFIC_SCHEMA"
    "PARTIAL"
    "PASCAL"
    "PASSING"
    "PASSTHROUGH"
    "PAST"
    "PATH"
    "PLACING"
    "PLAN"
    "PLI"
    "PRECEDING"
    "PRESERVE"
    "PRIOR"
    "PRIVILEGES"
    "PUBLIC"
    "QUARTER"
    "READ"
    "RELATIVE"
    "REPEATABLE"
    "REPLACE"
    "RESPECT"
    "RESTART"
    "RESTRICT"
    "RETURNED_CARDINALITY"
    "RETURNED_LENGTH"
    "RETURNED_OCTET_LENGTH"
    "RETURNED_SQLSTATE"
    "RETURNING"
    "ROLE"
    "ROUTINE"
    "ROUTINE_CATALOG"
    "ROUTINE_NAME"
    "ROUTINE_SCHEMA"
    "ROW_COUNT"
    "SCALAR"
    "SCALE"
    "SCHEMA"
    "SCHEMA_NAME"
    "SCOPE_CATALOGS"
    "SCOPE_NAME"
    "SCOPE_SCHEMA"
    "SECONDS"
    "SECTION"
    "SECURITY"
    "SELF"
    "SEQUENCE"
    "SERIALIZABLE"
    "SERVER"
    "SERVER_NAME"
    "SESSION"
    "SETS"
    "SIMPLE"
    "SIZE"
    "SOURCE"
    "SPACE"
    "SPECIFIC_NAME"
    "SQL_BIGINT"
    "SQL_BINARY"
    "SQL_BIT"
    "SQL_BLOB"
    "SQL_BOOLEAN"
    "SQL_CHAR"
    "SQL_CLOB"
    "SQL_DATE"
    "SQL_DECIMAL"
    "SQL_DOUBLE"
    "SQL_FLOAT"
    "SQL_INTEGER"
    "SQL_INTERVAL_DAY"
    "SQL_INTERVAL_DAY_TO_HOUR"
    "SQL_INTERVAL_DAY_TO_MINUTE"
    "SQL_INTERVAL_DAY_TO_SECOND"
    "SQL_INTERVAL_HOUR"
    "SQL_INTERVAL_HOUR_TO_MINUTE"
    "SQL_INTERVAL_HOUR_TO_SECOND"
    "SQL_INTERVAL_MINUTE"
    "SQL_INTERVAL_MINUTE_TO_SECOND"
    "SQL_INTERVAL_MONTH"
    "SQL_INTERVAL_SECOND"
    "SQL_INTERVAL_YEAR"
    "SQL_INTERVAL_YEAR_TO_MONTH"
    "SQL_LONGVARBINARY"
    "SQL_LONGVARCHAR"
    "SQL_LONGVARNCHAR"
    "SQL_NCHAR"
    "SQL_NCLOB"
    "SQL_NUMERIC"
    "SQL_NVARCHAR"
    "SQL_REAL"
    "SQL_SMALLINT"
    "SQL_TIME"
    "SQL_TIMESTAMP"
    "SQL_TINYINT"
    "SQL_TSI_DAY"
    "SQL_TSI_FRAC_SECOND"
    "SQL_TSI_HOUR"
    "SQL_TSI_MICROSECOND"
    "SQL_TSI_MINUTE"
    "SQL_TSI_MONTH"
    "SQL_TSI_QUARTER"
    "SQL_TSI_SECOND"
    "SQL_TSI_WEEK"
    "SQL_TSI_YEAR"
    "SQL_VARBINARY"
    "SQL_VARCHAR"
    "STATE"
    "STATEMENT"
    "STRUCTURE"
    "STYLE"
    "SUBCLASS_ORIGIN"
    "SUBSTITUTE"
    "TABLE_NAME"
    "TEMPORARY"
    "TIES"
    "TIMESTAMPADD"
    "TIMESTAMPDIFF"
    "TOP_LEVEL_COUNT"
    "TRANSACTION"
    "TRANSACTIONS_ACTIVE"
    "TRANSACTIONS_COMMITTED"
    "TRANSACTIONS_ROLLED_BACK"
    "TRANSFORM"
    "TRANSFORMS"
    "TRIGGER_CATALOG"
    "TRIGGER_NAME"
    "TRIGGER_SCHEMA"
    "TUMBLE"
    "TYPE"
    "UNBOUNDED"
    "UNCOMMITTED"
    "UNCONDITIONAL"
    "UNDER"
    "UNNAMED"
    "USAGE"
    "USER_DEFINED_TYPE_CATALOG"
    "USER_DEFINED_TYPE_CODE"
    "USER_DEFINED_TYPE_NAME"
    "USER_DEFINED_TYPE_SCHEMA"
    "UTF16"
    "UTF32"
    "UTF8"
    "VERSION"
    "VIEW"
    "WEEK"
    "WORK"
    "WRAPPER"
    "WRITE"
    "XML"
    "YEARS"
    "ZONE"
  ]

  # List of non-reserved keywords to add;
  # items in this list become non-reserved
  nonReservedKeywordsToAdd: [
    # not in core, added in Flink
    "CHANGE"
    "COLLECTION"
    "COLUMNS"
    "DBPROPERTIES"
    "DELIMITED"
    "DISABLE"
    "ENABLE"
    "ESCAPED"
    "FIELDS"
    "FILEFORMAT"
    "FORMATTED"
    "IF"
    "INPUTFORMAT"
    "ITEMS"
    "KEYS"
    "LINES"
    "LOCATION"
    "NORELY"
    "NOVALIDATE"
    "OUTPUTFORMAT"
    "OVERWRITE"
    "OWNER"
    "PARTITIONED"
    "RELY"
    "SERDE"
    "SERDEPROPERTIES"
    "STORED"
    "STRUCT"
    "TBLPROPERTIES"
    "TERMINATED"
    "VALIDATE"
  ]

  # List of non-reserved keywords to remove;
  # items in this list become reserved
  nonReservedKeywordsToRemove: [
  ]

  # List of methods for parsing custom SQL statements.
  # Return type of method implementation should be 'SqlNode'.
  # Example: SqlShowDatabases(), SqlShowTables().
  statementParserMethods: [
    "RichSqlInsert()"
    "SqlShowCatalogs()"
    "SqlDescribeCatalog()"
    "SqlUseCatalog()"
    "SqlShowDatabases()"
    "SqlUseDatabase()"
    "SqlAlterDatabase()"
    "SqlDescribeDatabase()"
    "SqlShowTables()"
    "SqlRichDescribeTable()"
    "SqlShowFunctions()"
    "SqlAlterTable()"
  ]

  # List of methods for parsing custom literals.
  # Return type of method implementation should be "SqlNode".
  # Example: ParseJsonLiteral().
  literalParserMethods: [
  ]

  # List of methods for parsing ddl supported data types.
  # Return type of method implementation should be "SqlTypeNameSpec".
  # Example: SqlParseTimeStampZ().
  dataTypeParserMethods: [
    "ExtendedSqlBasicTypeName()"
    "CustomizedCollectionsTypeName()"
    "SqlMapTypeName()"
    "ExtendedSqlRowTypeName()"
  ]

  # List of methods for parsing builtin function calls.
  # Return type of method implementation should be "SqlNode".
  # Example: DateFunctionCall().
  builtinFunctionCallMethods: [
  ]

  # List of methods for parsing extensions to "ALTER <scope>" calls.
  # Each must accept arguments "(SqlParserPos pos, String scope)".
  # Example: "SqlUploadJarNode"
  alterStatementParserMethods: [
  ]

  # List of methods for parsing extensions to "CREATE [OR REPLACE]" calls.
  # Each must accept arguments "(SqlParserPos pos, boolean replace)".
  createStatementParserMethods: [
    "SqlCreateDatabase"
    "SqlCreateTemporary"
    "SqlCreateCatalog"
  ]

  # List of methods for parsing extensions to "DROP" calls.
  # Each must accept arguments "(Span s)".
  dropStatementParserMethods: [
    "SqlDropTable"
    "SqlDropDatabase"
    "SqlDropFunction"
  ]

  # Binary operators tokens
  binaryOperatorsTokens: [
  ]

  # Binary operators initialization
  extraBinaryExpressions: [
  ]

  # List of files in @includes directory that have parser method
  # implementations for parsing custom SQL statements, literals or types
  # given as part of "statementParserMethods", "literalParserMethods" or
  # "dataTypeParserMethods".
  implementationFiles: [
    "parserImpls.ftl"
  ]

  # List of additional join types. Each is a method with no arguments.
  # Example: LeftSemiJoin()
  joinTypes: [
  ]

  includePosixOperators: false
  includeCompoundIdentifier: true
  includeBraces: true
  includeAdditionalDeclarations: false
}
