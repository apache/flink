<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testAggAfterUnionWithMiniBatch">
    <Resource name="sql">
      <![CDATA[
SELECT a, sum(b), count(distinct c)
FROM (
  SELECT * FROM T1
  UNION ALL
  SELECT * FROM T2
) GROUP BY a
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[COUNT(DISTINCT $2)])
+- LogicalUnion(all=[true])
   :- LogicalProject(a=[$0], b=[$1], c=[$2])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(a=[$0], b=[$1], c=[$2])
      +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GlobalGroupAggregate(groupBy=[a], select=[a, SUM(sum$0) AS EXPR$1, COUNT(distinct$0 count$1) AS EXPR$2])
+- Exchange(distribution=[hash[a]])
   +- LocalGroupAggregate(groupBy=[a], select=[a, SUM(b) AS sum$0, COUNT(distinct$0 c) AS count$1, DISTINCT(c) AS distinct$0])
      +- Union(all=[true], union=[a, b, c])
         :- WatermarkAssigner(fields=[a, b, c], miniBatchInterval=[Proctime, 1000ms])
         :  +- TableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
         +- WatermarkAssigner(fields=[a, b, c], miniBatchInterval=[Proctime, 1000ms])
            +- TableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAggOnDifferentTypes">
    <Resource name="sql">
      <![CDATA[
SELECT
  a,
  SUM(CAST(1 as INT)),
  SUM(CAST(2 as BIGINT)),
  SUM(CAST(3 as TINYINT)),
  SUM(CAST(4 as SMALLINT)),
  SUM(CAST(5 as FLOAT)),
  SUM(CAST(6 as DECIMAL)),
  SUM(CAST(7 as DOUBLE))
FROM T GROUP BY a
    ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[SUM($2)], EXPR$3=[SUM($3)], EXPR$4=[SUM($4)], EXPR$5=[SUM($5)], EXPR$6=[SUM($6)], EXPR$7=[SUM($7)]), rowType=[RecordType(INTEGER a, INTEGER EXPR$1, BIGINT EXPR$2, TINYINT EXPR$3, SMALLINT EXPR$4, FLOAT EXPR$5, DECIMAL(38, 0) EXPR$6, DOUBLE EXPR$7)]
+- LogicalProject(a=[$0], $f1=[1], $f2=[2:BIGINT], $f3=[3:TINYINT], $f4=[4:SMALLINT], $f5=[5:FLOAT], $f6=[6:DECIMAL(10, 0)], $f7=[7:DOUBLE]), rowType=[RecordType(INTEGER a, INTEGER $f1, BIGINT $f2, TINYINT $f3, SMALLINT $f4, FLOAT $f5, DECIMAL(10, 0) $f6, DOUBLE $f7)]
   +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]]), rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, BOOLEAN d)]
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[a], select=[a, SUM($f1) AS EXPR$1, SUM($f2) AS EXPR$2, SUM($f3) AS EXPR$3, SUM($f4) AS EXPR$4, SUM($f5) AS EXPR$5, SUM($f6) AS EXPR$6, SUM($f7) AS EXPR$7]), rowType=[RecordType(INTEGER a, INTEGER EXPR$1, BIGINT EXPR$2, TINYINT EXPR$3, SMALLINT EXPR$4, FLOAT EXPR$5, DECIMAL(38, 0) EXPR$6, DOUBLE EXPR$7)]
+- Exchange(distribution=[hash[a]]), rowType=[RecordType(INTEGER a, INTEGER $f1, BIGINT $f2, TINYINT $f3, SMALLINT $f4, FLOAT $f5, DECIMAL(10, 0) $f6, DOUBLE $f7)]
   +- Calc(select=[a, 1 AS $f1, 2:BIGINT AS $f2, 3:TINYINT AS $f3, 4:SMALLINT AS $f4, 5:FLOAT AS $f5, 6:DECIMAL(10, 0) AS $f6, 7:DOUBLE AS $f7]), rowType=[RecordType(INTEGER a, INTEGER $f1, BIGINT $f2, TINYINT $f3, SMALLINT $f4, FLOAT $f5, DECIMAL(10, 0) $f6, DOUBLE $f7)]
      +- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]], fields=[a, b, c, d]), rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, BOOLEAN d)]
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAggWithFilterClause">
    <Resource name="sql">
      <![CDATA[
SELECT
  a,
  SUM(b) FILTER (WHERE c = 'A'),
  COUNT(DISTINCT c) FILTER (WHERE d is true),
  MAX(b)
FROM T GROUP BY a
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1) FILTER $2], EXPR$2=[COUNT(DISTINCT $3) FILTER $4], EXPR$3=[MAX($1)])
+- LogicalProject(a=[$0], b=[$1], $f2=[IS TRUE(=($2, _UTF-16LE'A'))], c=[$2], $f4=[IS TRUE($3)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[a], select=[a, SUM(b) FILTER $f2 AS EXPR$1, COUNT(DISTINCT c) FILTER $f4 AS EXPR$2, MAX(b) AS EXPR$3])
+- Exchange(distribution=[hash[a]])
   +- Calc(select=[a, b, IS TRUE(=(c, _UTF-16LE'A':VARCHAR(2147483647) CHARACTER SET "UTF-16LE")) AS $f2, c, IS TRUE(d) AS $f4])
      +- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]], fields=[a, b, c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAggWithFilterClauseWithLocalGlobal">
    <Resource name="sql">
      <![CDATA[
SELECT
  a,
  SUM(b) FILTER (WHERE c = 'A'),
  COUNT(DISTINCT c) FILTER (WHERE d is true),
  COUNT(DISTINCT c) FILTER (WHERE b = 1),
  MAX(b)
FROM T GROUP BY a
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1) FILTER $2], EXPR$2=[COUNT(DISTINCT $3) FILTER $4], EXPR$3=[COUNT(DISTINCT $3) FILTER $5], EXPR$4=[MAX($1)])
+- LogicalProject(a=[$0], b=[$1], $f2=[IS TRUE(=($2, _UTF-16LE'A'))], c=[$2], $f4=[IS TRUE($3)], $f5=[IS TRUE(=($1, 1))])
   +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GlobalGroupAggregate(groupBy=[a], select=[a, SUM(sum$0) AS EXPR$1, COUNT(distinct$0 count$1) AS EXPR$2, COUNT(distinct$0 count$2) AS EXPR$3, MAX(max$3) AS EXPR$4])
+- Exchange(distribution=[hash[a]])
   +- LocalGroupAggregate(groupBy=[a], select=[a, SUM(b) FILTER $f2 AS sum$0, COUNT(distinct$0 c) FILTER $f4 AS count$1, COUNT(distinct$0 c) FILTER $f5 AS count$2, MAX(b) AS max$3, DISTINCT(c) AS distinct$0])
      +- Calc(select=[a, b, IS TRUE(=(c, _UTF-16LE'A':VARCHAR(2147483647) CHARACTER SET "UTF-16LE")) AS $f2, c, IS TRUE(d) AS $f4, IS TRUE(=(b, 1:BIGINT)) AS $f5])
         +- WatermarkAssigner(fields=[a, b, c, d], miniBatchInterval=[Proctime, 1000ms])
            +- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]], fields=[a, b, c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAggWithMiniBatch">
    <Resource name="sql">
      <![CDATA[SELECT b, COUNT(DISTINCT a), MAX(b), SUM(c)  FROM MyTable GROUP BY b]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[COUNT(DISTINCT $1)], EXPR$2=[MAX($0)], EXPR$3=[SUM($2)])
+- LogicalProject(b=[$1], a=[$0], c=[$2])
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GlobalGroupAggregate(groupBy=[b], select=[b, COUNT(distinct$0 count$0) AS EXPR$1, MAX(max$1) AS EXPR$2, SUM(sum$2) AS EXPR$3])
+- Exchange(distribution=[hash[b]])
   +- LocalGroupAggregate(groupBy=[b], select=[b, COUNT(distinct$0 a) AS count$0, MAX(b) AS max$1, SUM(c) AS sum$2, DISTINCT(a) AS distinct$0])
      +- WatermarkAssigner(fields=[a, b, c], miniBatchInterval=[Proctime, 1000ms])
         +- TableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAvgOnDifferentTypes">
    <Resource name="sql">
      <![CDATA[
SELECT AVG(`byte`),
       AVG(`short`),
       AVG(`int`),
       AVG(`long`),
       AVG(`float`),
       AVG(`double`),
       AVG(`decimal3020`),
       AVG(`decimal105`)
FROM MyTable1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)], EXPR$1=[AVG($1)], EXPR$2=[AVG($2)], EXPR$3=[AVG($3)], EXPR$4=[AVG($4)], EXPR$5=[AVG($5)], EXPR$6=[AVG($6)], EXPR$7=[AVG($7)]), rowType=[RecordType(DOUBLE EXPR$0, DOUBLE EXPR$1, DOUBLE EXPR$2, DOUBLE EXPR$3, DOUBLE EXPR$4, DOUBLE EXPR$5, DECIMAL(38, 20) EXPR$6, DECIMAL(38, 6) EXPR$7)]
+- LogicalProject(byte=[$0], short=[$1], int=[$2], long=[$3], float=[$4], double=[$5], decimal3020=[$11], decimal105=[$12]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(byte, short, int, long, float, double, boolean, string, date, time, timestamp, decimal3020, decimal105)]]]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, BOOLEAN boolean, VARCHAR(2147483647) string, DATE date, TIME(0) time, TIMESTAMP(3) timestamp, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(select=[AVG(byte) AS EXPR$0, AVG(short) AS EXPR$1, AVG(int) AS EXPR$2, AVG(long) AS EXPR$3, AVG(float) AS EXPR$4, AVG(double) AS EXPR$5, AVG(decimal3020) AS EXPR$6, AVG(decimal105) AS EXPR$7]), rowType=[RecordType(DOUBLE EXPR$0, DOUBLE EXPR$1, DOUBLE EXPR$2, DOUBLE EXPR$3, DOUBLE EXPR$4, DOUBLE EXPR$5, DECIMAL(38, 20) EXPR$6, DECIMAL(38, 6) EXPR$7)]
+- Exchange(distribution=[single]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
   +- Calc(select=[byte, short, int, long, float, double, decimal3020, decimal105]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
      +- TableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(byte, short, int, long, float, double, boolean, string, date, time, timestamp, decimal3020, decimal105)]]], fields=[byte, short, int, long, float, double, boolean, string, date, time, timestamp, decimal3020, decimal105]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, BOOLEAN boolean, VARCHAR(2147483647) string, DATE date, TIME(0) time, TIMESTAMP(3) timestamp, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAvgWithRetract">
    <Resource name="sql">
      <![CDATA[SELECT AVG(a) FROM (SELECT AVG(a) AS a FROM T GROUP BY b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
+- LogicalProject(a=[$1])
   +- LogicalAggregate(group=[{0}], a=[AVG($1)])
      +- LogicalProject(b=[$1], a=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(select=[AVG_RETRACT(a) AS EXPR$0], updateAsRetraction=[false], accMode=[Acc])
+- Exchange(distribution=[single], updateAsRetraction=[true], accMode=[AccRetract])
   +- Calc(select=[a], updateAsRetraction=[true], accMode=[AccRetract])
      +- GroupAggregate(groupBy=[b], select=[b, AVG(a) AS a], updateAsRetraction=[true], accMode=[AccRetract])
         +- Exchange(distribution=[hash[b]], updateAsRetraction=[true], accMode=[Acc])
            +- Calc(select=[b, a], updateAsRetraction=[true], accMode=[Acc])
               +- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]], fields=[a, b, c, d], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testGroupByWithoutWindow">
    <Resource name="sql">
      <![CDATA[SELECT COUNT(a) FROM MyTable GROUP BY b]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$1])
+- LogicalAggregate(group=[{0}], EXPR$0=[COUNT($1)])
   +- LogicalProject(b=[$1], a=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- GroupAggregate(groupBy=[b], select=[b, COUNT(a) AS EXPR$0])
   +- Exchange(distribution=[hash[b]])
      +- Calc(select=[b, a])
         +- TableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLocalGlobalAggAfterUnion">
    <Resource name="sql">
      <![CDATA[
SELECT a, SUM(b), COUNT(DISTINCT c)
FROM (
  SELECT * FROM T1
  UNION ALL
  SELECT * FROM T2
) GROUP BY a
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)], EXPR$2=[COUNT(DISTINCT $2)])
+- LogicalUnion(all=[true])
   :- LogicalProject(a=[$0], b=[$1], c=[$2])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(a=[$0], b=[$1], c=[$2])
      +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GlobalGroupAggregate(groupBy=[a], select=[a, SUM(sum$0) AS EXPR$1, COUNT(distinct$0 count$1) AS EXPR$2])
+- Exchange(distribution=[hash[a]])
   +- LocalGroupAggregate(groupBy=[a], select=[a, SUM(b) AS sum$0, COUNT(distinct$0 c) AS count$1, DISTINCT(c) AS distinct$0])
      +- Union(all=[true], union=[a, b, c])
         :- WatermarkAssigner(fields=[a, b, c], miniBatchInterval=[Proctime, 1000ms])
         :  +- TableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
         +- WatermarkAssigner(fields=[a, b, c], miniBatchInterval=[Proctime, 1000ms])
            +- TableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMaxOnDifferentTypes">
    <Resource name="sql">
      <![CDATA[
SELECT MAX(`byte`),
       MAX(`short`),
       MAX(`int`),
       MAX(`long`),
       MAX(`float`),
       MAX(`double`),
       MAX(`decimal3020`),
       MAX(`decimal105`),
       MAX(`boolean`),
       MAX(`date`),
       MAX(`time`),
       MAX(`timestamp`),
       MAX(`string`)
FROM MyTable1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)], EXPR$1=[MAX($1)], EXPR$2=[MAX($2)], EXPR$3=[MAX($3)], EXPR$4=[MAX($4)], EXPR$5=[MAX($5)], EXPR$6=[MAX($6)], EXPR$7=[MAX($7)], EXPR$8=[MAX($8)], EXPR$9=[MAX($9)], EXPR$10=[MAX($10)], EXPR$11=[MAX($11)], EXPR$12=[MAX($12)]), rowType=[RecordType(TINYINT EXPR$0, SMALLINT EXPR$1, INTEGER EXPR$2, BIGINT EXPR$3, FLOAT EXPR$4, DOUBLE EXPR$5, DECIMAL(30, 20) EXPR$6, DECIMAL(10, 5) EXPR$7, BOOLEAN EXPR$8, DATE EXPR$9, TIME(0) EXPR$10, TIMESTAMP(3) EXPR$11, VARCHAR(2147483647) EXPR$12)]
+- LogicalProject(byte=[$0], short=[$1], int=[$2], long=[$3], float=[$4], double=[$5], decimal3020=[$11], decimal105=[$12], boolean=[$6], date=[$8], time=[$9], timestamp=[$10], string=[$7]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105, BOOLEAN boolean, DATE date, TIME(0) time, TIMESTAMP(3) timestamp, VARCHAR(2147483647) string)]
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(byte, short, int, long, float, double, boolean, string, date, time, timestamp, decimal3020, decimal105)]]]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, BOOLEAN boolean, VARCHAR(2147483647) string, DATE date, TIME(0) time, TIMESTAMP(3) timestamp, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(select=[MAX(byte) AS EXPR$0, MAX(short) AS EXPR$1, MAX(int) AS EXPR$2, MAX(long) AS EXPR$3, MAX(float) AS EXPR$4, MAX(double) AS EXPR$5, MAX(decimal3020) AS EXPR$6, MAX(decimal105) AS EXPR$7, MAX(boolean) AS EXPR$8, MAX(date) AS EXPR$9, MAX(time) AS EXPR$10, MAX(timestamp) AS EXPR$11, MAX(string) AS EXPR$12]), rowType=[RecordType(TINYINT EXPR$0, SMALLINT EXPR$1, INTEGER EXPR$2, BIGINT EXPR$3, FLOAT EXPR$4, DOUBLE EXPR$5, DECIMAL(30, 20) EXPR$6, DECIMAL(10, 5) EXPR$7, BOOLEAN EXPR$8, DATE EXPR$9, TIME(0) EXPR$10, TIMESTAMP(3) EXPR$11, VARCHAR(2147483647) EXPR$12)]
+- Exchange(distribution=[single]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, BOOLEAN boolean, VARCHAR(2147483647) string, DATE date, TIME(0) time, TIMESTAMP(3) timestamp, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
   +- TableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(byte, short, int, long, float, double, boolean, string, date, time, timestamp, decimal3020, decimal105)]]], fields=[byte, short, int, long, float, double, boolean, string, date, time, timestamp, decimal3020, decimal105]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, BOOLEAN boolean, VARCHAR(2147483647) string, DATE date, TIME(0) time, TIMESTAMP(3) timestamp, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSum">
    <Resource name="sql">
      <![CDATA[
SELECT SUM(`byte`),
       SUM(`short`),
       SUM(`int`),
       SUM(`long`),
       SUM(`float`),
       SUM(`double`),
       SUM(`decimal3020`),
       SUM(`decimal105`)
FROM MyTable1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)], EXPR$1=[SUM($1)], EXPR$2=[SUM($2)], EXPR$3=[SUM($3)], EXPR$4=[SUM($4)], EXPR$5=[SUM($5)], EXPR$6=[SUM($6)], EXPR$7=[SUM($7)]), rowType=[RecordType(TINYINT EXPR$0, SMALLINT EXPR$1, INTEGER EXPR$2, BIGINT EXPR$3, FLOAT EXPR$4, DOUBLE EXPR$5, DECIMAL(38, 20) EXPR$6, DECIMAL(38, 5) EXPR$7)]
+- LogicalProject(byte=[$0], short=[$1], int=[$2], long=[$3], float=[$4], double=[$5], decimal3020=[$11], decimal105=[$12]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(byte, short, int, long, float, double, boolean, string, date, time, timestamp, decimal3020, decimal105)]]]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, BOOLEAN boolean, VARCHAR(2147483647) string, DATE date, TIME(0) time, TIMESTAMP(3) timestamp, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(select=[SUM(byte) AS EXPR$0, SUM(short) AS EXPR$1, SUM(int) AS EXPR$2, SUM(long) AS EXPR$3, SUM(float) AS EXPR$4, SUM(double) AS EXPR$5, SUM(decimal3020) AS EXPR$6, SUM(decimal105) AS EXPR$7]), rowType=[RecordType(TINYINT EXPR$0, SMALLINT EXPR$1, INTEGER EXPR$2, BIGINT EXPR$3, FLOAT EXPR$4, DOUBLE EXPR$5, DECIMAL(38, 20) EXPR$6, DECIMAL(38, 5) EXPR$7)]
+- Exchange(distribution=[single]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
   +- Calc(select=[byte, short, int, long, float, double, decimal3020, decimal105]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
      +- TableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(byte, short, int, long, float, double, boolean, string, date, time, timestamp, decimal3020, decimal105)]]], fields=[byte, short, int, long, float, double, boolean, string, date, time, timestamp, decimal3020, decimal105]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, BOOLEAN boolean, VARCHAR(2147483647) string, DATE date, TIME(0) time, TIMESTAMP(3) timestamp, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMaxWithRetract">
    <Resource name="sql">
      <![CDATA[SELECT MAX(a) FROM (SELECT MAX(a) AS a FROM T GROUP BY b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
+- LogicalProject(a=[$1])
   +- LogicalAggregate(group=[{0}], a=[MAX($1)])
      +- LogicalProject(b=[$1], a=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(select=[MAX(a) AS EXPR$0], updateAsRetraction=[false], accMode=[Acc])
+- Exchange(distribution=[single], updateAsRetraction=[true], accMode=[AccRetract])
   +- Calc(select=[a], updateAsRetraction=[true], accMode=[AccRetract])
      +- GroupAggregate(groupBy=[b], select=[b, MAX(a) AS a], updateAsRetraction=[true], accMode=[AccRetract])
         +- Exchange(distribution=[hash[b]], updateAsRetraction=[true], accMode=[Acc])
            +- Calc(select=[b, a], updateAsRetraction=[true], accMode=[Acc])
               +- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]], fields=[a, b, c, d], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMinOnDifferentTypes">
    <Resource name="sql">
      <![CDATA[
SELECT MIN(`byte`),
       MIN(`short`),
       MIN(`int`),
       MIN(`long`),
       MIN(`float`),
       MIN(`double`),
       MIN(`decimal3020`),
       MIN(`decimal105`),
       MIN(`boolean`),
       MIN(`date`),
       MIN(`time`),
       MIN(`timestamp`),
       MIN(`string`)
FROM MyTable1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[MIN($0)], EXPR$1=[MIN($1)], EXPR$2=[MIN($2)], EXPR$3=[MIN($3)], EXPR$4=[MIN($4)], EXPR$5=[MIN($5)], EXPR$6=[MIN($6)], EXPR$7=[MIN($7)], EXPR$8=[MIN($8)], EXPR$9=[MIN($9)], EXPR$10=[MIN($10)], EXPR$11=[MIN($11)], EXPR$12=[MIN($12)]), rowType=[RecordType(TINYINT EXPR$0, SMALLINT EXPR$1, INTEGER EXPR$2, BIGINT EXPR$3, FLOAT EXPR$4, DOUBLE EXPR$5, DECIMAL(30, 20) EXPR$6, DECIMAL(10, 5) EXPR$7, BOOLEAN EXPR$8, DATE EXPR$9, TIME(0) EXPR$10, TIMESTAMP(3) EXPR$11, VARCHAR(2147483647) EXPR$12)]
+- LogicalProject(byte=[$0], short=[$1], int=[$2], long=[$3], float=[$4], double=[$5], decimal3020=[$11], decimal105=[$12], boolean=[$6], date=[$8], time=[$9], timestamp=[$10], string=[$7]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105, BOOLEAN boolean, DATE date, TIME(0) time, TIMESTAMP(3) timestamp, VARCHAR(2147483647) string)]
   +- LogicalTableScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(byte, short, int, long, float, double, boolean, string, date, time, timestamp, decimal3020, decimal105)]]]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, BOOLEAN boolean, VARCHAR(2147483647) string, DATE date, TIME(0) time, TIMESTAMP(3) timestamp, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(select=[MIN(byte) AS EXPR$0, MIN(short) AS EXPR$1, MIN(int) AS EXPR$2, MIN(long) AS EXPR$3, MIN(float) AS EXPR$4, MIN(double) AS EXPR$5, MIN(decimal3020) AS EXPR$6, MIN(decimal105) AS EXPR$7, MIN(boolean) AS EXPR$8, MIN(date) AS EXPR$9, MIN(time) AS EXPR$10, MIN(timestamp) AS EXPR$11, MIN(string) AS EXPR$12]), rowType=[RecordType(TINYINT EXPR$0, SMALLINT EXPR$1, INTEGER EXPR$2, BIGINT EXPR$3, FLOAT EXPR$4, DOUBLE EXPR$5, DECIMAL(30, 20) EXPR$6, DECIMAL(10, 5) EXPR$7, BOOLEAN EXPR$8, DATE EXPR$9, TIME(0) EXPR$10, TIMESTAMP(3) EXPR$11, VARCHAR(2147483647) EXPR$12)]
+- Exchange(distribution=[single]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, BOOLEAN boolean, VARCHAR(2147483647) string, DATE date, TIME(0) time, TIMESTAMP(3) timestamp, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
   +- TableSourceScan(table=[[default_catalog, default_database, MyTable1, source: [TestTableSource(byte, short, int, long, float, double, boolean, string, date, time, timestamp, decimal3020, decimal105)]]], fields=[byte, short, int, long, float, double, boolean, string, date, time, timestamp, decimal3020, decimal105]), rowType=[RecordType(TINYINT byte, SMALLINT short, INTEGER int, BIGINT long, FLOAT float, DOUBLE double, BOOLEAN boolean, VARCHAR(2147483647) string, DATE date, TIME(0) time, TIMESTAMP(3) timestamp, DECIMAL(30, 20) decimal3020, DECIMAL(10, 5) decimal105)]
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMinWithRetract">
    <Resource name="sql">
      <![CDATA[SELECT MIN(a) FROM (SELECT MIN(a) AS a FROM T GROUP BY b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
+- LogicalProject(a=[$1])
   +- LogicalAggregate(group=[{0}], a=[MIN($1)])
      +- LogicalProject(b=[$1], a=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(select=[MIN(a) AS EXPR$0], updateAsRetraction=[false], accMode=[Acc])
+- Exchange(distribution=[single], updateAsRetraction=[true], accMode=[AccRetract])
   +- Calc(select=[a], updateAsRetraction=[true], accMode=[AccRetract])
      +- GroupAggregate(groupBy=[b], select=[b, MIN(a) AS a], updateAsRetraction=[true], accMode=[AccRetract])
         +- Exchange(distribution=[hash[b]], updateAsRetraction=[true], accMode=[Acc])
            +- Calc(select=[b, a], updateAsRetraction=[true], accMode=[Acc])
               +- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]], fields=[a, b, c, d], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSumWithRetract">
    <Resource name="sql">
      <![CDATA[SELECT SUM(a) FROM (SELECT SUM(a) AS a FROM T GROUP BY b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
+- LogicalProject(a=[$1])
   +- LogicalAggregate(group=[{0}], a=[SUM($1)])
      +- LogicalProject(b=[$1], a=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(select=[SUM_RETRACT(a) AS EXPR$0], updateAsRetraction=[false], accMode=[Acc])
+- Exchange(distribution=[single], updateAsRetraction=[true], accMode=[AccRetract])
   +- Calc(select=[a], updateAsRetraction=[true], accMode=[AccRetract])
      +- GroupAggregate(groupBy=[b], select=[b, SUM(a) AS a], updateAsRetraction=[true], accMode=[AccRetract])
         +- Exchange(distribution=[hash[b]], updateAsRetraction=[true], accMode=[Acc])
            +- Calc(select=[b, a], updateAsRetraction=[true], accMode=[Acc])
               +- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestTableSource(a, b, c, d)]]], fields=[a, b, c, d], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
</Root>
