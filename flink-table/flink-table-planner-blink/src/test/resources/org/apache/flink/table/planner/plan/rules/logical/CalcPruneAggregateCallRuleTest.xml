<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testEmptyGroupKey_WithMoreThanOneAggCalls1">
    <Resource name="sql">
      <![CDATA[SELECT 1 FROM (SELECT SUM(a1), COUNT(*) FROM T1) t]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(EXPR$0=[1])
+- LogicalAggregate(group=[{}], EXPR$0=[SUM($0)], EXPR$1=[COUNT()])
   +- LogicalProject(a1=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalCalc(expr#0=[{inputs}], expr#1=[1], EXPR$0=[$t1])
+- LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
   +- LogicalCalc(expr#0..3=[{inputs}], a1=[$t0])
      +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testEmptyGroupKey_WithMoreThanOneAggCalls2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T2 WHERE EXISTS (SELECT SUM(a1), COUNT(*) FROM T1)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a2=[$0], b2=[$1], c2=[$2], d2=[$3])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)], EXPR$1=[COUNT()])
  LogicalProject(a1=[$0])
    LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalJoin(condition=[$4], joinType=[semi])
:- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
+- LogicalCalc(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], $f0=[$t1])
   +- LogicalAggregate(group=[{}], m=[MIN($0)])
      +- LogicalCalc(expr#0=[{inputs}], expr#1=[true], i=[$t1])
         +- LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
            +- LogicalCalc(expr#0..3=[{inputs}], a1=[$t0])
               +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testEmptyGroupKey_WithMoreThanOneAggCalls3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T2 WHERE EXISTS (SELECT SUM(a1), COUNT(*) FROM T1 WHERE 1=2)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a2=[$0], b2=[$1], c2=[$2], d2=[$3])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)], EXPR$1=[COUNT()])
  LogicalProject(a1=[$0])
    LogicalFilter(condition=[=(1, 2)])
      LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalJoin(condition=[$4], joinType=[semi])
:- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
+- LogicalCalc(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], $f0=[$t1])
   +- LogicalAggregate(group=[{}], m=[MIN($0)])
      +- LogicalCalc(expr#0=[{inputs}], expr#1=[true], i=[$t1])
         +- LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
            +- LogicalValues(tuples=[[]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testEmptyGroupKey_WithOneAggCall1">
    <Resource name="sql">
      <![CDATA[SELECT 1 FROM (SELECT SUM(a1) FROM T1) t]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(EXPR$0=[1])
+- LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
   +- LogicalProject(a1=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalCalc(expr#0=[{inputs}], expr#1=[1], EXPR$0=[$t1])
+- LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
   +- LogicalCalc(expr#0..3=[{inputs}], a1=[$t0])
      +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testEmptyGroupKey_WithOneAggCall2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T2 WHERE EXISTS (SELECT COUNT(*) FROM T1)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a2=[$0], b2=[$1], c2=[$2], d2=[$3])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalJoin(condition=[$4], joinType=[semi])
:- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
+- LogicalCalc(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], $f0=[$t1])
   +- LogicalAggregate(group=[{}], m=[MIN($0)])
      +- LogicalCalc(expr#0=[{inputs}], expr#1=[true], i=[$t1])
         +- LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
            +- LogicalCalc(expr#0..3=[{inputs}], expr#4=[0], $f0=[$t4])
               +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testEmptyGroupKey_WithOneAggCall3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM T2 WHERE EXISTS (SELECT COUNT(*) FROM T1 WHERE 1=2)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a2=[$0], b2=[$1], c2=[$2], d2=[$3])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalProject($f0=[0])
    LogicalFilter(condition=[=(1, 2)])
      LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalJoin(condition=[$4], joinType=[semi])
:- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
+- LogicalCalc(expr#0=[{inputs}], expr#1=[IS NOT NULL($t0)], $f0=[$t1])
   +- LogicalAggregate(group=[{}], m=[MIN($0)])
      +- LogicalCalc(expr#0=[{inputs}], expr#1=[true], i=[$t1])
         +- LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
            +- LogicalValues(tuples=[[]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneAuxGroupAggCall_WithFilter1">
    <Resource name="sql">
      <![CDATA[
SELECT a1, c1 FROM
 (SELECT a1, b1, COUNT(c1) as c1, SUM(d1) as d1 FROM T1 GROUP BY a1, b1) t
WHERE c1 > 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a1=[$0], c1=[$2])
+- LogicalFilter(condition=[>($2, 10)])
   +- LogicalAggregate(group=[{0, 1}], c1=[COUNT($2)], d1=[SUM($3)])
      +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalCalc(expr#0..1=[{inputs}], expr#2=[10], expr#3=[>($t1, $t2)], proj#0..1=[{exprs}], $condition=[$t3])
+- LogicalAggregate(group=[{0}], c1=[COUNT($2)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneAuxGroupAggCall_WithFilter2">
    <Resource name="sql">
      <![CDATA[
SELECT c1, a1 FROM
 (SELECT a1, b1, COUNT(c1) as c1, SUM(d1) as d1 FROM T1 GROUP BY a1, b1) t
WHERE c1 > 10
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c1=[$2], a1=[$0])
+- LogicalFilter(condition=[>($2, 10)])
   +- LogicalAggregate(group=[{0, 1}], c1=[COUNT($2)], d1=[SUM($3)])
      +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalCalc(expr#0..1=[{inputs}], expr#2=[10], expr#3=[>($t1, $t2)], c1=[$t1], a1=[$t0], $condition=[$t3])
+- LogicalAggregate(group=[{0}], c1=[COUNT($2)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneAuxGroupAggCall_WithoutFilter1">
    <Resource name="sql">
      <![CDATA[
SELECT a1, c1 FROM
 (SELECT a1, b1, COUNT(c1) as c1, SUM(d1) as d1 FROM T1 GROUP BY a1, b1) t
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a1=[$0], c1=[$2])
+- LogicalAggregate(group=[{0, 1}], c1=[COUNT($2)], d1=[SUM($3)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalAggregate(group=[{0}], c1=[COUNT($2)])
+- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneAuxGroupAggCall_WithoutFilter2">
    <Resource name="sql">
      <![CDATA[
SELECT c1, a1 FROM
 (SELECT a1, b1, COUNT(c1) as c1, SUM(d1) as d1 FROM T1 GROUP BY a1, b1) t
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c1=[$2], a1=[$0])
+- LogicalAggregate(group=[{0, 1}], c1=[COUNT($2)], d1=[SUM($3)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalCalc(expr#0..1=[{inputs}], c1=[$t1], a1=[$t0])
+- LogicalAggregate(group=[{0}], c1=[COUNT($2)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1, d1)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneRegularAggCall_WithFilter1">
    <Resource name="sql">
      <![CDATA[
SELECT a2, b2, d2 FROM
 (SELECT a2, b2, COUNT(c2) as c2, SUM(d2) as d2 FROM T2 GROUP BY a2, b2) t
WHERE d2 > 0
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a2=[$0], b2=[$1], d2=[$3])
+- LogicalFilter(condition=[>($3, 0)])
   +- LogicalAggregate(group=[{0, 1}], c2=[COUNT($2)], d2=[SUM($3)])
      +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalCalc(expr#0..2=[{inputs}], expr#3=[0], expr#4=[>($t2, $t3)], proj#0..2=[{exprs}], $condition=[$t4])
+- LogicalAggregate(group=[{0, 1}], d2=[SUM($3)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneRegularAggCall_WithFilter2">
    <Resource name="sql">
      <![CDATA[
SELECT b2, a2, d2 FROM
 (SELECT a2, b2, COUNT(c2) as c2, SUM(d2) as d2 FROM T2 GROUP BY a2, b2) t
WHERE d2 > 0
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b2=[$1], a2=[$0], d2=[$3])
+- LogicalFilter(condition=[>($3, 0)])
   +- LogicalAggregate(group=[{0, 1}], c2=[COUNT($2)], d2=[SUM($3)])
      +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalCalc(expr#0..2=[{inputs}], expr#3=[0], expr#4=[>($t2, $t3)], b2=[$t1], a2=[$t0], d2=[$t2], $condition=[$t4])
+- LogicalAggregate(group=[{0, 1}], d2=[SUM($3)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneRegularAggCall_WithoutFilter1">
    <Resource name="sql">
      <![CDATA[
SELECT a2, b2, d2 FROM
 (SELECT a2, b2, COUNT(c2) as c2, SUM(d2) as d2 FROM T2 GROUP BY a2, b2) t
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a2=[$0], b2=[$1], d2=[$3])
+- LogicalAggregate(group=[{0, 1}], c2=[COUNT($2)], d2=[SUM($3)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalAggregate(group=[{0, 1}], d2=[SUM($3)])
+- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneRegularAggCall_WithoutFilter2">
    <Resource name="sql">
      <![CDATA[
SELECT b2, a2, d2 FROM
 (SELECT a2, b2, COUNT(c2) as c2, SUM(d2) as d2 FROM T2 GROUP BY a2, b2) t
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b2=[$1], a2=[$0], d2=[$3])
+- LogicalAggregate(group=[{0, 1}], c2=[COUNT($2)], d2=[SUM($3)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalCalc(expr#0..2=[{inputs}], b2=[$t1], a2=[$t0], d2=[$t2])
+- LogicalAggregate(group=[{0, 1}], d2=[SUM($3)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneRegularAggCall_WithoutFilter3">
    <Resource name="sql">
      <![CDATA[
SELECT a2 as a, b2, d2 FROM
 (SELECT a2, b2, COUNT(c2) as c2, SUM(d2) as d2 FROM T2 GROUP BY a2, b2) t
      ]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b2=[$1], d2=[$3])
+- LogicalAggregate(group=[{0, 1}], c2=[COUNT($2)], d2=[SUM($3)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalCalc(expr#0..2=[{inputs}], proj#0..2=[{exprs}])
+- LogicalAggregate(group=[{0, 1}], d2=[SUM($3)])
   +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2, d2)]]])
]]>
    </Resource>
  </TestCase>
</Root>
