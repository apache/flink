<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testJoinWithEquiProcTime">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b FROM MyTable t1, MyTable2 t2 WHERE
  t1.a = t2.a AND t1.proctime = t2.proctime
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalFilter(condition=[AND(=($0, $5), =($3, $8))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[MyTable]])
      +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- WindowJoin(joinType=[InnerJoin], windowBounds=[isRowTime=false, leftLowerBound=0, leftUpperBound=0, leftTimeIndex=1, rightTimeIndex=2], where=[AND(=(a, a0), =(proctime, proctime0))], select=[a, proctime, a0, b, proctime0])
   :- Exchange(distribution=[hash[a, proctime]])
   :  +- Calc(select=[a, proctime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a, proctime]])
      +- Calc(select=[a, b, proctime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinWithEquiRowTime">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b FROM MyTable t1, MyTable2 t2 WHERE
  t1.a = t2.a AND t1.rowtime = t2.rowtime
        ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalFilter(condition=[AND(=($0, $5), =($4, $9))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[MyTable]])
      +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- WindowJoin(joinType=[InnerJoin], windowBounds=[isRowTime=true, leftLowerBound=0, leftUpperBound=0, leftTimeIndex=1, rightTimeIndex=2], where=[AND(=(a, a0), =(rowtime, rowtime0))], select=[a, rowtime, a0, b, rowtime0])
   :- Exchange(distribution=[hash[a, rowtime]])
   :  +- Calc(select=[a, rowtime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a, rowtime]])
      +- Calc(select=[a, b, rowtime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinWithNullLiteral">
    <Resource name="sql">
      <![CDATA[
WITH T1 AS (SELECT a, b, c, proctime, CAST(null AS BIGINT) AS nullField FROM MyTable),
     T2 AS (SELECT a, b, c, proctime, CAST(12 AS BIGINT) AS nullField FROM MyTable2)

SELECT t2.a, t2.c, t1.c
FROM T1 AS t1
JOIN T2 AS t2 ON t1.a = t2.a AND t1.nullField = t2.nullField AND
  t1.proctime BETWEEN t2.proctime - INTERVAL '5' SECOND AND
  t2.proctime + INTERVAL '5' SECOND
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$5], c=[$7], c0=[$2])
+- LogicalJoin(condition=[AND(=($0, $5), =($4, $9), >=($3, -($8, 5000)), <=($3, +($8, 5000)))], joinType=[inner])
   :- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], nullField=[null])
   :  +- LogicalTableScan(table=[[MyTable]])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], nullField=[12])
      +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Values(tuples=[[]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testOuterJoinOpt">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b
FROM MyTable t1 FULL OUTER JOIN MyTable2 t2 ON
  t1.a = t2.a AND
  t1.rowtime BETWEEN t2.rowtime - INTERVAL '10' SECOND AND t2.rowtime + INTERVAL '1' HOUR
  WHERE t1.b LIKE t2.b
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalFilter(condition=[LIKE($1, $6)])
   +- LogicalJoin(condition=[AND(=($0, $5), >=($4, -($9, 10000)), <=($4, +($9, 3600000)))], joinType=[full])
      :- LogicalTableScan(table=[[MyTable]])
      +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b0 AS b])
+- WindowJoin(joinType=[InnerJoin], windowBounds=[isRowTime=true, leftLowerBound=-10000, leftUpperBound=3600000, leftTimeIndex=2, rightTimeIndex=2], where=[AND(=(a, a0), >=(rowtime, -(rowtime0, 10000)), <=(rowtime, +(rowtime0, 3600000)), LIKE(b, b0))], select=[a, b, rowtime, a0, b0, rowtime0])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, b, rowtime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, rowtime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProcessingTimeInnerJoinWithOnClause">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b FROM MyTable t1 JOIN MyTable2 t2 ON
    t1.a = t2.a AND
    t1.proctime BETWEEN t2.proctime - INTERVAL '1' HOUR AND t2.proctime + INTERVAL '1' HOUR
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalJoin(condition=[AND(=($0, $5), >=($3, -($8, 3600000)), <=($3, +($8, 3600000)))], joinType=[inner])
   :- LogicalTableScan(table=[[MyTable]])
   +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- WindowJoin(joinType=[InnerJoin], windowBounds=[isRowTime=false, leftLowerBound=-3600000, leftUpperBound=3600000, leftTimeIndex=1, rightTimeIndex=2], where=[AND(=(a, a0), >=(proctime, -(proctime0, 3600000)), <=(proctime, +(proctime0, 3600000)))], select=[a, proctime, a0, b, proctime0])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, proctime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, proctime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProcessingTimeInnerJoinWithWhereClause">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b FROM MyTable t1, MyTable2 t2 WHERE
    t1.a = t2.a AND
    t1.proctime BETWEEN t2.proctime - INTERVAL '1' HOUR AND t2.proctime + INTERVAL '1' HOUR
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalFilter(condition=[AND(=($0, $5), >=($3, -($8, 3600000)), <=($3, +($8, 3600000)))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[MyTable]])
      +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- WindowJoin(joinType=[InnerJoin], windowBounds=[isRowTime=false, leftLowerBound=-3600000, leftUpperBound=3600000, leftTimeIndex=1, rightTimeIndex=2], where=[AND(=(a, a0), >=(proctime, -(proctime0, 3600000)), <=(proctime, +(proctime0, 3600000)))], select=[a, proctime, a0, b, proctime0])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, proctime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, proctime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowTimeInnerJoinAndWindowAggregationOnFirst">
    <Resource name="sql">
      <![CDATA[
SELECT t1.b, SUM(t2.a) AS aSum, COUNT(t2.b) AS bCnt
FROM MyTable t1, MyTable2 t2
WHERE t1.a = t2.a AND
  t1.rowtime BETWEEN t2.rowtime - INTERVAL '10' MINUTE AND t2.rowtime + INTERVAL '1' HOUR
GROUP BY TUMBLE(t1.rowtime, INTERVAL '6' HOUR), t1.b
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1], aSum=[$2], bCnt=[$3])
+- LogicalAggregate(group=[{0, 1}], aSum=[SUM($2)], bCnt=[COUNT($3)])
   +- LogicalProject($f0=[TUMBLE($4, 21600000)], b=[$1], a0=[$5], b0=[$6])
      +- LogicalFilter(condition=[AND(=($0, $5), >=($4, -($9, 600000)), <=($4, +($9, 3600000)))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalTableScan(table=[[MyTable]])
            +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, aSum, bCnt])
+- GroupAggregate(groupBy=[$f0, b], select=[$f0, b, SUM(a0) AS aSum, COUNT(b0) AS bCnt])
   +- Exchange(distribution=[hash[$f0, b]])
      +- Calc(select=[TUMBLE(rowtime, 21600000) AS $f0, b, a0, b0])
         +- WindowJoin(joinType=[InnerJoin], windowBounds=[isRowTime=true, leftLowerBound=-600000, leftUpperBound=3600000, leftTimeIndex=2, rightTimeIndex=2], where=[AND(=(a, a0), >=(rowtime, -(rowtime0, 600000)), <=(rowtime, +(rowtime0, 3600000)))], select=[a, b, rowtime, a0, b0, rowtime0])
            :- Exchange(distribution=[hash[a]])
            :  +- Calc(select=[a, b, rowtime])
            :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
            +- Exchange(distribution=[hash[a]])
               +- Calc(select=[a, b, rowtime])
                  +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProcTimeFullOuterJoin">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b
FROM MyTable t1 Full OUTER JOIN MyTable2 t2 ON
  t1.a = t2.a AND
  t1.proctime BETWEEN t2.proctime - INTERVAL '1' HOUR AND t2.proctime + INTERVAL '1' HOUR
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalJoin(condition=[AND(=($0, $5), >=($3, -($8, 3600000)), <=($3, +($8, 3600000)))], joinType=[full])
   :- LogicalTableScan(table=[[MyTable]])
   +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- WindowJoin(joinType=[FullOuterJoin], windowBounds=[isRowTime=false, leftLowerBound=-3600000, leftUpperBound=3600000, leftTimeIndex=1, rightTimeIndex=2], where=[AND(=(a, a0), >=(proctime, -(proctime0, 3600000)), <=(proctime, +(proctime0, 3600000)))], select=[a, proctime, a0, b, proctime0])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, proctime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, proctime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProcTimeRightOuterJoin">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b
FROM MyTable t1 RIGHT OUTER JOIN MyTable2 t2 ON
  t1.a = t2.a AND
  t1.proctime BETWEEN t2.proctime - INTERVAL '1' HOUR AND t2.proctime + INTERVAL '1' HOUR
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalJoin(condition=[AND(=($0, $5), >=($3, -($8, 3600000)), <=($3, +($8, 3600000)))], joinType=[right])
   :- LogicalTableScan(table=[[MyTable]])
   +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- WindowJoin(joinType=[RightOuterJoin], windowBounds=[isRowTime=false, leftLowerBound=-3600000, leftUpperBound=3600000, leftTimeIndex=1, rightTimeIndex=2], where=[AND(=(a, a0), >=(proctime, -(proctime0, 3600000)), <=(proctime, +(proctime0, 3600000)))], select=[a, proctime, a0, b, proctime0])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, proctime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, proctime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProcTimeLeftOuterJoin">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b
FROM MyTable t1 LEFT OUTER JOIN MyTable2 t2 ON
  t1.a = t2.a AND
  t1.proctime BETWEEN t2.proctime - INTERVAL '1' HOUR AND t2.proctime + INTERVAL '1' HOUR
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalJoin(condition=[AND(=($0, $5), >=($3, -($8, 3600000)), <=($3, +($8, 3600000)))], joinType=[left])
   :- LogicalTableScan(table=[[MyTable]])
   +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- WindowJoin(joinType=[LeftOuterJoin], windowBounds=[isRowTime=false, leftLowerBound=-3600000, leftUpperBound=3600000, leftTimeIndex=1, rightTimeIndex=2], where=[AND(=(a, a0), >=(proctime, -(proctime0, 3600000)), <=(proctime, +(proctime0, 3600000)))], select=[a, proctime, a0, b, proctime0])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, proctime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, proctime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowTimeRightOuterJoin">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b
FROM MyTable t1 RIGHT OUTER JOIN MyTable2 t2 ON
  t1.a = t2.a AND
  t1.rowtime BETWEEN t2.rowtime - INTERVAL '10' SECOND AND t2.rowtime + INTERVAL '1' HOUR
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalJoin(condition=[AND(=($0, $5), >=($4, -($9, 10000)), <=($4, +($9, 3600000)))], joinType=[right])
   :- LogicalTableScan(table=[[MyTable]])
   +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- WindowJoin(joinType=[RightOuterJoin], windowBounds=[isRowTime=true, leftLowerBound=-10000, leftUpperBound=3600000, leftTimeIndex=1, rightTimeIndex=2], where=[AND(=(a, a0), >=(rowtime, -(rowtime0, 10000)), <=(rowtime, +(rowtime0, 3600000)))], select=[a, rowtime, a0, b, rowtime0])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, rowtime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, rowtime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowTimeFullOuterJoin">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b
FROM MyTable t1 FULL OUTER JOIN MyTable2 t2 ON
  t1.a = t2.a AND
  t1.rowtime BETWEEN t2.rowtime - INTERVAL '10' SECOND AND t2.rowtime + INTERVAL '1' HOUR
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalJoin(condition=[AND(=($0, $5), >=($4, -($9, 10000)), <=($4, +($9, 3600000)))], joinType=[full])
   :- LogicalTableScan(table=[[MyTable]])
   +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- WindowJoin(joinType=[FullOuterJoin], windowBounds=[isRowTime=true, leftLowerBound=-10000, leftUpperBound=3600000, leftTimeIndex=1, rightTimeIndex=2], where=[AND(=(a, a0), >=(rowtime, -(rowtime0, 10000)), <=(rowtime, +(rowtime0, 3600000)))], select=[a, rowtime, a0, b, rowtime0])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, rowtime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, rowtime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowTimeInnerJoinAndWindowAggregationOnSecond">
    <Resource name="sql">
      <![CDATA[
SELECT t2.b, SUM(t1.a) AS aSum, COUNT(t1.b) AS bCnt
FROM MyTable t1, MyTable2 t2
WHERE t1.a = t2.a AND
  t1.rowtime BETWEEN t2.rowtime - INTERVAL '10' MINUTE AND t2.rowtime + INTERVAL '1' HOUR
GROUP BY TUMBLE(t2.rowtime, INTERVAL '6' HOUR), t2.b
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1], aSum=[$2], bCnt=[$3])
+- LogicalAggregate(group=[{0, 1}], aSum=[SUM($2)], bCnt=[COUNT($3)])
   +- LogicalProject($f0=[TUMBLE($9, 21600000)], b=[$6], a=[$0], $f3=[$1])
      +- LogicalFilter(condition=[AND(=($0, $5), >=($4, -($9, 600000)), <=($4, +($9, 3600000)))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalTableScan(table=[[MyTable]])
            +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, aSum, bCnt])
+- GroupAggregate(groupBy=[$f0, b], select=[$f0, b, SUM(a) AS aSum, COUNT($f3) AS bCnt])
   +- Exchange(distribution=[hash[$f0, b]])
      +- Calc(select=[TUMBLE(rowtime0, 21600000) AS $f0, b0 AS b, a, b AS $f3])
         +- WindowJoin(joinType=[InnerJoin], windowBounds=[isRowTime=true, leftLowerBound=-600000, leftUpperBound=3600000, leftTimeIndex=2, rightTimeIndex=2], where=[AND(=(a, a0), >=(rowtime, -(rowtime0, 600000)), <=(rowtime, +(rowtime0, 3600000)))], select=[a, b, rowtime, a0, b0, rowtime0])
            :- Exchange(distribution=[hash[a]])
            :  +- Calc(select=[a, b, rowtime])
            :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
            +- Exchange(distribution=[hash[a]])
               +- Calc(select=[a, b, rowtime])
                  +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowTimeInnerJoinWithWhereClause">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b FROM MyTable t1, MyTable2 t2 WHERE
  t1.a = t2.a AND
  t1.rowtime BETWEEN t2.rowtime - INTERVAL '10' MINUTE AND t2.rowtime + INTERVAL '1' HOUR
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalFilter(condition=[AND(=($0, $5), >=($4, -($9, 600000)), <=($4, +($9, 3600000)))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[MyTable]])
      +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- WindowJoin(joinType=[InnerJoin], windowBounds=[isRowTime=true, leftLowerBound=-600000, leftUpperBound=3600000, leftTimeIndex=1, rightTimeIndex=2], where=[AND(=(a, a0), >=(rowtime, -(rowtime0, 600000)), <=(rowtime, +(rowtime0, 3600000)))], select=[a, rowtime, a0, b, rowtime0])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, rowtime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, rowtime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowTimeInnerJoinWithOnClause">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b FROM MyTable t1 JOIN MyTable2 t2 ON
  t1.a = t2.a AND
  t1.rowtime BETWEEN t2.rowtime - INTERVAL '10' SECOND AND t2.rowtime + INTERVAL '1' HOUR
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalJoin(condition=[AND(=($0, $5), >=($4, -($9, 10000)), <=($4, +($9, 3600000)))], joinType=[inner])
   :- LogicalTableScan(table=[[MyTable]])
   +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- WindowJoin(joinType=[InnerJoin], windowBounds=[isRowTime=true, leftLowerBound=-10000, leftUpperBound=3600000, leftTimeIndex=1, rightTimeIndex=2], where=[AND(=(a, a0), >=(rowtime, -(rowtime0, 10000)), <=(rowtime, +(rowtime0, 3600000)))], select=[a, rowtime, a0, b, rowtime0])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, rowtime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, rowtime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowTimeLeftOuterJoin">
    <Resource name="sql">
      <![CDATA[
SELECT t1.a, t2.b
FROM MyTable t1 LEFT OUTER JOIN MyTable2 t2 ON
  t1.a = t2.a AND
  t1.rowtime BETWEEN t2.rowtime - INTERVAL '10' SECOND AND t2.rowtime + INTERVAL '1' HOUR
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$6])
+- LogicalJoin(condition=[AND(=($0, $5), >=($4, -($9, 10000)), <=($4, +($9, 3600000)))], joinType=[left])
   :- LogicalTableScan(table=[[MyTable]])
   +- LogicalTableScan(table=[[MyTable2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b])
+- WindowJoin(joinType=[LeftOuterJoin], windowBounds=[isRowTime=true, leftLowerBound=-10000, leftUpperBound=3600000, leftTimeIndex=1, rightTimeIndex=2], where=[AND(=(a, a0), >=(rowtime, -(rowtime0, 10000)), <=(rowtime, +(rowtime0, 3600000)))], select=[a, rowtime, a0, b, rowtime0])
   :- Exchange(distribution=[hash[a]])
   :  +- Calc(select=[a, rowtime])
   :     +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- Calc(select=[a, b, rowtime])
         +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
</Root>
