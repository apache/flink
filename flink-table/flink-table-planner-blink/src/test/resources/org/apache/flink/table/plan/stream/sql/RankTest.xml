<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testRankEndLessThan1">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, c,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY b DESC) as row_num
  FROM MyTable)
WHERE row_num <= 1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c, w0$o0])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[b DESC], select=[a, b, c, proctime, rowtime, w0$o0])
   +- Exchange(distribution=[hash[a]])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRankFunctionInMiddle">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM (
 SELECT a, RANK() OVER (PARTITION BY a ORDER BY a) rk, b, c FROM MyTable) t
WHERE rk < 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], rk=[$1], b=[$2], c=[$3])
+- LogicalFilter(condition=[<($1, 10)])
   +- LogicalProject(a=[$0], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)], b=[$1], c=[$2])
      +- LogicalTableScan(table=[[MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, rk, b, c])
+- Rank(strategy=[AppendFastStrategy], rankType=[RANK], rankRange=[rankStart=1, rankEnd=9], partitionBy=[a], orderBy=[a ASC], select=[a, b, c, proctime, rowtime, rk])
   +- Exchange(distribution=[hash[a]])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRankWithRankEndLessThan1OrderByProctimeAsc">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT a, b, c, proctime,
       RANK() OVER (PARTITION BY a ORDER BY proctime ASC) as rk
  FROM MyTable)
WHERE rk <= 1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $3 NULLS FIRST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c])
+- Rank(strategy=[AppendFastStrategy], rankType=[RANK], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[proctime ASC], select=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowNumberWithRankEndLessThan1OrderByRowtimeAsc">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT a, b, c, rowtime,
       ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime ASC) as row_num
  FROM MyTable)
WHERE row_num <= 1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], rowtime=[$4], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[rowtime ASC], select=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRankWithRankEndLessThan1OrderByProctimeDesc">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT a, b, c, proctime,
       RANK() OVER (PARTITION BY a ORDER BY proctime DESC) as rk
  FROM MyTable)
WHERE rk <= 1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c])
+- Rank(strategy=[AppendFastStrategy], rankType=[RANK], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[proctime DESC], select=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowNumberWithRankEndLessThan1OrderByProctimeAsc">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT a, b, c, proctime,
       ROW_NUMBER() OVER (PARTITION BY a ORDER BY proctime ASC) as row_num
  FROM MyTable)
WHERE row_num <= 1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c])
+- Deduplicate(keepLastRow=[false], key=[a], order=[PROCTIME])
   +- Exchange(distribution=[hash[a]])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowNumberWithRankEndLessThan1OrderByProctimeDesc">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT a, b, c, proctime,
       ROW_NUMBER() OVER (PARTITION BY a ORDER BY proctime DESC) as row_num
  FROM MyTable)
WHERE row_num <= 1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c])
+- Deduplicate(keepLastRow=[true], key=[a], order=[PROCTIME])
   +- Exchange(distribution=[hash[a]])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowNumberWithRankEndLessThan1OrderByRowtimeDesc">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, c
FROM (
  SELECT a, b, c, rowtime,
       ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime DESC) as row_num
  FROM MyTable)
WHERE row_num <= 1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], rowtime=[$4], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $4 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[rowtime DESC], select=[a, b, c, proctime, rowtime])
   +- Exchange(distribution=[hash[a]])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopN2">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, c,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY b DESC) as row_num
  FROM MyTable)
WHERE 10 >= row_num
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[$3])
+- LogicalFilter(condition=[>=(10, $3)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c, w0$o0], updateAsRetraction=[false], accMode=[Acc])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a], orderBy=[b DESC], select=[a, b, c, proctime, rowtime, w0$o0], updateAsRetraction=[false], accMode=[Acc])
   +- Exchange(distribution=[hash[a]], updateAsRetraction=[false], accMode=[Acc])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime], updateAsRetraction=[false], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopN">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, c,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY b DESC) as row_num
  FROM MyTable)
WHERE row_num <= 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c, w0$o0], updateAsRetraction=[false], accMode=[Acc])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a], orderBy=[b DESC], select=[a, b, c, proctime, rowtime, w0$o0], updateAsRetraction=[false], accMode=[Acc])
   +- Exchange(distribution=[hash[a]], updateAsRetraction=[false], accMode=[Acc])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime], updateAsRetraction=[false], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNWithFilter">
    <Resource name="sql">
      <![CDATA[
SELECT row_num, a, c
FROM (
  SELECT a, b, c,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY b DESC) as row_num
  FROM MyTable
  WHERE c > 1000)
WHERE row_num <= 10 AND b IS NOT NULL
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(row_num=[$3], a=[$0], c=[$2])
+- LogicalFilter(condition=[AND(<=($3, 10), IS NOT NULL($1))])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalFilter(condition=[>($2, 1000)])
         +- LogicalTableScan(table=[[MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[row_num, a, c], where=[IS NOT NULL(b)], updateAsRetraction=[false], accMode=[Acc])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a], orderBy=[b DESC], select=[a, b, c, proctime, rowtime, row_num], updateAsRetraction=[false], accMode=[Acc])
   +- Exchange(distribution=[hash[a]], updateAsRetraction=[false], accMode=[Acc])
      +- Calc(select=[a, b, c, proctime, rowtime], where=[>(c, 1000)], updateAsRetraction=[false], accMode=[Acc])
         +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime], updateAsRetraction=[false], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTopNth">
    <Resource name="sql">
      <![CDATA[
SELECT *
FROM (
  SELECT a, b, c,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY b DESC) as row_num
  FROM MyTable)
WHERE row_num = 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[$3])
+- LogicalFilter(condition=[=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], row_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $1 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c, w0$o0], updateAsRetraction=[false], accMode=[Acc])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=10, rankEnd=10], partitionBy=[a], orderBy=[b DESC], select=[a, b, c, proctime, rowtime, w0$o0], updateAsRetraction=[false], accMode=[Acc])
   +- Exchange(distribution=[hash[a]], updateAsRetraction=[false], accMode=[Acc])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime], updateAsRetraction=[false], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
</Root>
