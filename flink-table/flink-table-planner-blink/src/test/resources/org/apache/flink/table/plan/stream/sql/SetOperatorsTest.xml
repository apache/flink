<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testIntersect">
    <Resource name="sql">
      <![CDATA[SELECT c FROM T1 INTERSECT SELECT f FROM T2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalIntersect(all=[false])
:- LogicalProject(c=[$2])
:  +- LogicalTableScan(table=[[T1, source: [TestTableSource(a, b, c)]]])
+- LogicalProject(f=[$2])
   +- LogicalTableScan(table=[[T2, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[c], select=[c])
+- Exchange(distribution=[hash[c]])
   +- Join(joinType=[LeftSemiJoin], where=[OR(=(c, f), AND(IS NULL(c), IS NULL(f)))], select=[c])
      :- Exchange(distribution=[hash[c]])
      :  +- Calc(select=[c])
      :     +- TableSourceScan(table=[[T1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
      +- Exchange(distribution=[hash[f]])
         +- Calc(select=[f])
            +- TableSourceScan(table=[[T2, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testIntersectLeftIsEmpty">
    <Resource name="sql">
      <![CDATA[SELECT c FROM T1 WHERE 1=0 INTERSECT SELECT f FROM T2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalIntersect(all=[false])
:- LogicalProject(c=[$2])
:  +- LogicalFilter(condition=[=(1, 0)])
:     +- LogicalTableScan(table=[[T1, source: [TestTableSource(a, b, c)]]])
+- LogicalProject(f=[$2])
   +- LogicalTableScan(table=[[T2, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Values(tuples=[[]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testIntersectRightIsEmpty">
    <Resource name="sql">
      <![CDATA[SELECT c FROM T1 INTERSECT SELECT f FROM T2 WHERE 1=0]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalIntersect(all=[false])
:- LogicalProject(c=[$2])
:  +- LogicalTableScan(table=[[T1, source: [TestTableSource(a, b, c)]]])
+- LogicalProject(f=[$2])
   +- LogicalFilter(condition=[=(1, 0)])
      +- LogicalTableScan(table=[[T2, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Values(tuples=[[]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMinus">
    <Resource name="sql">
      <![CDATA[SELECT c FROM T1 EXCEPT SELECT f FROM T2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalMinus(all=[false])
:- LogicalProject(c=[$2])
:  +- LogicalTableScan(table=[[T1, source: [TestTableSource(a, b, c)]]])
+- LogicalProject(f=[$2])
   +- LogicalTableScan(table=[[T2, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[c], select=[c])
+- Exchange(distribution=[hash[c]])
   +- Join(joinType=[LeftAntiJoin], where=[OR(=(c, f), AND(IS NULL(c), IS NULL(f)))], select=[c])
      :- Exchange(distribution=[hash[c]])
      :  +- Calc(select=[c])
      :     +- TableSourceScan(table=[[T1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
      +- Exchange(distribution=[hash[f]])
         +- Calc(select=[f])
            +- TableSourceScan(table=[[T2, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMinusLeftIsEmpty">
    <Resource name="sql">
      <![CDATA[SELECT c FROM T1 WHERE 1=0 EXCEPT SELECT f FROM T2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalMinus(all=[false])
:- LogicalProject(c=[$2])
:  +- LogicalFilter(condition=[=(1, 0)])
:     +- LogicalTableScan(table=[[T1, source: [TestTableSource(a, b, c)]]])
+- LogicalProject(f=[$2])
   +- LogicalTableScan(table=[[T2, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Values(tuples=[[]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMinusRightIsEmpty">
    <Resource name="sql">
      <![CDATA[SELECT c FROM T1 EXCEPT SELECT f FROM T2 WHERE 1=0]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalMinus(all=[false])
:- LogicalProject(c=[$2])
:  +- LogicalTableScan(table=[[T1, source: [TestTableSource(a, b, c)]]])
+- LogicalProject(f=[$2])
   +- LogicalFilter(condition=[=(1, 0)])
      +- LogicalTableScan(table=[[T2, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[c], select=[c])
+- Exchange(distribution=[hash[c]])
   +- Calc(select=[c])
      +- TableSourceScan(table=[[T1, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMinusWithNestedTypes">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable EXCEPT SELECT * FROM MyTable]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalMinus(all=[false])
:- LogicalProject(a=[$0], b=[$1], c=[$2])
:  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[a, b, c], select=[a, b, c])
+- Exchange(distribution=[hash[a, b, c]])
   +- Join(joinType=[LeftAntiJoin], where=[AND(OR(=(a, a0), AND(IS NULL(a), IS NULL(a0))), OR(=(b, b0), AND(IS NULL(b), IS NULL(b0))), OR(=(c, c0), AND(IS NULL(c), IS NULL(c0))))], select=[a, b, c])
      :- Exchange(distribution=[hash[a, b, c]], reuse_id=[1])
      :  +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
      +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnionNullableTypes">
    <Resource name="sql">
      <![CDATA[SELECT a FROM A UNION ALL SELECT CASE WHEN c > 0 THEN b ELSE NULL END FROM A]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(a=[$0])
:  +- LogicalTableScan(table=[[A, source: [TestTableSource(a, b, c)]]])
+- LogicalProject(EXPR$0=[CASE(>($2, 0), $1, null:RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) CHARACTER SET "UTF-16LE" _2))])
   +- LogicalTableScan(table=[[A, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Union(all=[true], union=[a])
:- Calc(select=[a])
:  +- TableSourceScan(table=[[A, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], reuse_id=[1])
+- Calc(select=[CASE(>(c, 0), b, null:RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) CHARACTER SET "UTF-16LE" _2)) AS EXPR$0])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnionAnyType">
    <Resource name="sql">
      <![CDATA[SELECT a FROM A UNION ALL SELECT b FROM A]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalUnion(all=[true])
:- LogicalProject(a=[$0])
:  +- LogicalTableScan(table=[[A, source: [TestTableSource(a, b)]]])
+- LogicalProject(b=[$1])
   +- LogicalTableScan(table=[[A, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Union(all=[true], union=[a])
:- Calc(select=[a])
:  +- TableSourceScan(table=[[A, source: [TestTableSource(a, b)]]], fields=[a, b], reuse_id=[1])
+- Calc(select=[b])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
</Root>
