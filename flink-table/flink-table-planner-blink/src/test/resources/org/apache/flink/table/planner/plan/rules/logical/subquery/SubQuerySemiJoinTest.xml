<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testExistsWithCorrelatedOnLateralTable1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE a = d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor1.a, $0)])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
})], variablesSet=[[$cor1]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($0, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
            :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
            +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE EXISTS (SELECT * FROM y WHERE a = c)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE EXISTS (SELECT * FROM y WHERE a = c) AND x.a > 2]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), >($0, 2))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[>($0, 2)])
   +- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE EXISTS (SELECT 1, c + d, c + 2, d FROM y WHERE a = c)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE EXISTS (SELECT * FROM y WHERE x.a = c and x.b > 10)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), >($cor0.b, 10))])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(=($0, $2), >($1, 10))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere5">
    <Resource name="sql">
      <![CDATA[SELECT x1.a FROM x x1, y WHERE x1.b = y.d AND x1.a < 10 AND y.c < 15  AND EXISTS (SELECT * FROM x x2 WHERE x1.b = x2.b)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[AND(=($1, $3), <($0, 10), <($2, 15), EXISTS({
LogicalFilter(condition=[=($cor0.b, $1)])
  LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[AND(=($1, $3), <($0, 10), <($2, 15))])
   +- LogicalJoin(condition=[=($1, $4)], joinType=[semi])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
      +- LogicalProject(b=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere6">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE EXISTS (SELECT * FROM y WHERE x.a < y.d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[<($cor0.a, $1)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[<($0, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere7">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE (EXISTS (SELECT d FROM y WHERE y.d = x.b)) IS TRUE]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(EXISTS({
LogicalFilter(condition=[=($1, $cor0.b)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($2, $1)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere8">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x WHERE EXISTS (SELECT x.a IS NULL FROM y WHERE y.d = x.b)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($1, $cor0.b)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[=($2, $1)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Aggregate1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l1 WHERE EXISTS (SELECT COUNT(1) FROM r1 WHERE l1.b = r1.d AND c < 100 GROUP BY f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{0}], EXPR$0=[COUNT()])
  LogicalProject(f=[$3])
    LogicalFilter(condition=[AND(=($cor0.b, $1), <($0, 100))])
      LogicalTableScan(table=[[default_catalog, default_database, r1, source: [TestTableSource(c, d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l1, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($1, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l1, source: [TestTableSource(a, b)]]])
   +- LogicalProject(d=[$1])
      +- LogicalAggregate(group=[{0, 1}], EXPR$0=[COUNT()])
         +- LogicalProject(f=[$3], d=[$1])
            +- LogicalFilter(condition=[<($0, 100)])
               +- LogicalTableScan(table=[[default_catalog, default_database, r1, source: [TestTableSource(c, d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Aggregate2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l1 WHERE EXISTS (SELECT MAX(e) FROM r1 WHERE l1.b = r1.d AND c < 100 AND l1.a = r1.c GROUP BY c, true, f, 1)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$0=[MAX($4)])
  LogicalProject(c=[$0], $f1=[true], f=[$3], $f3=[1], e=[$2])
    LogicalFilter(condition=[AND(=($cor0.b, $1), <($0, 100), =($cor0.a, $0))])
      LogicalTableScan(table=[[default_catalog, default_database, r1, source: [TestTableSource(c, d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l1, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(=($1, $3), =($0, $2))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l1, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0], d=[$2])
      +- LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MAX($5)])
         +- LogicalProject(c=[$0], f=[$3], d=[$1], $f1=[true], $f3=[1], e=[$2])
            +- LogicalFilter(condition=[<($0, 100)])
               +- LogicalTableScan(table=[[default_catalog, default_database, r1, source: [TestTableSource(c, d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Aggregate3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT d FROM (SELECT MAX(d) AS d, f FROM r GROUP BY f) t WHERE l.c > t.f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[>($cor0.c, $1)])
  LogicalProject(d=[$1], f=[$0])
    LogicalAggregate(group=[{0}], d=[MAX($1)])
      LogicalProject(f=[$2], d=[$0])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[>($2, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(f=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalProject(d=[$1], f=[$0])
            +- LogicalAggregate(group=[{0}], d=[MAX($1)])
               +- LogicalProject(f=[$2], d=[$0])
                  +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_AggregateOver1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT MAX(r.e) OVER() FROM r WHERE l.c = r.f GROUP BY r.e)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{0}])
  LogicalProject(e=[$1])
    LogicalFilter(condition=[=($cor0.c, $2)])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(f=[$1])
      +- LogicalAggregate(group=[{0, 1}])
         +- LogicalProject(e=[$1], f=[$2])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_ComplexCondition1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT CAST(e AS INTEGER), 1 FROM r where CAST(l.b AS INTEGER) = CAST(r.d AS INTEGER))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=(CAST($cor0.b):INTEGER, CAST($0):INTEGER)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[=($3, $4)], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], b0=[CAST($1):INTEGER])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_ComplexCondition2">
    <Resource name="sql">
      <![CDATA[SELECT a + 10, c FROM l WHERE b > 10 AND NOT (c like 'abc' OR NOT EXISTS (SELECT d FROM r where l.b + 1 = r.e))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(OR(LIKE($2, _UTF-16LE'abc'), NOT(EXISTS({
LogicalFilter(condition=[=(+($cor0.b, 1), $1)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})))))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, _UTF-16LE'abc')))])
   +- LogicalProject(a=[$0], b=[$1], c=[$2])
      +- LogicalJoin(condition=[=($3, $4)], joinType=[semi])
         :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($1, 1)])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(e=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_ComplexCondition4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE (EXISTS (SELECT d FROM y WHERE y.d = x.b)) = true]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[=(EXISTS({
LogicalFilter(condition=[=($1, $cor0.b)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), true)], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($2, $1)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InnerJoin1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT f FROM r WHERE r.d = l.a AND r.e > 10) r1 INNER JOIN t ON r1.f = t.k)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($0, $3)], joinType=[inner])
  LogicalProject(f=[$2])
    LogicalFilter(condition=[AND(=($0, $cor0.a), >($1, 10))])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($3, $0)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$1])
      +- LogicalJoin(condition=[=($0, $4)], joinType=[inner])
         :- LogicalProject(f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[>($1, 10)])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InnerJoin2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r INNER JOIN (SELECT * FROM t WHERE t.j = l.b AND i < 50) t1 ON r.f = t1.k)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($2, $5)], joinType=[inner])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
  LogicalProject(i=[$0], j=[$1], k=[$2])
    LogicalFilter(condition=[AND(=($1, $cor0.b), <($0, 50))])
      LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($3, $1)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(j=[$4])
      +- LogicalJoin(condition=[=($2, $5)], joinType=[inner])
         :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(i=[$0], j=[$1], k=[$2])
            +- LogicalFilter(condition=[<($0, 50)])
               +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InnerJoin3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT f FROM r WHERE r.d = l.a AND r.e > 10) r1 INNER JOIN (SELECT i, k FROM t WHERE t.j = l.b AND i < 50) t1 ON r1.f = t1.k)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($0, $2)], joinType=[inner])
  LogicalProject(f=[$2])
    LogicalFilter(condition=[AND(=($0, $cor0.a), >($1, 10))])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
  LogicalProject(i=[$0], k=[$2])
    LogicalFilter(condition=[AND(=($1, $cor0.b), <($0, 50))])
      LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($3, $0), =($4, $1))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$1], j=[$4])
      +- LogicalJoin(condition=[=($0, $3)], joinType=[inner])
         :- LogicalProject(f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[>($1, 10)])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(i=[$0], k=[$2], j=[$1])
            +- LogicalFilter(condition=[<($0, 50)])
               +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InsideWith1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE EXISTS (WITH y2 AS (SELECT * FROM y WHERE y.c = x.a) SELECT 1 FROM y2 WHERE y2.d = x.b)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($1, $cor1.b)])
  LogicalProject(c=[$0], d=[$1])
    LogicalFilter(condition=[=($0, $cor1.a)])
      LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor1]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(=($3, $1), =($2, $0))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalFilter(condition=[true])
      +- LogicalProject(c=[$0], d=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_InsideWith2">
    <Resource name="sql">
      <![CDATA[WITH t (a, b) AS (SELECT * FROM (VALUES (1, 2))) SELECT * FROM t WHERE EXISTS (SELECT 1 FROM y WHERE y.c = t.a)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($0, $cor0.a)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
      +- LogicalValues(tuples=[[{ 1, 2 }]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($2, $0)], joinType=[semi])
   :- LogicalProject(EXPR$0=[$0], EXPR$1=[$1])
   :  +- LogicalValues(tuples=[[{ 1, 2 }]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_LeftJoin1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT f FROM r WHERE r.d = l.a AND r.e > 10) r1 LEFT JOIN t ON r1.f = t.k)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($0, $3)], joinType=[left])
  LogicalProject(f=[$2])
    LogicalFilter(condition=[AND(=($0, $cor0.a), >($1, 10))])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($3, $0)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$1])
      +- LogicalJoin(condition=[=($0, $4)], joinType=[left])
         :- LogicalProject(f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[>($1, 10)])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Limit1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE EXISTS (SELECT 1 FROM y WHERE x.a = y.c LIMIT 1)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalSort(fetch=[1])
  LogicalProject(EXPR$0=[1])
    LogicalFilter(condition=[=($cor0.a, $0)])
      LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$1])
      +- LogicalSort(fetch=[1])
         +- LogicalProject(EXPR$0=[1], c=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Limit2">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x WHERE EXISTS (SELECT 1 FROM (SELECT c FROM y LIMIT 1) y2 WHERE x.a = y2.c)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalSort(fetch=[1])
    LogicalProject(c=[$0])
      LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalFilter(condition=[true])
      +- LogicalSort(fetch=[1])
         +- LogicalProject(c=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Over1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT MAX(r.e) OVER() FROM r WHERE l.c = r.f AND r.d < 3)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[AND(=($cor0.c, $2), <($0, 3))])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(f=[$2])
      +- LogicalFilter(condition=[<($0, 3)])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_Over2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT SUM(r.e) OVER() FROM r WHERE l.c < r.f AND r.d < 3)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[AND(<($cor0.c, $2), <($0, 3))])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[<($2, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(f=[$2])
      +- LogicalFilter(condition=[<($0, 3)])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_RightJoin2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r RIGHT JOIN (SELECT * FROM t WHERE t.j = l.b AND i < 50) t1 ON r.f = t1.k)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($2, $5)], joinType=[right])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
  LogicalProject(i=[$0], j=[$1], k=[$2])
    LogicalFilter(condition=[AND(=($1, $cor0.b), <($0, 50))])
      LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($3, $1)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(j=[$4])
      +- LogicalJoin(condition=[=($2, $5)], joinType=[right])
         :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(i=[$0], j=[$1], k=[$2])
            +- LogicalFilter(condition=[<($0, 50)])
               +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_SortLimit1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE EXISTS (SELECT 1 FROM y WHERE a = c ORDER BY d LIMIT 1)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[1])
  LogicalProject(EXPR$0=[1], d=[$1])
    LogicalFilter(condition=[=($cor0.a, $0)])
      LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$2])
      +- LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[1])
         +- LogicalProject(EXPR$0=[1], d=[$1], c=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithCorrelatedOnWhere_SortLimit2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE EXISTS (SELECT 1 FROM y WHERE a = c ORDER BY c LIMIT 1)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[1])
  LogicalProject(EXPR$0=[1], c=[$0])
    LogicalFilter(condition=[=($cor0.a, $0)])
      LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$1])
      +- LogicalSort(sort0=[$1], dir0=[ASC-nulls-first], fetch=[1])
         +- LogicalProject(EXPR$0=[1], c=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnLateralTable1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
  LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[$3], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
               :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
               +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnLateralTable2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE EXISTS (SELECT * FROM t))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[$3], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalJoin(condition=[$4], joinType=[semi])
               :- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
               :  :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
               :  +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
               +- LogicalProject($f0=[IS NOT NULL($0)])
                  +- LogicalAggregate(group=[{}], m=[MIN($0)])
                     +- LogicalProject(i=[true])
                        +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnLateralTable3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT * FROM r WHERE EXISTS (SELECT * FROM t)) m, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
  LogicalProject(d=[$0], e=[$1], f=[$2])
    LogicalFilter(condition=[EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
  LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[$3], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
               :- LogicalProject(d=[$0], e=[$1], f=[$2])
               :  +- LogicalJoin(condition=[$3], joinType=[semi])
               :     :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
               :     +- LogicalProject($f0=[IS NOT NULL($0)])
               :        +- LogicalAggregate(group=[{}], m=[MIN($0)])
               :           +- LogicalProject(i=[true])
               :              +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
               +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnLateralTable4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM (SELECT * FROM r LEFT JOIN LATERAL TABLE(table_func(f)) AS T(f1) ON TRUE))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
  LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[$3], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
               :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
               +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE EXISTS (SELECT * FROM y)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[$2], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM (SELECT a, b, d FROM x, y) xy WHERE EXISTS (SELECT * FROM y where c > 0) AND a < 100]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], d=[$2])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalFilter(condition=[>($0, 0)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), <($0, 100))])
   +- LogicalProject(a=[$0], b=[$1], d=[$3])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], d=[$2])
+- LogicalFilter(condition=[<($0, 100)])
   +- LogicalJoin(condition=[$3], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], d=[$3])
      :  +- LogicalJoin(condition=[true], joinType=[inner])
      :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalFilter(condition=[>($0, 0)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE NOT (NOT EXISTS (SELECT * FROM y)) AND x.b = 10]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(NOT(NOT(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))), =($1, 10))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[=($1, 10)])
   +- LogicalJoin(condition=[$2], joinType=[semi])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere5">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE (EXISTS (SELECT d FROM y)) IS TRUE]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[$2], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere6">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x WHERE EXISTS (SELECT x.b IS NULL FROM y)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[$2], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 10 AND EXISTS (SELECT CAST(e AS INTEGER), 1 FROM r WHERE e > 0)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), EXISTS({
LogicalFilter(condition=[>($1, 0)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[>($1, 10)])
   +- LogicalJoin(condition=[$3], joinType=[semi])
      :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalFilter(condition=[>($1, 0)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition2">
    <Resource name="sql">
      <![CDATA[SELECT a + 10, c FROM l WHERE b > 10 AND NOT (c like 'abc' OR NOT EXISTS (SELECT d FROM r))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(OR(LIKE($2, _UTF-16LE'abc'), NOT(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})))))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, _UTF-16LE'abc')))])
   +- LogicalJoin(condition=[$3], joinType=[semi])
      :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition4">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE EXISTS (SELECT d, j + 1 FROM r FULL JOIN (SELECT j FROM t WHERE i > 10) t2 ON r.e = t2.j)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalJoin(condition=[=($1, $3)], joinType=[full])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
  LogicalProject(j=[$1])
    LogicalFilter(condition=[>($0, 10)])
      LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalJoin(condition=[$3], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalJoin(condition=[=($1, $3)], joinType=[full])
               :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
               +- LogicalProject(j=[$1])
                  +- LogicalFilter(condition=[>($0, 10)])
                     +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition5">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE EXISTS (SELECT MAX(e), MIN(d) FROM r WHERE d < 3 GROUP BY f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)], EXPR$1=[MIN($2)])
  LogicalProject(f=[$2], e=[$1], d=[$0])
    LogicalFilter(condition=[<($0, 3)])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[$3], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)], EXPR$1=[MIN($2)])
               +- LogicalProject(f=[$2], e=[$1], d=[$0])
                  +- LogicalFilter(condition=[<($0, 3)])
                     +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition6">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE EXISTS (SELECT e, f FROM r WHERE d > 10 UNION SELECT j, k FROM t WHERE i < 100)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[EXISTS({
LogicalUnion(all=[false])
  LogicalProject(e=[$1], f=[$2])
    LogicalFilter(condition=[>($0, 10)])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
  LogicalProject(j=[$1], k=[$2])
    LogicalFilter(condition=[<($0, 100)])
      LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[$3], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalUnion(all=[false])
               :- LogicalProject(e=[$1], f=[$2])
               :  +- LogicalFilter(condition=[>($0, 10)])
               :     +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
               +- LogicalProject(j=[$1], k=[$2])
                  +- LogicalFilter(condition=[<($0, 100)])
                     +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testExistsWithUncorrelatedOnWhere_ComplexCondition7">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (EXISTS (SELECT d FROM r)) = true]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[=(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}), true)])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[$3], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInExists1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE l.a = r.d) AND a IN (SELECT i FROM t WHERE l.b = t.j)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}), IN($0, {
LogicalProject(i=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[semi])
   :- LogicalJoin(condition=[=($0, $3)], joinType=[semi])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   :  +- LogicalProject(d=[$0])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
   +- LogicalProject(i=[$0], j=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInExists2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT j FROM t)  AND EXISTS (SELECT * FROM r WHERE l.a = r.d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(IN($1, {
LogicalProject(j=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}), EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($0, $3)], joinType=[semi])
   :- LogicalJoin(condition=[=($1, $3)], joinType=[semi])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   :  +- LogicalProject(j=[$1])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
   +- LogicalProject(d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnLateralTable1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE a = d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalFilter(condition=[=($cor1.a, $0)])
    LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
      LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
})], variablesSet=[[$cor1]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($2, $3), =($0, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(f1=[$3], d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
            :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
            +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a IN (SELECT c FROM y WHERE x.b = y.d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE b > 1 AND a IN (SELECT c FROM y WHERE x.b = y.d AND y.c > 10)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(>($1, 1), IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[>($1, 1)])
   +- LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[semi])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(c=[$0], d=[$1])
         +- LogicalFilter(condition=[>($0, 10)])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE b > 1 AND a + 1 IN (SELECT c FROM y WHERE x.b = y.d AND y.c > 10)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(>($1, 1), IN(+($0, 1), {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[>($1, 1)])
      +- LogicalJoin(condition=[AND(=($2, $3), =($1, $4))], joinType=[semi])
         :- LogicalProject(a=[$0], b=[$1], $f2=[+($0, 1)])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
         +- LogicalProject(c=[$0], d=[$1])
            +- LogicalFilter(condition=[>($0, 10)])
               +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a IN (SELECT c FROM y WHERE x.b > y.d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(=($0, $2), >($1, $3))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere5">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x x1 WHERE a IN (SELECT a FROM x WHERE a < 3 AND x1.b = x.b GROUP BY a)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($0, {
LogicalAggregate(group=[{0}])
  LogicalProject(a=[$0])
    LogicalFilter(condition=[AND(<($0, 3), =($cor0.b, $1))])
      LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(a=[$0], b=[$1])
      +- LogicalAggregate(group=[{0, 1}])
         +- LogicalProject(a=[$0], b=[$1])
            +- LogicalFilter(condition=[<($0, 3)])
               +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere6">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a IN (SELECT c FROM y where CAST(x.b AS INTEGER) = y.c)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[=(CAST($cor0.b):INTEGER, $0)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[AND(=($0, $3), =($2, $3))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], b0=[CAST($1):INTEGER])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere7">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a IN (SELECT c FROM y WHERE x.b > 10)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($cor0.b, 10)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(=($0, $2), >($1, 10))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) FROM r WHERE l.c = r.f AND r.d < 3 GROUP BY r.f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
    LogicalProject(f=[$2], e=[$1])
      LogicalFilter(condition=[AND(=($cor0.c, $2), <($0, 3))])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[$1], f=[$0])
      +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
         +- LogicalProject(f=[$2], e=[$1])
            +- LogicalFilter(condition=[<($0, 3)])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d * 5 FROM (SELECT SUM(d) AS d FROM r WHERE l.b = r.e) r1)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(EXPR$0=[*($0, 5)])
  LogicalAggregate(group=[{}], d=[SUM($0)])
    LogicalProject(d=[$0])
      LogicalFilter(condition=[=($cor0.b, $1)])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[*($1, 5)], e=[$0])
      +- LogicalAggregate(group=[{0}], d=[SUM($1)])
         +- LogicalProject(e=[$1], d=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT COUNT(*) FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[$1], f=[$0])
      +- LogicalAggregate(group=[{0}], EXPR$0=[COUNT()])
         +- LogicalProject(f=[$2], d=[$0], e=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, b) IN (SELECT d, COUNT(*) FROM r WHERE l.c = r.f GROUP BY d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $1, {
LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
  LogicalProject(d=[$0])
    LogicalFilter(condition=[=($cor0.c, $2)])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($0, $3), =($1, $4), =($2, $5))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0], EXPR$1=[$2], f=[$1])
      +- LogicalAggregate(group=[{0, 1}], EXPR$1=[COUNT()])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate5">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(e) FROM r WHERE l.c = r.f GROUP BY d, true, 1)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$3])
  LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MAX($3)])
    LogicalProject(d=[$0], $f1=[true], $f2=[1], e=[$1])
      LogicalFilter(condition=[=($cor0.c, $2)])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[$2], f=[$1])
      +- LogicalAggregate(group=[{0, 1}], EXPR$0=[MAX($4)])
         +- LogicalProject(d=[$0], f=[$2], $f1=[true], $f2=[1], e=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate6">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (b, a) IN (SELECT COUNT(*), d FROM r WHERE l.c = r.f GROUP BY d, true, e, 1)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, $0, {
LogicalProject(EXPR$0=[$4], d=[$0])
  LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$0=[COUNT()])
    LogicalProject(d=[$0], $f1=[true], e=[$1], $f3=[1])
      LogicalFilter(condition=[=($cor0.c, $2)])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($0, $4), =($2, $5))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[$3], d=[$0], f=[$2])
      +- LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[COUNT()])
         +- LogicalProject(d=[$0], e=[$1], f=[$2], $f1=[true], $f3=[1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate7">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT min(e) FROM (SELECT d, e, RANK() OVER(PARTITION BY d ORDER BY e) AS rk FROM r) t WHERE rk < 2 AND l.a = t.d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalAggregate(group=[{}], EXPR$0=[MIN($0)])
  LogicalProject(e=[$1])
    LogicalFilter(condition=[AND(<($2, 2), =($cor0.a, $0))])
      LogicalProject(d=[$0], e=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST)])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[$1], d=[$0])
      +- LogicalAggregate(group=[{0}], EXPR$0=[MIN($1)])
         +- LogicalProject(d=[$0], e=[$1])
            +- LogicalFilter(condition=[<($2, 2)])
               +- LogicalProject(d=[$0], e=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate8">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT AVG(e) FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalAggregate(group=[{}], EXPR$0=[AVG($0)])
  LogicalProject(e=[$1])
    LogicalFilter(condition=[=($cor0.c, $2)])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[$1], f=[$0])
      +- LogicalAggregate(group=[{0}], EXPR$0=[AVG($1)])
         +- LogicalProject(f=[$2], e=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Aggregate9">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT d FROM (SELECT MAX(d) AS d, f FROM r GROUP BY f) t WHERE l.c > t.f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[>($cor0.c, $1)])
    LogicalProject(d=[$1], f=[$0])
      LogicalAggregate(group=[{0}], d=[MAX($1)])
        LogicalProject(f=[$2], d=[$0])
          LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $5), >($2, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0], f=[$1], d0=[CAST($0):BIGINT])
      +- LogicalProject(d=[$0], f=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalProject(d=[$1], f=[$0])
               +- LogicalAggregate(group=[{0}], d=[MAX($1)])
                  +- LogicalProject(f=[$2], d=[$0])
                     +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_AggregateOver1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) OVER() FROM r WHERE l.c = r.f GROUP BY r.e)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[MAX($0) OVER ()])
  LogicalAggregate(group=[{0}])
    LogicalProject(e=[$1])
      LogicalFilter(condition=[=($cor0.c, $2)])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[MAX($0) OVER ()], f=[$1])
      +- LogicalAggregate(group=[{0, 1}])
         +- LogicalProject(e=[$1], f=[$2])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case1">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a > 10 THEN 1 ELSE 2 END) IN (SELECT d FROM r WHERE l.a = r.d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(>($0, 10), 1, 2), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.a, $0)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(=($3, $4), =($0, $4))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(>($0, 10), 1, 2)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case2">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT 1 FROM t1) THEN 1 ELSE 2 END) IN (SELECT d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(EXPR$0=[1])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i, j)]]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(AND(<>($3, 0), IS NOT NULL($6), IS NOT NULL($0)), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(EXPR$0=[1])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i, j)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(EXPR$0=[1], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i, j)]]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case3">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT i FROM t1) THEN 1 ELSE 2 END) IN (SELECT d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i, j)]]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(AND(<>($3, 0), IS NOT NULL($6), IS NOT NULL($0)), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(i=[$0])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i, j)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(i=[$0], i0=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i, j)]]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case4">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT i FROM t1) THEN 1 WHEN a IN (SELECT j FROM t2) THEN 2 ELSE 3 END) IN (SELECT d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i, j)]]])
}), 1, IN($0, {
LogicalProject(j=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(i, j)]]])
}), 2, 3), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(AND(<>($3, 0), IS NOT NULL($6), IS NOT NULL($0)), 1, AND(<>($7, 0), IS NOT NULL($10), IS NOT NULL($0)), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i, j)]]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i, j)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$1])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(i, j)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$1], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(i, j)]]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Case5">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (b, (CASE WHEN a IN (SELECT i FROM t1) THEN 1 WHEN a IN (SELECT j FROM t2) THEN 2 ELSE 3 END)) IN (SELECT e, d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN($1, CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i, j)]]])
}), 1, IN($0, {
LogicalProject(j=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(i, j)]]])
}), 2, 3), {
LogicalProject(e=[$1], d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(=($1, $4), =($3, $5), =($2, $6))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(AND(<>($3, 0), IS NOT NULL($6), IS NOT NULL($0)), 1, AND(<>($7, 0), IS NOT NULL($10), IS NOT NULL($0)), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i, j)]]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i, j)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$1])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(i, j)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$1], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(i, j)]]])
      +- LogicalProject(e=[$1], d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ComplexCondition1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT CAST(e AS INTEGER) FROM r where CAST(l.b AS INTEGER) = CAST(r.d AS INTEGER))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(EXPR$0=[CAST($1):INTEGER])
  LogicalFilter(condition=[=(CAST($cor0.b):INTEGER, CAST($0):INTEGER)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(=($0, $4), =($3, $5))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], b0=[CAST($1):INTEGER])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(EXPR$0=[CAST($1):INTEGER], d=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ComplexCondition2">
    <Resource name="sql">
      <![CDATA[SELECT a + 10, c FROM l WHERE NOT(NOT(substring(c, 1, 5) IN (SELECT substring(f, 1, 5) FROM r WHERE l.b + 1 = r.e)))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[IN(SUBSTRING($2, 1, 5), {
LogicalProject(EXPR$0=[SUBSTRING($2, 1, 5)])
  LogicalFilter(condition=[=(+($cor0.b, 1), $1)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3])
      +- LogicalJoin(condition=[AND(=($3, $5), =($4, $6))], joinType=[semi])
         :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3], $f4=[+($1, 1)])
         :  +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[SUBSTRING($2, 1, 5)])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(EXPR$0=[SUBSTRING($2, 1, 5)], e=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ComplexCondition4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 10 AND NOT (c like 'abc' OR a NOT IN (SELECT d FROM r WHERE l.b = r.e))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, _UTF-16LE'abc')), IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, _UTF-16LE'abc')))])
   +- LogicalJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[semi])
      :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0], e=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ComplexCondition5">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE (a IN (SELECT d FROM y WHERE y.d = x.b)) IS TRUE]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(IN($0, {
LogicalProject(d=[$1])
  LogicalFilter(condition=[=($1, $cor0.b)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[AND(=($2, $3), =($3, $1))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], a0=[CAST($0):BIGINT])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(d=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_InnerJoin1">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (SELECT d FROM r INNER JOIN (SELECT j FROM t WHERE l.c = t.k AND i > 10) t2 ON r.e = t2.j)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(d=[$0])
  LogicalJoin(condition=[=($1, $3)], joinType=[inner])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalProject(j=[$1])
      LogicalFilter(condition=[AND(=($cor0.c, $2), >($0, 10))])
        LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalJoin(condition=[AND(=($1, $5), =($2, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0], k=[$1], d0=[CAST($0):BIGINT])
      +- LogicalProject(d=[$0], k=[$4])
         +- LogicalJoin(condition=[=($1, $3)], joinType=[inner])
            :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
            +- LogicalProject(j=[$1], k=[$2])
               +- LogicalFilter(condition=[>($0, 10)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_InnerJoin2">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (WITH r1 AS (SELECT e, f FROM r WHERE l.a = r.d AND r.e < 50) SELECT t.j FROM r1 INNER JOIN t ON r1.f = t.k)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(j=[$3])
  LogicalJoin(condition=[=($1, $4)], joinType=[inner])
    LogicalProject(e=[$1], f=[$2])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 50))])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(j=[$4], d=[$2])
      +- LogicalJoin(condition=[=($1, $5)], joinType=[inner])
         :- LogicalProject(e=[$1], f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[<($1, 50)])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_InnerJoin3">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (WITH r1 AS (SELECT e FROM r WHERE l.a = r.d AND r.e < 50) SELECT e FROM r1 INNER JOIN (SELECT j FROM t WHERE l.c = t.k AND i > 10) t2 ON r1.e = t2.j)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(e=[$0])
  LogicalJoin(condition=[=($0, $1)], joinType=[inner])
    LogicalProject(e=[$1])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 50))])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalProject(j=[$1])
      LogicalFilter(condition=[AND(=($cor0.c, $2), >($0, 10))])
        LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($0, $4), =($2, $5))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(e=[$0], d=[$1], k=[$3])
      +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
         :- LogicalProject(e=[$1], d=[$0])
         :  +- LogicalFilter(condition=[<($1, 50)])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(j=[$1], k=[$2])
            +- LogicalFilter(condition=[>($0, 10)])
               +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_LeftJoin2">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (WITH r1 AS (SELECT e, f FROM r WHERE l.a = r.d AND r.e < 50) SELECT t.j FROM r1 LEFT JOIN t ON r1.f = t.k)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(j=[$3])
  LogicalJoin(condition=[=($1, $4)], joinType=[left])
    LogicalProject(e=[$1], f=[$2])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 50))])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(j=[$4], d=[$2])
      +- LogicalJoin(condition=[=($1, $5)], joinType=[left])
         :- LogicalProject(e=[$1], f=[$2], d=[$0])
         :  +- LogicalFilter(condition=[<($1, 50)])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_MultiFields1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, c) IN (SELECT d, f FROM r WHERE l.b = r.e)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $2, {
LogicalProject(d=[$0], f=[$2])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($0, $3), =($2, $4), =($1, $5))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0], f=[$2], e=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_MultiFields2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, SUBSTRING(c, 1, 5)) IN (SELECT d, SUBSTRING(f, 1, 5) FROM r WHERE l.b = r.e)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, SUBSTRING($2, 1, 5), {
LogicalProject(d=[$0], EXPR$1=[SUBSTRING($2, 1, 5)])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(=($0, $4), =($3, $5), =($1, $6))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[SUBSTRING($2, 1, 5)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0], EXPR$1=[SUBSTRING($2, 1, 5)], e=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_MultiFields3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a + 10, SUBSTRING(c, 1, 5)) IN (SELECT d + 100, SUBSTRING(f, 1, 5) FROM r WHERE l.b = r.e)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN(+($0, 10), SUBSTRING($2, 1, 5), {
LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(=($3, $5), =($4, $6), =($1, $7))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 10)], $f4=[SUBSTRING($2, 1, 5)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)], e=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Over1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) OVER() FROM r WHERE l.c = r.f AND r.d < 3)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[MAX($1) OVER ()])
  LogicalFilter(condition=[AND(=($cor0.c, $2), <($0, 3))])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[MAX($1) OVER ()], f=[$2])
      +- LogicalFilter(condition=[<($0, 3)])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Over2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, b) IN (SELECT MAX(r.d) OVER(), MIN(r.e) OVER(PARTITION BY f ORDER BY d) FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $1, {
LogicalProject(EXPR$0=[MAX($0) OVER ()], EXPR$1=[MIN($1) OVER (PARTITION BY $2 ORDER BY $0 NULLS FIRST)])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($0, $3), =($1, $4), =($2, $5))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[MAX($0) OVER ()], EXPR$1=[MIN($1) OVER (PARTITION BY $2 ORDER BY $0 NULLS FIRST)], f=[$2])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_Over5">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT rk FROM (SELECT d, e, RANK() OVER(PARTITION BY d ORDER BY e) AS rk FROM r) t WHERE l.a <> t.d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(rk=[$2])
  LogicalFilter(condition=[<>($cor0.a, $0)])
    LogicalProject(d=[$0], e=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST)])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), <>($0, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(rk=[$2], d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalProject(d=[$0], e=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST)])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_RightJoin1">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (SELECT d FROM r RIGHT JOIN (SELECT j FROM t WHERE l.c = t.k AND i > 10) t2 ON r.e = t2.j)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(d=[$0])
  LogicalJoin(condition=[=($1, $3)], joinType=[right])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalProject(j=[$1])
      LogicalFilter(condition=[AND(=($cor0.c, $2), >($0, 10))])
        LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalJoin(condition=[AND(=($1, $5), =($2, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0], k=[$1], d0=[CAST($0):BIGINT])
      +- LogicalProject(d=[$0], k=[$4])
         +- LogicalJoin(condition=[=($1, $3)], joinType=[right])
            :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
            +- LogicalProject(j=[$1], k=[$2])
               +- LogicalFilter(condition=[>($0, 10)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery1">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x WHERE (SELECT MAX(d) FROM y WHERE c > 0) IN (SELECT f FROM z WHERE z.e = x.a)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[>($0, 0)])
      LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.a)])
    LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[AND(=($2, $3), =($4, $0))], joinType=[semi])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$1])
      :        +- LogicalFilter(condition=[>($0, 0)])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
      +- LogicalProject(f=[$1], e=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery2">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x WHERE (SELECT MAX(d) FROM y WHERE c IN (SELECT e FROM z)) IN (SELECT f FROM z WHERE z.e = x.a)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[IN($0, {
LogicalProject(e=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})])
      LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.a)])
    LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[AND(=($2, $3), =($4, $0))], joinType=[semi])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$1])
      :        +- LogicalProject(c=[$0], d=[$1])
      :           +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
      :              :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
      :              +- LogicalAggregate(group=[{0}])
      :                 +- LogicalProject(e=[$0])
      :                    +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
      +- LogicalProject(f=[$1], e=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery3">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x WHERE (SELECT MAX(d) FROM y WHERE c IN (SELECT e FROM z WHERE y.d = z.f)) IN (SELECT f FROM z WHERE z.e = x.a)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[IN($0, {
LogicalProject(e=[$0])
  LogicalFilter(condition=[=($cor1.d, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})], variablesSet=[[$cor1]])
      LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.a)])
    LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[AND(=($2, $3), =($4, $0))], joinType=[semi])
   :- LogicalJoin(condition=[true], joinType=[left])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
   :     +- LogicalProject(d=[$1])
   :        +- LogicalJoin(condition=[AND(=($1, $3), =($0, $2))], joinType=[inner])
   :           :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
   :           +- LogicalAggregate(group=[{0, 1}])
   :              +- LogicalProject(e=[$0], f=[$1])
   :                 +- LogicalFilter(condition=[IS NOT NULL($1)])
   :                    +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
   +- LogicalProject(f=[$1], e=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery5">
    <Resource name="sql">
      <![CDATA[SELECT b FROM x WHERE a IN (SELECT c FROM y WHERE x.b = y.d AND c > 10) AND b > (SELECT 0.5 * SUM(e) FROM z WHERE z.f < 100)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), >($1, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.5:DECIMAL(2, 1), $0)])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(e=[$0])
      LogicalFilter(condition=[<($1, 100)])
        LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[>($1, $2)])
      +- LogicalJoin(condition=[true], joinType=[left])
         :- LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[semi])
         :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
         :  +- LogicalProject(c=[$0], d=[$1])
         :     +- LogicalFilter(condition=[>($0, 10)])
         :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
         +- LogicalAggregate(group=[{}], agg#0=[SINGLE_VALUE($0)])
            +- LogicalProject(EXPR$0=[*(0.5:DECIMAL(2, 1), $0)])
               +- LogicalAggregate(group=[{}], agg#0=[SUM($0)])
                  +- LogicalProject(e=[$0])
                     +- LogicalFilter(condition=[<($1, 100)])
                        +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery6">
    <Resource name="sql">
      <![CDATA[SELECT b FROM x WHERE a IN (SELECT c FROM y WHERE x.b = y.d AND c > 10) AND b > (SELECT 0.5 * SUM(e) FROM z WHERE x.a = z.e AND z.f < 100)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), >($1, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.5:DECIMAL(2, 1), $0)])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(e=[$0])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
        LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalJoin(condition=[AND(=($0, $2), >($1, *(0.5:DECIMAL(2, 1), $3)))], joinType=[inner])
   :- LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[semi])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   :  +- LogicalProject(c=[$0], d=[$1])
   :     +- LogicalFilter(condition=[>($0, 10)])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
   +- LogicalAggregate(group=[{0}], agg#0=[SUM($1)])
      +- LogicalProject(e1=[$0], e=[$0])
         +- LogicalFilter(condition=[AND(<($1, 100), IS NOT NULL($0))])
            +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithCorrelatedOnWhere_ScalarQuery7">
    <Resource name="sql">
      <![CDATA[SELECT b FROM x WHERE a IN (SELECT c FROM y WHERE x.b = y.d AND c > (SELECT SUM(e) FROM z WHERE y.c = z.e AND z.f < 100))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(e=[$0])
    LogicalFilter(condition=[AND(=($cor1.c, $0), <($1, 100))])
      LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})))], variablesSet=[[$cor1]])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalJoin(condition=[AND(=($0, $2), >($0, $3))], joinType=[inner])
         :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
         +- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
            +- LogicalProject(e1=[$0], e=[$0])
               +- LogicalFilter(condition=[AND(<($1, 100), IS NOT NULL($0))])
                  +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnHaving1">
    <Resource name="sql">
      <![CDATA[SELECT SUM(a) AS s FROM x GROUP BY b HAVING COUNT(*) > 2 AND b IN (SELECT d FROM y)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(s=[$1])
+- LogicalFilter(condition=[AND(>($2, 2), IN($0, {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))])
   +- LogicalAggregate(group=[{0}], s=[SUM($1)], agg#1=[COUNT()])
      +- LogicalProject(b=[$1], a=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(s=[$1])
+- LogicalFilter(condition=[>($2, 2)])
   +- LogicalJoin(condition=[=($0, $3)], joinType=[semi])
      :- LogicalAggregate(group=[{0}], s=[SUM($1)], agg#1=[COUNT()])
      :  +- LogicalProject(b=[$1], a=[$0])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnHaving2">
    <Resource name="sql">
      <![CDATA[SELECT SUM(a) AS s FROM x GROUP BY b HAVING COUNT(*) > 2 AND MAX(b) IN (SELECT d FROM y)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(s=[$1])
+- LogicalFilter(condition=[AND(>($2, 2), IN($3, {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))])
   +- LogicalAggregate(group=[{0}], s=[SUM($1)], agg#1=[COUNT()], agg#2=[MAX($0)])
      +- LogicalProject(b=[$1], a=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(s=[$1])
+- LogicalFilter(condition=[>($2, 2)])
   +- LogicalJoin(condition=[=($3, $4)], joinType=[semi])
      :- LogicalAggregate(group=[{0}], s=[SUM($1)], agg#1=[COUNT()], agg#2=[MAX($0)])
      :  +- LogicalProject(b=[$1], a=[$0])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnLateralTable1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM r, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(f1=[$3])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnLateralTable2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE d IN (SELECT i FROM t))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalFilter(condition=[IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})])
    LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
      LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(f1=[$3])
      +- LogicalJoin(condition=[=($0, $4)], joinType=[semi])
         :- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :  :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         :  +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
         +- LogicalProject(i=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnLateralTable3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM (SELECT * FROM r WHERE d IN (SELECT i FROM t)) m, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalProject(d=[$0], e=[$1], f=[$2])
      LogicalFilter(condition=[IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(f1=[$3])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :- LogicalProject(d=[$0], e=[$1], f=[$2])
         :  +- LogicalJoin(condition=[=($0, $3)], joinType=[semi])
         :     :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         :     +- LogicalProject(i=[$0])
         :        +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
         +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnLateralTable4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c IN (SELECT f1 FROM (SELECT * FROM r LEFT JOIN LATERAL TABLE(table_func(f)) AS T(f1) ON TRUE))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($2, {
LogicalProject(f1=[$3])
  LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(f1=[$3])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{2}])
         :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a IN (SELECT c FROM y)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a IN (SELECT c FROM y WHERE d < 100) AND b > 10]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[<($1, 100)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), >($1, 10))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[>($1, 10)])
   +- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[<($1, 100)])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a + 1 IN (SELECT c FROM y)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN(+($0, 1), {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], $f2=[+($0, 1)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(c=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a * b IN (SELECT d FROM y)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN(*($0, $1), {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], $f2=[*($0, $1)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere5">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE CAST(a AS BIGINT) IN (SELECT d FROM y)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN(CAST($0):BIGINT, {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], a0=[CAST($0):BIGINT])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere6">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x x1 WHERE a IN (SELECT a FROM x WHERE a < 3 GROUP BY a)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($0, {
LogicalAggregate(group=[{0}])
  LogicalProject(a=[$0])
    LogicalFilter(condition=[<($0, 3)])
      LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalAggregate(group=[{0}])
      +- LogicalProject(a=[$0])
         +- LogicalFilter(condition=[<($0, 3)])
            +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) FROM r WHERE r.d < 3 GROUP BY r.f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
    LogicalProject(f=[$2], e=[$1])
      LogicalFilter(condition=[<($0, 3)])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($1, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[$1])
      +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
         +- LogicalProject(f=[$2], e=[$1])
            +- LogicalFilter(condition=[<($0, 3)])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d * 5 FROM (SELECT SUM(d) AS d FROM r) r1)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(EXPR$0=[*($0, 5)])
  LogicalAggregate(group=[{}], d=[SUM($0)])
    LogicalProject(d=[$0])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($0, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[*($0, 5)])
      +- LogicalAggregate(group=[{}], d=[SUM($0)])
         +- LogicalProject(d=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT COUNT(*) FROM r)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($1, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
      +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, b) IN (SELECT d, COUNT(*) FROM r GROUP BY d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $1, {
LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
  LogicalProject(d=[$0])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate5">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(e) FROM r GROUP BY d, true, 1)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$3])
  LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MAX($3)])
    LogicalProject(d=[$0], $f1=[true], $f2=[1], e=[$1])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($1, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[$3])
      +- LogicalAggregate(group=[{0, 1, 2}], EXPR$0=[MAX($3)])
         +- LogicalProject(d=[$0], $f1=[true], $f2=[1], e=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Aggregate6">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (b, a) IN (SELECT COUNT(*), d FROM r GROUP BY d, true, e, 1)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, $0, {
LogicalProject(EXPR$0=[$4], d=[$0])
  LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$0=[COUNT()])
    LogicalProject(d=[$0], $f1=[true], e=[$1], $f3=[1])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[$4], d=[$0])
      +- LogicalAggregate(group=[{0, 1, 2, 3}], EXPR$0=[COUNT()])
         +- LogicalProject(d=[$0], $f1=[true], e=[$1], $f3=[1])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_AggregateOver">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) OVER() FROM r GROUP BY r.e)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[MAX($0) OVER ()])
  LogicalAggregate(group=[{0}])
    LogicalProject(e=[$1])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($1, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[MAX($0) OVER ()])
      +- LogicalAggregate(group=[{0}])
         +- LogicalProject(e=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case1">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a > 10 THEN 1 ELSE 2 END) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(>($0, 10), 1, 2), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[=($3, $4)], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(>($0, 10), 1, 2)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case2">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT 1 FROM t1) THEN 1 ELSE 2 END) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(EXPR$0=[1])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[=($3, $4)], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(AND(<>($3, 0), IS NOT NULL($6), IS NOT NULL($0)), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(EXPR$0=[1])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(EXPR$0=[1], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case3">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT i FROM t1) THEN 1 ELSE 2 END) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[=($3, $4)], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(AND(<>($3, 0), IS NOT NULL($6), IS NOT NULL($0)), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(i=[$0])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(i=[$0], i0=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case4">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT i FROM t1) THEN 1 WHEN a IN (SELECT j FROM t2) THEN 2 ELSE 3 END) IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
}), 1, IN($0, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
}), 2, 3), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[=($3, $4)], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(AND(<>($3, 0), IS NOT NULL($6), IS NOT NULL($0)), 1, AND(<>($7, 0), IS NOT NULL($10), IS NOT NULL($0)), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$0])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case5">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (b, (CASE WHEN a IN (SELECT i FROM t1) THEN 1 WHEN a IN (SELECT j FROM t2) THEN 2 ELSE 3 END)) IN (SELECT e, d FROM r)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN($1, CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
}), 1, IN($0, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
}), 2, 3), {
LogicalProject(e=[$1], d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(=($1, $4), =($3, $5))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(AND(<>($3, 0), IS NOT NULL($6), IS NOT NULL($0)), 1, AND(<>($7, 0), IS NOT NULL($10), IS NOT NULL($0)), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$0])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      +- LogicalProject(e=[$1], d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Case6">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE ( (CASE WHEN a IN (SELECT i FROM t1) THEN 1 ELSE 2 END),  (CASE WHEN b IN (SELECT j FROM t2) THEN 3 ELSE 4 END))  IN (SELECT d, e FROM r)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN(CASE(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
}), 1, 2), CASE(IN($1, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
}), 3, 4), {
LogicalProject(d=[$0], e=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3], $f4=[$4])
      +- LogicalJoin(condition=[AND(=($3, $6), =($5, $7))], joinType=[semi])
         :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3], $f4=[$4], $f40=[CAST($4):BIGINT NOT NULL])
         :  +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(AND(<>($3, 0), IS NOT NULL($6), IS NOT NULL($0)), 1, 2)], $f4=[CASE(AND(<>($7, 0), IS NOT NULL($10), IS NOT NULL($1)), 3, 4)])
         :     +- LogicalJoin(condition=[=($1, $9)], joinType=[left])
         :        :- LogicalJoin(condition=[true], joinType=[inner])
         :        :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
         :        :  :  :- LogicalJoin(condition=[true], joinType=[inner])
         :        :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
         :        :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
         :        :  :  :     +- LogicalProject(i=[$0])
         :        :  :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
         :        :  :  +- LogicalAggregate(group=[{0, 1}])
         :        :  :     +- LogicalProject(i=[$0], i0=[true])
         :        :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
         :        :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
         :        :     +- LogicalProject(j=[$0])
         :        :        +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
         :        +- LogicalAggregate(group=[{0, 1}])
         :           +- LogicalProject(j=[$0], i=[true])
         :              +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
         +- LogicalProject(d=[$0], e=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 10 AND NOT (c like 'abc' OR a NOT IN (SELECT d FROM r))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, _UTF-16LE'abc')), IN($0, {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), NOT(LIKE($2, _UTF-16LE'abc')))])
   +- LogicalJoin(condition=[=($0, $3)], joinType=[semi])
      :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition3">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE b IN (SELECT d FROM r FULL JOIN (SELECT j FROM t WHERE i > 10) t2 ON r.e = t2.j)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(d=[$0])
  LogicalJoin(condition=[=($1, $3)], joinType=[full])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalProject(j=[$1])
      LogicalFilter(condition=[>($0, 10)])
        LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalJoin(condition=[=($1, $4)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0], d0=[CAST($0):BIGINT])
      +- LogicalProject(d=[$0])
         +- LogicalJoin(condition=[=($1, $3)], joinType=[full])
            :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
            +- LogicalProject(j=[$1])
               +- LogicalFilter(condition=[>($0, 10)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition4">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE b IN (SELECT MAX(e) FROM r WHERE d < 3 GROUP BY f)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[$1])
  LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
    LogicalProject(f=[$2], e=[$1])
      LogicalFilter(condition=[<($0, 3)])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[=($1, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[$1])
      +- LogicalAggregate(group=[{0}], EXPR$0=[MAX($1)])
         +- LogicalProject(f=[$2], e=[$1])
            +- LogicalFilter(condition=[<($0, 3)])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition5">
    <Resource name="sql">
      <![CDATA[SELECT a FROM l WHERE b IN (SELECT e FROM r WHERE d > 10 UNION SELECT i FROM t WHERE i < 100)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($1, {
LogicalUnion(all=[false])
  LogicalProject(e=[$1])
    LogicalFilter(condition=[>($0, 10)])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
  LogicalProject(i=[$0])
    LogicalFilter(condition=[<($0, 100)])
      LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[=($1, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalUnion(all=[false])
      :- LogicalProject(e=[$1])
      :  +- LogicalFilter(condition=[>($0, 10)])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
      +- LogicalProject(i=[$0])
         +- LogicalFilter(condition=[<($0, 100)])
            +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ComplexCondition6">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE (a IN (SELECT d FROM y)) IS TRUE]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(IN($0, {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], a0=[CAST($0):BIGINT])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_MultiFields1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, c) IN (SELECT d, f FROM r)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $2, {
LogicalProject(d=[$0], f=[$2])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($0, $3), =($2, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0], f=[$2])
      +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_MultiFields2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a + 1, c) IN (SELECT d, f FROM r)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN(+($0, 1), $2, {
LogicalProject(d=[$0], f=[$2])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(=($3, $4), =($2, $5))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 1)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_MultiFields3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a + 10, SUBSTRING(c, 1, 5)) IN (SELECT d + 100, SUBSTRING(f, 1, 5) FROM r)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN(+($0, 10), SUBSTRING($2, 1, 5), {
LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(=($3, $5), =($4, $6))], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 10)], $f4=[SUBSTRING($2, 1, 5)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Over1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b IN (SELECT MAX(r.e) OVER() FROM r)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($1, {
LogicalProject(EXPR$0=[MAX($1) OVER ()])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($1, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[MAX($1) OVER ()])
      +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_Over2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, b) IN (SELECT MAX(r.d) OVER(), MIN(r.e) OVER(PARTITION BY f ORDER BY d) FROM r)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, $1, {
LogicalProject(EXPR$0=[MAX($0) OVER ()], EXPR$1=[MIN($1) OVER (PARTITION BY $2 ORDER BY $0 NULLS FIRST)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[MAX($0) OVER ()], EXPR$1=[MIN($1) OVER (PARTITION BY $2 ORDER BY $0 NULLS FIRST)])
      +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery1">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x WHERE (SELECT MAX(d) FROM y WHERE c > 0) IN (SELECT f FROM z)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[>($0, 0)])
      LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$1])
      :        +- LogicalFilter(condition=[>($0, 0)])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
      +- LogicalProject(f=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery2">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x WHERE (SELECT MAX(d) FROM y WHERE c IN (SELECT e FROM z)) IN (SELECT f FROM z)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[IN($SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
  LogicalProject(d=[$1])
    LogicalFilter(condition=[IN($0, {
LogicalProject(e=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})])
      LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
      :- LogicalJoin(condition=[true], joinType=[left])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      :  +- LogicalAggregate(group=[{}], EXPR$0=[MAX($0)])
      :     +- LogicalProject(d=[$1])
      :        +- LogicalProject(c=[$0], d=[$1])
      :           +- LogicalJoin(condition=[=($0, $2)], joinType=[inner])
      :              :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
      :              +- LogicalAggregate(group=[{0}])
      :                 +- LogicalProject(e=[$0])
      :                    +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
      +- LogicalProject(f=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery3">
    <Resource name="sql">
      <![CDATA[SELECT b FROM x WHERE a IN (SELECT c FROM y WHERE d > 10) AND b > (SELECT 0.5 * SUM(e) FROM z WHERE z.f < 100)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($1, 10)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), >($1, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.5:DECIMAL(2, 1), $0)])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(e=[$0])
      LogicalFilter(condition=[<($1, 100)])
        LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[>($1, $2)])
      +- LogicalJoin(condition=[true], joinType=[left])
         :- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
         :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
         :  +- LogicalProject(c=[$0])
         :     +- LogicalFilter(condition=[>($1, 10)])
         :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
         +- LogicalAggregate(group=[{}], agg#0=[SINGLE_VALUE($0)])
            +- LogicalProject(EXPR$0=[*(0.5:DECIMAL(2, 1), $0)])
               +- LogicalAggregate(group=[{}], agg#0=[SUM($0)])
                  +- LogicalProject(e=[$0])
                     +- LogicalFilter(condition=[<($1, 100)])
                        +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery4">
    <Resource name="sql">
      <![CDATA[SELECT b FROM x WHERE a IN (SELECT c FROM y WHERE d > 10) AND b > (SELECT 0.5 * SUM(e) FROM z WHERE x.a = z.e AND z.f < 100)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($1, 10)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), >($1, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*(0.5:DECIMAL(2, 1), $0)])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(e=[$0])
      LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
        LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalJoin(condition=[AND(=($0, $2), >($1, *(0.5:DECIMAL(2, 1), $3)))], joinType=[inner])
   :- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   :  +- LogicalProject(c=[$0])
   :     +- LogicalFilter(condition=[>($1, 10)])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
   +- LogicalAggregate(group=[{0}], agg#0=[SUM($1)])
      +- LogicalProject(e1=[$0], e=[$0])
         +- LogicalFilter(condition=[AND(<($1, 100), IS NOT NULL($0))])
            +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testInWithUncorrelatedOnWhere_ScalarQuery6">
    <Resource name="sql">
      <![CDATA[SELECT b FROM x WHERE a IN (SELECT c FROM y WHERE d > (SELECT SUM(e) FROM z WHERE y.c = z.e AND z.f < 100))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($1, $SCALAR_QUERY({
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
  LogicalProject(e=[$0])
    LogicalFilter(condition=[AND(=($cor0.c, $0), <($1, 100))])
      LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
}))], variablesSet=[[$cor0]])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalJoin(condition=[AND(=($0, $2), >($1, $3))], joinType=[inner])
         :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
         +- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
            +- LogicalProject(e1=[$0], e=[$0])
               +- LogicalFilter(condition=[AND(<($1, 100), IS NOT NULL($0))])
                  +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithCorrelatedOnWhere_AND1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l, r WHERE l.a = r.d AND EXISTS (SELECT * FROM t t1 WHERE l.b = t1.j AND t1.k > 50) AND c >= 1 AND EXISTS (SELECT * FROM t t2 WHERE l.a = t2.i AND t2.j < 100)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), EXISTS({
LogicalFilter(condition=[AND(=($cor0.b, $1), >(CAST($2):BIGINT, 50))])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}), >=(CAST($2):BIGINT, 1), EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), >=(CAST($2):BIGINT, 1))])
   +- LogicalJoin(condition=[=($0, $6)], joinType=[semi])
      :- LogicalJoin(condition=[=($1, $6)], joinType=[semi])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :  :  +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
      :  +- LogicalProject(j=[$1])
      :     +- LogicalFilter(condition=[>(CAST($2):BIGINT, 50)])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
      +- LogicalProject(i=[$0])
         +- LogicalFilter(condition=[<($1, 100)])
            +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithCorrelatedOnWhere_AND2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l, r WHERE l.a = r.d AND EXISTS (SELECT * FROM t t1 WHERE l.b = t1.j AND t1.k > 50) AND (c >= 1 AND EXISTS (SELECT * FROM t t2 WHERE l.a = t2.i AND t2.j < 100))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), EXISTS({
LogicalFilter(condition=[AND(=($cor0.b, $1), >(CAST($2):BIGINT, 50))])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}), >=(CAST($2):BIGINT, 1), EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), >=(CAST($2):BIGINT, 1))])
   +- LogicalJoin(condition=[=($0, $6)], joinType=[semi])
      :- LogicalJoin(condition=[=($1, $6)], joinType=[semi])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :  :  +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
      :  +- LogicalProject(j=[$1])
      :     +- LogicalFilter(condition=[>(CAST($2):BIGINT, 50)])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
      +- LogicalProject(i=[$0])
         +- LogicalFilter(condition=[<($1, 100)])
            +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedAndCorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r) AND EXISTS (SELECT * FROM t WHERE l.a = t.i AND t.j < 100)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}), EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($0, $3)], joinType=[semi])
   :- LogicalJoin(condition=[$3], joinType=[semi])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   :  +- LogicalProject($f0=[IS NOT NULL($0)])
   :     +- LogicalAggregate(group=[{}], m=[MIN($0)])
   :        +- LogicalProject(i=[true])
   :           +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
   +- LogicalProject(i=[$0])
      +- LogicalFilter(condition=[<($1, 100)])
         +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedAndCorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE l.a <> r.d) AND EXISTS (SELECT * FROM t WHERE j < 100)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(EXISTS({
LogicalFilter(condition=[<>($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}), EXISTS({
LogicalFilter(condition=[<($1, 100)])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[$3], joinType=[semi])
   :- LogicalJoin(condition=[<>($0, $3)], joinType=[semi])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   :  +- LogicalProject(d=[$0])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalFilter(condition=[<($1, 100)])
               +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedAndCorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE EXISTS (SELECT * FROM t) AND l.a = r.d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[AND(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}), =($cor0.a, $0))])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($0, $3)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0])
      +- LogicalJoin(condition=[$3], joinType=[semi])
         :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject($f0=[IS NOT NULL($0)])
            +- LogicalAggregate(group=[{}], m=[MIN($0)])
               +- LogicalProject(i=[true])
                  +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedAndCorrelatedOnWhere4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE EXISTS (SELECT * FROM r WHERE EXISTS (SELECT * FROM t WHERE r.d = t.i))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[EXISTS({
LogicalFilter(condition=[=($cor0.d, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})], variablesSet=[[$cor0]])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[$3], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalJoin(condition=[=($0, $3)], joinType=[semi])
               :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
               +- LogicalProject(i=[$0])
                  +- LogicalFilter(condition=[true])
                     +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiExistsWithUncorrelatedOnWhere_AND1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x, y WHERE x.a = y.c AND EXISTS (SELECT * FROM z z1 WHERE z1.e > 50) AND b >= 1 AND EXISTS (SELECT * FROM z z2 WHERE z2.f < 100)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3])
+- LogicalFilter(condition=[AND(=($0, $2), EXISTS({
LogicalFilter(condition=[>($0, 50)])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
}), >=($1, 1), EXISTS({
LogicalFilter(condition=[<($1, 100)])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
}))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3])
+- LogicalFilter(condition=[AND(=($0, $2), >=($1, 1))])
   +- LogicalJoin(condition=[$4], joinType=[semi])
      :- LogicalJoin(condition=[$4], joinType=[semi])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      :  :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
      :  +- LogicalProject($f0=[IS NOT NULL($0)])
      :     +- LogicalAggregate(group=[{}], m=[MIN($0)])
      :        +- LogicalProject(i=[true])
      :           +- LogicalFilter(condition=[>($0, 50)])
      :              +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalFilter(condition=[<($1, 100)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithCorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d FROM r WHERE c = f) AND b IN (SELECT j FROM t WHERE c = k)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}), IN($1, {
LogicalProject(j=[$1])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($2, $4))], joinType=[semi])
   :- LogicalJoin(condition=[AND(=($0, $3), =($2, $4))], joinType=[semi])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   :  +- LogicalProject(d=[$0], f=[$2])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
   +- LogicalProject(j=[$1], k=[$2])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithCorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d FROM r WHERE c = f) AND b IN (SELECT j FROM t WHERE a = i AND k <> 'test')]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}), IN($1, {
LogicalProject(j=[$1])
  LogicalFilter(condition=[AND(=($cor0.a, $0), <>($2, _UTF-16LE'test'))])
    LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($1, $3), =($0, $4))], joinType=[semi])
   :- LogicalJoin(condition=[AND(=($0, $3), =($2, $4))], joinType=[semi])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   :  +- LogicalProject(d=[$0], f=[$2])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
   +- LogicalProject(j=[$1], i=[$0])
      +- LogicalFilter(condition=[<>($2, _UTF-16LE'test')])
         +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithCorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT r.d FROM r WHERE l.b = r.e AND r.f IN (SELECT t.k FROM t WHERE r.e = t.j))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), IN($2, {
LogicalProject(k=[$2])
  LogicalFilter(condition=[=($cor1.e, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}))], variablesSet=[[$cor1]])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0], e=[$1])
      +- LogicalJoin(condition=[AND(=($2, $3), =($1, $4))], joinType=[semi])
         :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(k=[$2], j=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedAndCorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x WHERE a IN (SELECT c FROM y WHERE x.b = y.d) AND b IN (SELECT f FROM z)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), IN($1, {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[=($1, $2)], joinType=[semi])
   :- LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[semi])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   :  +- LogicalProject(c=[$0], d=[$1])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
   +- LogicalProject(f=[$1])
      +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedAndCorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a IN ( SELECT c FROM y) AND b IN (SELECT e FROM z WHERE z.f = x.b)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), IN($1, {
LogicalProject(e=[$0])
  LogicalFilter(condition=[=($1, $cor0.b)])
    LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(=($1, $4), =($3, $1))], joinType=[semi])
   :- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   :  +- LogicalProject(c=[$0])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
   +- LogicalProject(e=[$0], f=[$1], e0=[CAST($0):BIGINT])
      +- LogicalProject(e=[$0], f=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedAndCorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a IN (SELECT c FROM y WHERE d IN (SELECT f FROM z) AND x.b = y.d)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(IN($1, {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
}), =($cor0.b, $1))])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(=($0, $2), =($1, $3))], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalJoin(condition=[=($1, $2)], joinType=[semi])
         :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
         +- LogicalProject(f=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedAndCorrelatedOnWhere4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a IN (SELECT c FROM y WHERE d IN (SELECT f FROM z WHERE z.e = y.c))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[IN($1, {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.c)])
    LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})], variablesSet=[[$cor0]])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalJoin(condition=[AND(=($1, $2), =($3, $0))], joinType=[semi])
         :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
         +- LogicalProject(f=[$1], e=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a IN ( SELECT c FROM y) AND b IN (SELECT e FROM z)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), IN($1, {
LogicalProject(e=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($1, $3)], joinType=[semi])
   :- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   :  +- LogicalProject(c=[$0])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
   +- LogicalProject(e=[$0], e0=[CAST($0):BIGINT])
      +- LogicalProject(e=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a IN (SELECT c FROM y WHERE d IN (SELECT f FROM z))]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[IN($1, {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($0, $2)], joinType=[semi])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalJoin(condition=[=($1, $2)], joinType=[semi])
         :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
         +- LogicalProject(f=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiInWithUncorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a + 1 IN ( SELECT c FROM y WHERE d > 10) AND b * 2 IN (SELECT e FROM z WHERE f < 10)]]>
    </Resource>
    <Resource name="ast">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(IN(+($0, 1), {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($1, 10)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}), IN(*($1, 2), {
LogicalProject(e=[$0])
  LogicalFilter(condition=[<($1, 10)])
    LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="optimized rel plan">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[=($3, $5)], joinType=[semi])
      :- LogicalProject(a=[$0], b=[$1], $f2=[$2], $f3=[*($1, 2)])
      :  +- LogicalJoin(condition=[=($2, $3)], joinType=[semi])
      :     :- LogicalProject(a=[$0], b=[$1], $f2=[+($0, 1)])
      :     :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      :     +- LogicalProject(c=[$0])
      :        +- LogicalFilter(condition=[>($1, 10)])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
      +- LogicalProject(e=[$0], e0=[CAST($0):BIGINT])
         +- LogicalProject(e=[$0])
            +- LogicalFilter(condition=[<($1, 10)])
               +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
</Root>
