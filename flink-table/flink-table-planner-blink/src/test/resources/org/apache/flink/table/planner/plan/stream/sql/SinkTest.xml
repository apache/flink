<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testAppendSink">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(name=[`default_catalog`.`default_database`.`appendSink`], fields=[a])
+- LogicalProject(cnt=[$1])
   +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
      +- LogicalProject(a=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(name=[`default_catalog`.`default_database`.`appendSink`], fields=[a], updateAsRetraction=[false], accMode=[Acc])
+- Calc(select=[cnt], updateAsRetraction=[false], accMode=[Acc])
   +- GroupAggregate(groupBy=[a], select=[a, COUNT(*) AS cnt], updateAsRetraction=[false], accMode=[Acc])
      +- Exchange(distribution=[hash[a]], updateAsRetraction=[true], accMode=[Acc])
         +- Calc(select=[a], updateAsRetraction=[true], accMode=[Acc])
            +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUpsertAndUpsertSink">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(name=[`default_catalog`.`default_database`.`upsertSink1`], fields=[b, cnt])
+- LogicalAggregate(group=[{0}], frequency=[COUNT($1)])
   +- LogicalProject(cnt=[$1], b=[$0])
      +- LogicalFilter(condition=[<($0, 4)])
         +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
            +- LogicalProject(b=[$1], a=[$0])
               +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

LogicalSink(name=[`default_catalog`.`default_database`.`upsertSink2`], fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[AND(>=($0, 4), <($0, 6))])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[b], select=[b, COUNT(a) AS cnt], updateAsRetraction=[true], accMode=[AccRetract], reuse_id=[1])
+- Exchange(distribution=[hash[b]], updateAsRetraction=[true], accMode=[Acc])
   +- Calc(select=[b, a], updateAsRetraction=[true], accMode=[Acc])
      +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])

Sink(name=[`default_catalog`.`default_database`.`upsertSink1`], fields=[b, cnt], updateAsRetraction=[false], accMode=[Acc])
+- GroupAggregate(groupBy=[cnt], select=[cnt, COUNT_RETRACT(b) AS frequency], updateAsRetraction=[false], accMode=[Acc])
   +- Exchange(distribution=[hash[cnt]], updateAsRetraction=[true], accMode=[AccRetract])
      +- Calc(select=[b, cnt], where=[<(b, 4)], updateAsRetraction=[true], accMode=[AccRetract])
         +- Reused(reference_id=[1])

Sink(name=[`default_catalog`.`default_database`.`upsertSink2`], fields=[b, cnt], updateAsRetraction=[false], accMode=[AccRetract])
+- Calc(select=[b, cnt], where=[AND(>=(b, 4), <(b, 6))], updateAsRetraction=[false], accMode=[AccRetract])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAppendUpsertAndRetractSink">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(name=[`default_catalog`.`default_database`.`appendSink`], fields=[a, b])
+- LogicalUnion(all=[true])
   :- LogicalProject(a=[$0], b=[$1])
   :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
   +- LogicalProject(d=[$0], e=[$1])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2]])

LogicalSink(name=[`default_catalog`.`default_database`.`retractSink`], fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], b=[$1])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalProject(a=[$0], b=[$1])
         :     :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
         :     +- LogicalProject(d=[$0], e=[$1])
         :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2]])
         +- LogicalProject(i=[$0], j=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable3]])

LogicalSink(name=[`default_catalog`.`default_database`.`upsertSink`], fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], b=[$1])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalProject(a=[$0], b=[$1])
         :     :  +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
         :     +- LogicalProject(d=[$0], e=[$1])
         :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable2]])
         +- LogicalProject(i=[$0], j=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable3]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Union(all=[true], union=[a, b], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])
:- Calc(select=[a, b], updateAsRetraction=[true], accMode=[Acc])
:  +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
+- Calc(select=[d, e], updateAsRetraction=[true], accMode=[Acc])
   +- DataStreamScan(table=[[default_catalog, default_database, MyTable2]], fields=[d, e, f], updateAsRetraction=[true], accMode=[Acc])

Sink(name=[`default_catalog`.`default_database`.`appendSink`], fields=[a, b], updateAsRetraction=[false], accMode=[Acc])
+- Reused(reference_id=[1])

Exchange(distribution=[single], updateAsRetraction=[true], accMode=[Acc], reuse_id=[2])
+- Calc(select=[a], updateAsRetraction=[true], accMode=[Acc])
   +- Union(all=[true], union=[a, b], updateAsRetraction=[true], accMode=[Acc])
      :- Reused(reference_id=[1])
      +- Calc(select=[i, j], updateAsRetraction=[true], accMode=[Acc])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable3]], fields=[i, j, k], updateAsRetraction=[true], accMode=[Acc])

Sink(name=[`default_catalog`.`default_database`.`retractSink`], fields=[total_sum], updateAsRetraction=[true], accMode=[AccRetract])
+- GroupAggregate(select=[SUM(a) AS total_sum], updateAsRetraction=[true], accMode=[AccRetract])
   +- Reused(reference_id=[2])

Sink(name=[`default_catalog`.`default_database`.`upsertSink`], fields=[total_min], updateAsRetraction=[false], accMode=[Acc])
+- GroupAggregate(select=[MIN(a) AS total_min], updateAsRetraction=[false], accMode=[Acc])
   +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRetractAndUpsertSink">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(name=[`default_catalog`.`default_database`.`retractSink`], fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[<($0, 4)])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])

LogicalSink(name=[`default_catalog`.`default_database`.`upsertSink`], fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[AND(>=($0, 4), <($0, 6))])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[b], select=[b, COUNT(a) AS cnt], updateAsRetraction=[true], accMode=[AccRetract], reuse_id=[1])
+- Exchange(distribution=[hash[b]], updateAsRetraction=[true], accMode=[Acc])
   +- Calc(select=[b, a], updateAsRetraction=[true], accMode=[Acc])
      +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])

Sink(name=[`default_catalog`.`default_database`.`retractSink`], fields=[b, cnt], updateAsRetraction=[true], accMode=[AccRetract])
+- Calc(select=[b, cnt], where=[<(b, 4)], updateAsRetraction=[true], accMode=[AccRetract])
   +- Reused(reference_id=[1])

Sink(name=[`default_catalog`.`default_database`.`upsertSink`], fields=[b, cnt], updateAsRetraction=[false], accMode=[AccRetract])
+- Calc(select=[b, cnt], where=[AND(>=(b, 4), <(b, 6))], updateAsRetraction=[false], accMode=[AccRetract])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRetractSink1">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(name=[`default_catalog`.`default_database`.`retractSink`], fields=[a, cnt])
+- LogicalAggregate(group=[{0}], cnt=[COUNT()])
   +- LogicalProject(a=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(name=[`default_catalog`.`default_database`.`retractSink`], fields=[a, cnt], updateAsRetraction=[true], accMode=[AccRetract])
+- GroupAggregate(groupBy=[a], select=[a, COUNT(*) AS cnt], updateAsRetraction=[true], accMode=[AccRetract])
   +- Exchange(distribution=[hash[a]], updateAsRetraction=[true], accMode=[Acc])
      +- Calc(select=[a], updateAsRetraction=[true], accMode=[Acc])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRetractSink2">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(name=[`default_catalog`.`default_database`.`retractSink`], fields=[cnt, a])
+- LogicalAggregate(group=[{0}], a=[COUNT($1)])
   +- LogicalProject(cnt=[$1], a=[$0])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT()])
         +- LogicalProject(a=[$0])
            +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(name=[`default_catalog`.`default_database`.`retractSink`], fields=[cnt, a], updateAsRetraction=[true], accMode=[AccRetract])
+- GroupAggregate(groupBy=[cnt], select=[cnt, COUNT_RETRACT(a) AS a], updateAsRetraction=[true], accMode=[AccRetract])
   +- Exchange(distribution=[hash[cnt]], updateAsRetraction=[true], accMode=[AccRetract])
      +- GroupAggregate(groupBy=[a], select=[a, COUNT(*) AS cnt], updateAsRetraction=[true], accMode=[AccRetract])
         +- Exchange(distribution=[hash[a]], updateAsRetraction=[true], accMode=[Acc])
            +- Calc(select=[a], updateAsRetraction=[true], accMode=[Acc])
               +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUpsertSink1">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(name=[`default_catalog`.`default_database`.`upsertSink`], fields=[a, cnt])
+- LogicalAggregate(group=[{0}], cnt=[COUNT()])
   +- LogicalProject(a=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(name=[`default_catalog`.`default_database`.`upsertSink`], fields=[a, cnt], updateAsRetraction=[false], accMode=[Acc])
+- GroupAggregate(groupBy=[a], select=[a, COUNT(*) AS cnt], updateAsRetraction=[false], accMode=[Acc])
   +- Exchange(distribution=[hash[a]], updateAsRetraction=[true], accMode=[Acc])
      +- Calc(select=[a], updateAsRetraction=[true], accMode=[Acc])
         +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUpsertSink2">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(name=[`default_catalog`.`default_database`.`upsertSink`], fields=[a1, b, c1])
+- LogicalProject(a1=[$2], b=[$3], c1=[$1])
   +- LogicalFilter(condition=[=($2, $0)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(a3=[$0], c1=[$2])
         :  +- LogicalFilter(condition=[<($1, 5)])
         :     +- LogicalProject(a=[$0], b=[$1], c=[$2])
         :        +- LogicalFilter(condition=[>=($0, 0)])
         :           +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
         +- LogicalProject(a1=[$0], b=[$1], c2=[$3])
            +- LogicalFilter(condition=[=($0, $2)])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalProject(a1=[$0], b=[$1])
                  :  +- LogicalFilter(condition=[<=($0, 10)])
                  :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
                  +- LogicalProject(a2=[$0], c=[$2])
                     +- LogicalFilter(condition=[>=($1, 5)])
                        +- LogicalProject(a=[$0], b=[$1], c=[$2])
                           +- LogicalFilter(condition=[>=($0, 0)])
                              +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(name=[`default_catalog`.`default_database`.`upsertSink`], fields=[a1, b, c1], updateAsRetraction=[false], accMode=[Acc])
+- Calc(select=[a1, b, c1], updateAsRetraction=[false], accMode=[Acc])
   +- Join(joinType=[InnerJoin], where=[=(a1, a3)], select=[a3, c1, a1, b, c2], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey], updateAsRetraction=[false], accMode=[Acc])
      :- Exchange(distribution=[hash[a3]], updateAsRetraction=[true], accMode=[Acc])
      :  +- Calc(select=[a AS a3, c AS c1], where=[AND(>=(a, 0), <(b, 5))], updateAsRetraction=[true], accMode=[Acc])
      :     +- DataStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])
      +- Exchange(distribution=[hash[a1]], updateAsRetraction=[true], accMode=[Acc])
         +- Calc(select=[a1, b, c AS c2], updateAsRetraction=[true], accMode=[Acc])
            +- Join(joinType=[InnerJoin], where=[=(a, a2)], select=[a, b, a2, c], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey], updateAsRetraction=[true], accMode=[Acc])
               :- Exchange(distribution=[hash[a]], updateAsRetraction=[true], accMode=[Acc])
               :  +- Calc(select=[a, b], where=[<=(a, 10)], updateAsRetraction=[true], accMode=[Acc])
               :     +- Reused(reference_id=[1])
               +- Exchange(distribution=[hash[a2]], updateAsRetraction=[true], accMode=[Acc])
                  +- Calc(select=[a AS a2, c], where=[AND(>=(a, 0), >=(b, 5))], updateAsRetraction=[true], accMode=[Acc])
                     +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
</Root>
