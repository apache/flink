<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testNestedProject">
    <Resource name="sql">
      <![CDATA[
SELECT id,
    deepNested.nested1.name AS nestedName,
    nested.`value` AS nestedValue,
    deepNested.nested2.flag AS nestedFlag,
    deepNested.nested2.num AS nestedNum
FROM T
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(id=[$0], nestedName=[$1.nested1.name], nestedValue=[$2.value], nestedFlag=[$1.nested2.flag], nestedNum=[$1.nested2.num])
+- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestSource(read nested fields: id.*, deepNested.*, nested.*, name.*)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[id, deepNested.nested1.name AS nestedName, nested.value AS nestedValue, deepNested.nested2.flag AS nestedFlag, deepNested.nested2.num AS nestedNum])
+- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestSource(read nested fields: id.*, deepNested.nested2.num, deepNested.nested2.flag, deepNested.nested1.name, nested.value)]]], fields=[id, deepNested, nested])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProcTimeTableSourceSimple">
    <Resource name="sql">
      <![CDATA[SELECT pTime, id, name, val FROM procTimeT]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(pTime=[$1], id=[$0], name=[$3], val=[$2])
+- LogicalTableScan(table=[[default_catalog, default_database, procTimeT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[PROCTIME_MATERIALIZE(pTime) AS pTime, id, name, val])
+- TableSourceScan(table=[[default_catalog, default_database, procTimeT]], fields=[id, pTime, val, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProjectWithMapping">
    <Resource name="sql">
      <![CDATA[SELECT name, rtime, val FROM T]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$4], rtime=[$1], val=[$2])
+- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: p-rtime, p-id, p-name, p-val)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[name, rtime, val])
+- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: p-rtime, p-id, p-name, p-val)]]], fields=[id, rtime, val, ptime, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProjectWithoutInputRef">
    <Resource name="sql">
      <![CDATA[SELECT COUNT(1) FROM T]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
+- LogicalProject($f0=[1])
   +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: id, name)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(select=[COUNT(*) AS EXPR$0])
+- Exchange(distribution=[single])
   +- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: )]]], fields=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProjectWithoutRowtime">
    <Resource name="sql">
      <![CDATA[SELECT ptime, name, val, id FROM T]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(ptime=[$3], name=[$4], val=[$2], id=[$0])
+- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: id, name, val, rtime)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[PROCTIME_MATERIALIZE(ptime) AS ptime, name, val, id])
+- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: id, name, val, rtime)]]], fields=[id, rtime, val, ptime, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProjectWithRowtimeProctime">
    <Resource name="sql">
      <![CDATA[SELECT name, val, id FROM T]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$4], val=[$2], id=[$0])
+- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: id, name, val, rtime)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[name, val, id])
+- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: id, name, val, rtime)]]], fields=[id, rtime, val, ptime, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowTimeTableSourceGroupWindow">
    <Resource name="sql">
      <![CDATA[
SELECT name,
    TUMBLE_END(rowtime, INTERVAL '10' MINUTE),
    AVG(val)
FROM rowTimeT WHERE val > 100
   GROUP BY name, TUMBLE(rowtime, INTERVAL '10' MINUTE)
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$0], EXPR$1=[TUMBLE_END($1)], EXPR$2=[$2])
+- LogicalAggregate(group=[{0, 1}], EXPR$2=[AVG($2)])
   +- LogicalProject(name=[$3], $f1=[TUMBLE($1, 600000:INTERVAL MINUTE)], val=[$2])
      +- LogicalFilter(condition=[>($2, 100)])
         +- LogicalTableScan(table=[[default_catalog, default_database, rowTimeT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[name, CAST(w$end) AS EXPR$1, EXPR$2])
+- GroupWindowAggregate(groupBy=[name], window=[TumblingGroupWindow], properties=[w$start, w$end, w$rowtime, w$proctime], select=[name, AVG(val) AS EXPR$2, start('w$) AS w$start, end('w$) AS w$end, rowtime('w$) AS w$rowtime, proctime('w$) AS w$proctime])
   +- Exchange(distribution=[hash[name]])
      +- Calc(select=[name, rowtime, val], where=[>(val, 100)])
         +- TableSourceScan(table=[[default_catalog, default_database, rowTimeT]], fields=[id, rowtime, val, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTableSourceWithTimestampRowTimeField">
    <Resource name="sql">
      <![CDATA[SELECT rowtime, id, name, val FROM rowTimeT]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(rowtime=[$1], id=[$0], name=[$3], val=[$2])
+- LogicalTableScan(table=[[default_catalog, default_database, rowTimeT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[rowtime, id, name, val])
+- TableSourceScan(table=[[default_catalog, default_database, rowTimeT]], fields=[id, rowtime, val, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTableSourceWithLongRowTimeField">
    <Resource name="sql">
      <![CDATA[SELECT rowtime, id, name, val FROM rowTimeT]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(rowtime=[$1], id=[$0], name=[$3], val=[$2])
+- LogicalTableScan(table=[[default_catalog, default_database, rowTimeT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[rowtime, id, name, val])
+- TableSourceScan(table=[[default_catalog, default_database, rowTimeT]], fields=[id, rowtime, val, name])
]]>
    </Resource>
  </TestCase>
</Root>
