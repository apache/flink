<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testNotTranspose">
    <Resource name="sql">
      <![CDATA[
SELECT category, max_price, rank_num FROM (
  SELECT *,
      ROW_NUMBER() OVER (PARTITION BY category ORDER BY max_price ASC) as rank_num
  FROM (
     SELECT category, shopId, max(price) as max_price
     FROM T
     GROUP BY category, shopId
  ))
WHERE rank_num <= 3
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(category=[$0], max_price=[$2], rank_num=[$3])
+- LogicalFilter(condition=[<=($3, 3)])
   +- LogicalProject(category=[$0], shopId=[$1], max_price=[$2], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalAggregate(group=[{0, 1}], max_price=[MAX($2)])
         +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestTableSource(category, shopId, price)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
FlinkLogicalCalc(select=[category, max_price, w0$o0])
+- FlinkLogicalRank(rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=3], partitionBy=[category], orderBy=[max_price ASC], select=[category, shopId, max_price, w0$o0])
   +- FlinkLogicalAggregate(group=[{0, 1}], max_price=[MAX($2)])
      +- FlinkLogicalLegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [TestTableSource(category, shopId, price)]]], fields=[category, shopId, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProjectRankNumber">
    <Resource name="sql">
      <![CDATA[
SELECT rank_num, rowtime, a, rank_num, a, rank_num FROM (
  SELECT *,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime DESC) as rank_num
  FROM MyTable)
WHERE  rank_num <= 2
    ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(rank_num=[$4], rowtime=[$3], a=[$0], rank_num0=[$4], a0=[$0], rank_num1=[$4])
+- LogicalFilter(condition=[<=($4, 2)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], rowtime=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
FlinkLogicalCalc(select=[rank_num1 AS rank_num, rowtime, a, rank_num1 AS rank_num0, a AS a0, rank_num1])
+- FlinkLogicalRank(rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[a], orderBy=[rowtime DESC], select=[a, rowtime, rank_num1])
   +- FlinkLogicalCalc(select=[a, rowtime])
      +- FlinkLogicalDataStreamTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneOrderKeys">
    <Resource name="sql">
      <![CDATA[
SELECT a FROM (
  SELECT *,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime DESC) as rank_num
  FROM MyTable)
WHERE rank_num = 1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], rowtime=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
FlinkLogicalCalc(select=[a])
+- FlinkLogicalRank(rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[rowtime DESC], select=[a, rowtime])
   +- FlinkLogicalCalc(select=[a, rowtime])
      +- FlinkLogicalDataStreamTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPrunePartitionKeys">
    <Resource name="sql">
      <![CDATA[
SELECT rowtime FROM (
  SELECT *,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime DESC) as rank_num
  FROM MyTable)
WHERE rank_num = 1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(rowtime=[$3])
+- LogicalFilter(condition=[=($4, 1)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], rowtime=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
FlinkLogicalCalc(select=[rowtime])
+- FlinkLogicalRank(rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=1], partitionBy=[a], orderBy=[rowtime DESC], select=[a, rowtime])
   +- FlinkLogicalCalc(select=[a, rowtime])
      +- FlinkLogicalDataStreamTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPushCalcWithConditionIntoRank">
    <Resource name="sql">
      <![CDATA[
SELECT rowtime, c FROM (
  SELECT *,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime DESC) as rank_num
  FROM MyTable)
WHERE  rank_num <= 2 AND a > 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(rowtime=[$3], c=[$2])
+- LogicalFilter(condition=[AND(<=($4, 2), >($0, 10))])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], rowtime=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
FlinkLogicalCalc(select=[rowtime, c], where=[>(a, 10)])
+- FlinkLogicalRank(rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[a], orderBy=[rowtime DESC], select=[a, c, rowtime])
   +- FlinkLogicalCalc(select=[a, c, rowtime])
      +- FlinkLogicalDataStreamTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneRankNumber">
    <Resource name="sql">
      <![CDATA[
SELECT a, rowtime FROM (
  SELECT *,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime DESC) as rank_num
  FROM MyTable)
WHERE rank_num <= 2
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], rowtime=[$3])
+- LogicalFilter(condition=[<=($4, 2)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], rowtime=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
FlinkLogicalRank(rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[a], orderBy=[rowtime DESC], select=[a, rowtime])
+- FlinkLogicalCalc(select=[a, rowtime])
   +- FlinkLogicalDataStreamTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneUniqueKeys">
    <Resource name="sql">
      <![CDATA[
SELECT category, max_price, rank_num FROM (
  SELECT *,
      ROW_NUMBER() OVER (PARTITION BY category ORDER BY max_price ASC) as rank_num
  FROM (
     SELECT category, shopId, max(price) as max_price, min(price) as min_price
     FROM T
     GROUP BY category, shopId
  ))
WHERE rank_num <= 3
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(category=[$0], max_price=[$2], rank_num=[$4])
+- LogicalFilter(condition=[<=($4, 3)])
   +- LogicalProject(category=[$0], shopId=[$1], max_price=[$2], min_price=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalAggregate(group=[{0, 1}], max_price=[MAX($2)], min_price=[MIN($2)])
         +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestTableSource(category, shopId, price)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
FlinkLogicalCalc(select=[category, max_price, w0$o0])
+- FlinkLogicalRank(rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=3], partitionBy=[category], orderBy=[max_price ASC], select=[category, shopId, max_price, w0$o0])
   +- FlinkLogicalCalc(select=[category, shopId, max_price])
      +- FlinkLogicalAggregate(group=[{0, 1}], max_price=[MAX($2)], min_price=[MIN($2)])
         +- FlinkLogicalLegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [TestTableSource(category, shopId, price)]]], fields=[category, shopId, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPruneUnusedProject">
    <Resource name="sql">
      <![CDATA[
SELECT category, shopId, max_price, rank_num
FROM (
  SELECT category, shopId, max_price,
      ROW_NUMBER() OVER (PARTITION BY category ORDER BY max_price ASC) as rank_num
  FROM (
     SELECT category, shopId, max(price) as max_price, min(price) as min_price
     FROM T
     GROUP BY category, shopId
  ))
WHERE rank_num <= 3
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(category=[$0], shopId=[$1], max_price=[$2], rank_num=[$3])
+- LogicalFilter(condition=[<=($3, 3)])
   +- LogicalProject(category=[$0], shopId=[$1], max_price=[$2], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $2 NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalAggregate(group=[{0, 1}], max_price=[MAX($2)], min_price=[MIN($2)])
         +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestTableSource(category, shopId, price)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
FlinkLogicalRank(rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=3], partitionBy=[category], orderBy=[max_price ASC], select=[category, shopId, max_price, w0$o0])
+- FlinkLogicalCalc(select=[category, shopId, max_price])
   +- FlinkLogicalAggregate(group=[{0, 1}], max_price=[MAX($2)], min_price=[MIN($2)])
      +- FlinkLogicalLegacyTableSourceScan(table=[[default_catalog, default_database, T, source: [TestTableSource(category, shopId, price)]]], fields=[category, shopId, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTrivialCalcIsRemoved">
    <Resource name="sql">
      <![CDATA[
SELECT a, rowtime, rank_num FROM (
  SELECT *,
      ROW_NUMBER() OVER (PARTITION BY a ORDER BY rowtime DESC) as rank_num
  FROM MyTable)
WHERE  rank_num <= 2
    ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], rowtime=[$3], rank_num=[$4])
+- LogicalFilter(condition=[<=($4, 2)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], rowtime=[$3], rank_num=[ROW_NUMBER() OVER (PARTITION BY $0 ORDER BY $3 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
      +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
FlinkLogicalRank(rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=2], partitionBy=[a], orderBy=[rowtime DESC], select=[a, rowtime, w0$o0])
+- FlinkLogicalCalc(select=[a, rowtime])
   +- FlinkLogicalDataStreamTableScan(table=[[default_catalog, default_database, MyTable]])
]]>
    </Resource>
  </TestCase>
</Root>
