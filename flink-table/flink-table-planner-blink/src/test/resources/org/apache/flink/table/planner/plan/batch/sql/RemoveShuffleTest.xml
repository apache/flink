<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testRemoveHashShuffle_Agg_PartialKey">
    <Resource name="sql">
      <![CDATA[
 WITH r AS (SELECT a, c, count(b) as cnt FROM x GROUP BY a, c)
 SELECT count(cnt) FROM r group by c
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$1])
+- LogicalAggregate(group=[{0}], EXPR$0=[COUNT()])
   +- LogicalProject(c=[$1])
      +- LogicalAggregate(group=[{0, 1}], cnt=[COUNT($2)])
         +- LogicalProject(a=[$0], c=[$2], b=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- HashAggregate(isMerge=[false], groupBy=[c], select=[c, COUNT(*) AS EXPR$0])
   +- Calc(select=[c])
      +- HashAggregate(isMerge=[true], groupBy=[a, c], select=[a, c])
         +- Exchange(distribution=[hash[c]])
            +- LocalHashAggregate(groupBy=[a, c], select=[a, c])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_BroadcastHashJoin">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x, y WHERE a = d AND c LIKE 'He%')
SELECT * FROM r r1, r r2 WHERE r1.a = r2.d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], a0=[$6], b0=[$7], c0=[$8], d0=[$9], e0=[$10], f0=[$11])
+- LogicalFilter(condition=[=($0, $9)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
      :  +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
      :     +- LogicalJoin(condition=[true], joinType=[inner])
      :        :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
         +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
               +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
MultipleInput(readOrder=[0,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[=(a, d0)], select=[a, b, c, d, e, f, a0, b0, c0, d0, e0, f0], isBroadcast=[true], build=[right])\n:- HashJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, c, d, e, f], isBroadcast=[true], build=[left])\n:  :- [#2] Exchange(distribution=[broadcast])\n:  +- [#3] LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])\n+- [#1] Exchange(distribution=[broadcast])\n])
:- Exchange(distribution=[broadcast])
:  +- HashJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, c, d, e, f], isBroadcast=[true], build=[left])
:     :- Exchange(distribution=[broadcast])
:     :  +- Calc(select=[a, b, c], where=[LIKE(c, _UTF-16LE'He%')])
:     :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[a, b, c], where=[LIKE(c, _UTF-16LE'He%')])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_Correlate1">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT f, count(f) as cnt FROM y GROUP BY f),
     v as (SELECT f1, f, cnt FROM r, LATERAL TABLE(split(f)) AS T(f1))
SELECT * FROM x, v WHERE c = f
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], f1=[$3], f=[$4], cnt=[$5])
+- LogicalFilter(condition=[=($2, $4)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(f1=[$2], f=[$0], cnt=[$1])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{0}])
            :- LogicalAggregate(group=[{0}], cnt=[COUNT($0)])
            :  +- LogicalProject(f=[$2])
            :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
            +- LogicalTableFunctionScan(invocation=[split($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[=(c, f)], select=[a, b, c, f1, f, cnt], build=[right])\n:- [#1] Exchange(distribution=[hash[c]])\n+- Calc(select=[f0 AS f1, f, cnt])\n   +- Correlate(invocation=[split($cor0.f)], correlate=[table(split($cor0.f))], select=[f,cnt,f0], rowType=[RecordType(VARCHAR(2147483647) f, BIGINT cnt, VARCHAR(2147483647) f0)], joinType=[INNER])\n      +- HashAggregate(isMerge=[true], groupBy=[f], select=[f, Final_COUNT(count$0) AS cnt])\n         +- [#2] Exchange(distribution=[hash[f]])\n])
:- Exchange(distribution=[hash[c]])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Exchange(distribution=[hash[f]])
   +- LocalHashAggregate(groupBy=[f], select=[f, Partial_COUNT(f) AS count$0])
      +- Calc(select=[f])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_Correlate2">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT f, count(f) as cnt FROM y GROUP BY f),
     v as (SELECT f, f1 FROM r, LATERAL TABLE(split(f)) AS T(f1))
SELECT * FROM x, v WHERE c = f AND f LIKE '%llo%'
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], f=[$3], f1=[$4])
+- LogicalFilter(condition=[AND(=($2, $3), LIKE($3, _UTF-16LE'%llo%'))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(f=[$0], f1=[$2])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{0}])
            :- LogicalAggregate(group=[{0}], cnt=[COUNT($0)])
            :  +- LogicalProject(f=[$2])
            :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
            +- LogicalTableFunctionScan(invocation=[split($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[=(c, f)], select=[a, b, c, f, f1], build=[right])\n:- [#1] Exchange(distribution=[hash[c]])\n+- Calc(select=[f, f0 AS f1])\n   +- Correlate(invocation=[split($cor0.f)], correlate=[table(split($cor0.f))], select=[f,cnt,f0], rowType=[RecordType(VARCHAR(2147483647) f, BIGINT cnt, VARCHAR(2147483647) f0)], joinType=[INNER])\n      +- HashAggregate(isMerge=[true], groupBy=[f], select=[f, Final_COUNT(count$0) AS cnt])\n         +- [#2] Exchange(distribution=[hash[f]])\n])
:- Exchange(distribution=[hash[c]])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Exchange(distribution=[hash[f]])
   +- LocalHashAggregate(groupBy=[f], select=[f, Partial_COUNT(f) AS count$0])
      +- Calc(select=[f], where=[LIKE(f, _UTF-16LE'%llo%')])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_Correlate3">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT f, count(f) as cnt FROM y GROUP BY f),
     v as (SELECT f1 FROM r, LATERAL TABLE(split(f)) AS T(f1))
SELECT * FROM x, v WHERE c = f1
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], f1=[$3])
+- LogicalFilter(condition=[=($2, $3)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(f1=[$2])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{0}])
            :- LogicalAggregate(group=[{0}], cnt=[COUNT($0)])
            :  +- LogicalProject(f=[$2])
            :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
            +- LogicalTableFunctionScan(invocation=[split($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(c, f1)], select=[a, b, c, f1], build=[right])
:- Exchange(distribution=[hash[c]])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Exchange(distribution=[hash[f1]])
   +- Calc(select=[f0 AS f1])
      +- Correlate(invocation=[split($cor0.f)], correlate=[table(split($cor0.f))], select=[f,cnt,f0], rowType=[RecordType(VARCHAR(2147483647) f, BIGINT cnt, VARCHAR(2147483647) f0)], joinType=[INNER])
         +- HashAggregate(isMerge=[true], groupBy=[f], select=[f, Final_COUNT(count$0) AS cnt])
            +- Exchange(distribution=[hash[f]])
               +- LocalHashAggregate(groupBy=[f], select=[f, Partial_COUNT(f) AS count$0])
                  +- Calc(select=[f])
                     +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_HashAggregate">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x, y WHERE a = d AND c LIKE 'He%')
SELECT sum(b) FROM r group by a
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$1])
+- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
   +- LogicalProject(a=[$0], b=[$1])
      +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- HashAggregate(isMerge=[false], groupBy=[a], select=[a, SUM(b) AS EXPR$0])
   +- Calc(select=[a, b])
      +- HashJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, d], build=[left])
         :- Exchange(distribution=[hash[a]])
         :  +- Calc(select=[a, b], where=[LIKE(c, _UTF-16LE'He%')])
         :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
         +- Exchange(distribution=[hash[d]])
            +- Calc(select=[d])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_HashAggregate_1">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x, y WHERE a = d AND c LIKE 'He%')
SELECT sum(b) FROM r group by a, d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$2])
+- LogicalAggregate(group=[{0, 1}], EXPR$0=[SUM($2)])
   +- LogicalProject(a=[$0], d=[$3], b=[$1])
      +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- HashAggregate(isMerge=[false], groupBy=[a, d], select=[a, d, SUM(b) AS EXPR$0])
   +- HashJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, d], build=[left])
      :- Exchange(distribution=[hash[a]])
      :  +- Calc(select=[a, b], where=[LIKE(c, _UTF-16LE'He%')])
      :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
      +- Exchange(distribution=[hash[d]])
         +- Calc(select=[d])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_HashAggregate_2">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x, y WHERE a = d AND c LIKE 'He%')
SELECT sum(b) FROM r group by d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$1])
+- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
   +- LogicalProject(d=[$3], b=[$1])
      +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- HashAggregate(isMerge=[false], groupBy=[d], select=[d, SUM(b) AS EXPR$0])
   +- Calc(select=[d, b])
      +- HashJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, d], build=[left])
         :- Exchange(distribution=[hash[a]])
         :  +- Calc(select=[a, b], where=[LIKE(c, _UTF-16LE'He%')])
         :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
         +- Exchange(distribution=[hash[d]])
            +- Calc(select=[d])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_HashJoin">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x, y WHERE a = d AND c LIKE 'He%')
SELECT * FROM r r1, r r2 WHERE r1.a = r2.d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], a0=[$6], b0=[$7], c0=[$8], d0=[$9], e0=[$10], f0=[$11])
+- LogicalFilter(condition=[=($0, $9)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
      :  +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
      :     +- LogicalJoin(condition=[true], joinType=[inner])
      :        :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
         +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
               +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
MultipleInput(readOrder=[0,2,0,1], members=[\nHashJoin(joinType=[InnerJoin], where=[=(a, d0)], select=[a, b, c, d, e, f, a0, b0, c0, d0, e0, f0], build=[right])\n:- HashJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, c, d, e, f], build=[left])\n:  :- [#1] Exchange(distribution=[hash[a]])\n:  +- [#2] Exchange(distribution=[hash[d]])\n+- HashJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, c, d, e, f], build=[left])\n   :- [#3] Exchange(distribution=[hash[a]])\n   +- [#4] Exchange(distribution=[hash[d]])\n])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b, c], where=[LIKE(c, _UTF-16LE'He%')])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
:- Exchange(distribution=[hash[d]])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b, c], where=[LIKE(c, _UTF-16LE'He%')])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Exchange(distribution=[hash[d]])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_HashJoin_1">
    <Resource name="sql">
      <![CDATA[
WITH r1 AS (SELECT a, c, sum(b) FROM x group by a, c),
r2 AS (SELECT a, c, sum(b) FROM x group by a, c)
SELECT * FROM r1, r2 WHERE r1.a = r2.a and r1.c = r2.c
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], c=[$1], EXPR$2=[$2], a0=[$3], c0=[$4], EXPR$20=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), =($1, $4))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)])
      :  +- LogicalProject(a=[$0], c=[$2], b=[$1])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      +- LogicalAggregate(group=[{0, 1}], EXPR$2=[SUM($2)])
         +- LogicalProject(a=[$0], c=[$2], b=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[AND(=(a, a0), =(c, c0))], select=[a, c, EXPR$2, a0, c0, EXPR$20], build=[right])\n:- HashAggregate(isMerge=[true], groupBy=[a, c], select=[a, c, Final_SUM(sum$0) AS EXPR$2])\n:  +- [#1] Exchange(distribution=[hash[a, c]])\n+- HashAggregate(isMerge=[true], groupBy=[a, c], select=[a, c, Final_SUM(sum$0) AS EXPR$2])\n   +- [#2] Exchange(distribution=[hash[a, c]])\n])
:- Exchange(distribution=[hash[a, c]])
:  +- LocalHashAggregate(groupBy=[a, c], select=[a, c, Partial_SUM(b) AS sum$0])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Exchange(distribution=[hash[a, c]])
   +- LocalHashAggregate(groupBy=[a, c], select=[a, c, Partial_SUM(b) AS sum$0])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_HashJoin_FOJ">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x full join (SELECT * FROM y WHERE e = 2) r on a = d)
SELECT * FROM r r1, r r2 WHERE r1.a = r2.d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], a0=[$6], b0=[$7], c0=[$8], d0=[$9], e0=[$10], f0=[$11])
+- LogicalFilter(condition=[=($0, $9)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
      :  +- LogicalJoin(condition=[=($0, $3)], joinType=[full])
      :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      :     +- LogicalProject(d=[$0], e=[$1], f=[$2])
      :        +- LogicalFilter(condition=[=($1, 2)])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
         +- LogicalJoin(condition=[=($0, $3)], joinType=[full])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
            +- LogicalProject(d=[$0], e=[$1], f=[$2])
               +- LogicalFilter(condition=[=($1, 2)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashJoin(joinType=[InnerJoin], where=[=(a, d0)], select=[a, b, c, d, e, f, a0, b0, c0, d0, e0, f0], build=[right])
:- Exchange(distribution=[hash[a]])
:  +- HashJoin(joinType=[FullOuterJoin], where=[=(a, d)], select=[a, b, c, d, e, f], build=[right])
:     :- Exchange(distribution=[hash[a]])
:     :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
:     +- Exchange(distribution=[hash[d]])
:        +- Calc(select=[d, CAST(2:BIGINT) AS e, f], where=[=(e, 2:BIGINT)])
:           +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
+- Exchange(distribution=[hash[d]])
   +- HashJoin(joinType=[FullOuterJoin], where=[=(a, d)], select=[a, b, c, d, e, f], build=[right])
      :- Exchange(distribution=[hash[a]])
      :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
      +- Exchange(distribution=[hash[d]])
         +- Calc(select=[d, CAST(2:BIGINT) AS e, f], where=[=(e, 2:BIGINT)])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_HashJoin_LOJ">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x left join (SELECT * FROM y WHERE e = 2) r on a = d)
SELECT * FROM r r1, r r2 WHERE r1.a = r2.d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], a0=[$6], b0=[$7], c0=[$8], d0=[$9], e0=[$10], f0=[$11])
+- LogicalFilter(condition=[=($0, $9)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
      :  +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      :     +- LogicalProject(d=[$0], e=[$1], f=[$2])
      :        +- LogicalFilter(condition=[=($1, 2)])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
         +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
            +- LogicalProject(d=[$0], e=[$1], f=[$2])
               +- LogicalFilter(condition=[=($1, 2)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
MultipleInput(readOrder=[0,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[=(a, d0)], select=[a, b, c, d, e, f, a0, b0, c0, d0, e0, f0], build=[right])\n:- HashJoin(joinType=[LeftOuterJoin], where=[=(a, d)], select=[a, b, c, d, e, f], build=[right])\n:  :- [#2] Exchange(distribution=[hash[a]])\n:  +- [#3] Exchange(distribution=[hash[d]])\n+- [#1] Exchange(distribution=[hash[d]])\n])
:- Exchange(distribution=[hash[d]])
:  +- HashJoin(joinType=[LeftOuterJoin], where=[=(a, d)], select=[a, b, c, d, e, f], build=[right])
:     :- Exchange(distribution=[hash[a]])
:     :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
:     +- Exchange(distribution=[hash[d]])
:        +- Calc(select=[d, CAST(2:BIGINT) AS e, f], where=[=(e, 2:BIGINT)])
:           +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
:- Exchange(distribution=[hash[a]])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Exchange(distribution=[hash[d]])
   +- Calc(select=[d, CAST(2:BIGINT) AS e, f], where=[=(e, 2:BIGINT)])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_HashJoin_ROJ">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x right join (SELECT * FROM y WHERE e = 2) r on a = d)
SELECT * FROM r r1, r r2 WHERE r1.a = r2.d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], a0=[$6], b0=[$7], c0=[$8], d0=[$9], e0=[$10], f0=[$11])
+- LogicalFilter(condition=[=($0, $9)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
      :  +- LogicalJoin(condition=[=($0, $3)], joinType=[right])
      :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      :     +- LogicalProject(d=[$0], e=[$1], f=[$2])
      :        +- LogicalFilter(condition=[=($1, 2)])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
         +- LogicalJoin(condition=[=($0, $3)], joinType=[right])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
            +- LogicalProject(d=[$0], e=[$1], f=[$2])
               +- LogicalFilter(condition=[=($1, 2)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
MultipleInput(readOrder=[2,1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[=(a, d0)], select=[a, b, c, d, e, f, a0, b0, c0, d0, e0, f0], build=[right])\n:- [#1] Exchange(distribution=[hash[a]])\n+- HashJoin(joinType=[RightOuterJoin], where=[=(a, d)], select=[a, b, c, d, e, f], build=[right])\n   :- [#2] Exchange(distribution=[hash[a]])\n   +- [#3] Exchange(distribution=[hash[d]])\n])
:- Exchange(distribution=[hash[a]])
:  +- HashJoin(joinType=[RightOuterJoin], where=[=(a, d)], select=[a, b, c, d, e, f], build=[right])
:     :- Exchange(distribution=[hash[a]])
:     :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
:     +- Exchange(distribution=[hash[d]])
:        +- Calc(select=[d, CAST(2:BIGINT) AS e, f], where=[=(e, 2:BIGINT)])
:           +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
:- Exchange(distribution=[hash[a]])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Exchange(distribution=[hash[d]])
   +- Calc(select=[d, CAST(2:BIGINT) AS e, f], where=[=(e, 2:BIGINT)])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_Join_PartialKey">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT d, count(f) as cnt FROM y GROUP BY d)
SELECT * FROM x, r WHERE x.a = r.d AND x.b = r.cnt
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], cnt=[$4])
+- LogicalFilter(condition=[AND(=($0, $3), =($1, $4))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
MultipleInput(readOrder=[1,0], members=[\nHashJoin(joinType=[InnerJoin], where=[AND(=(a, d), =(b, cnt))], select=[a, b, c, d, cnt], build=[right])\n:- [#1] Exchange(distribution=[hash[a]])\n+- HashAggregate(isMerge=[true], groupBy=[d], select=[d, Final_COUNT(count$0) AS cnt])\n   +- [#2] Exchange(distribution=[hash[d]])\n])
:- Exchange(distribution=[hash[a]])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Exchange(distribution=[hash[d]])
   +- LocalHashAggregate(groupBy=[d], select=[d, Partial_COUNT(f) AS count$0])
      +- Calc(select=[d, f])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_MultiOverWindowAgg">
    <Resource name="sql">
      <![CDATA[
 SELECT
   SUM(b) sum_b,
   AVG(SUM(b)) OVER (PARTITION BY a, c) avg_b,
   RANK() OVER (PARTITION BY c ORDER BY a, c) rn,
   c
 FROM x
 GROUP BY a, c
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(sum_b=[$2], avg_b=[/(CASE(>(COUNT($2) OVER (PARTITION BY $0, $1), 0), $SUM0($2) OVER (PARTITION BY $0, $1), null:BIGINT), COUNT($2) OVER (PARTITION BY $0, $1))], rn=[RANK() OVER (PARTITION BY $1 ORDER BY $0 NULLS FIRST, $1 NULLS FIRST)], c=[$1])
+- LogicalAggregate(group=[{0, 1}], sum_b=[SUM($2)])
   +- LogicalProject(a=[$0], c=[$2], b=[$1])
      +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[sum_b, /(CASE(>(w0$o0, 0:BIGINT), w0$o1, null:BIGINT), w0$o0) AS avg_b, w1$o0 AS rn, c])
+- OverAggregate(partitionBy=[c], orderBy=[a ASC, c ASC], window#0=[RANK(*) AS w1$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[a, c, sum_b, w0$o0, w0$o1, w1$o0])
   +- Sort(orderBy=[c ASC, a ASC])
      +- Exchange(distribution=[hash[c]])
         +- OverAggregate(partitionBy=[a, c], window#0=[COUNT(sum_b) AS w0$o0, $SUM0(sum_b) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], select=[a, c, sum_b, w0$o0, w0$o1])
            +- Sort(orderBy=[a ASC, c ASC])
               +- HashAggregate(isMerge=[true], groupBy=[a, c], select=[a, c, Final_SUM(sum$0) AS sum_b])
                  +- Exchange(distribution=[hash[a, c]])
                     +- LocalHashAggregate(groupBy=[a, c], select=[a, c, Partial_SUM(b) AS sum$0])
                        +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_NestedLoopJoin">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x, y WHERE a = d AND c LIKE 'He%')
SELECT * FROM r r1, r r2 WHERE r1.a = r2.d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], a0=[$6], b0=[$7], c0=[$8], d0=[$9], e0=[$10], f0=[$11])
+- LogicalFilter(condition=[=($0, $9)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
      :  +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
      :     +- LogicalJoin(condition=[true], joinType=[inner])
      :        :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
         +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
               +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
MultipleInput(readOrder=[0,0,1], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[=(a, d0)], select=[a, b, c, d, e, f, a0, b0, c0, d0, e0, f0], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- NestedLoopJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, c, d, e, f], build=[left])\n   :- [#2] Exchange(distribution=[broadcast])\n   +- [#3] LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])\n])
:- Exchange(distribution=[broadcast])
:  +- NestedLoopJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, c, d, e, f], build=[left])
:     :- Exchange(distribution=[broadcast])
:     :  +- Calc(select=[a, b, c], where=[LIKE(c, _UTF-16LE'He%')])
:     :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
:- Exchange(distribution=[broadcast])
:  +- Calc(select=[a, b, c], where=[LIKE(c, _UTF-16LE'He%')])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_OverWindowAgg">
    <Resource name="sql">
      <![CDATA[
 SELECT
   SUM(b) sum_b,
   AVG(SUM(b)) OVER (PARTITION BY c) avg_b,
   RANK() OVER (PARTITION BY c ORDER BY c) rn,
   c
 FROM x
 GROUP BY c
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(sum_b=[$1], avg_b=[/(CASE(>(COUNT($1) OVER (PARTITION BY $0), 0), $SUM0($1) OVER (PARTITION BY $0), null:BIGINT), COUNT($1) OVER (PARTITION BY $0))], rn=[RANK() OVER (PARTITION BY $0 ORDER BY $0 NULLS FIRST)], c=[$0])
+- LogicalAggregate(group=[{0}], sum_b=[SUM($1)])
   +- LogicalProject(c=[$2], b=[$1])
      +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[sum_b, /(CASE(>(w0$o0, 0:BIGINT), w0$o1, null:BIGINT), w0$o0) AS avg_b, w1$o0 AS rn, c])
+- OverAggregate(partitionBy=[c], orderBy=[], window#0=[COUNT(sum_b) AS w0$o0, $SUM0(sum_b) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], window#1=[RANK(*) AS w1$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[c, sum_b, w0$o0, w0$o1, w1$o0])
   +- Sort(orderBy=[c ASC])
      +- HashAggregate(isMerge=[true], groupBy=[c], select=[c, Final_SUM(sum$0) AS sum_b])
         +- Exchange(distribution=[hash[c]])
            +- LocalHashAggregate(groupBy=[c], select=[c, Partial_SUM(b) AS sum$0])
               +- Calc(select=[c, b])
                  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_OverWindowAgg_PartialKey">
    <Resource name="sql">
      <![CDATA[
 SELECT
   SUM(b) sum_b,
   AVG(SUM(b)) OVER (PARTITION BY c) avg_b,
   RANK() OVER (PARTITION BY c ORDER BY c) rn,
   c
 FROM x
 GROUP BY a, c
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(sum_b=[$2], avg_b=[/(CASE(>(COUNT($2) OVER (PARTITION BY $1), 0), $SUM0($2) OVER (PARTITION BY $1), null:BIGINT), COUNT($2) OVER (PARTITION BY $1))], rn=[RANK() OVER (PARTITION BY $1 ORDER BY $1 NULLS FIRST)], c=[$1])
+- LogicalAggregate(group=[{0, 1}], sum_b=[SUM($2)])
   +- LogicalProject(a=[$0], c=[$2], b=[$1])
      +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[sum_b, /(CASE(>(w0$o0, 0:BIGINT), w0$o1, null:BIGINT), w0$o0) AS avg_b, w1$o0 AS rn, c])
+- OverAggregate(partitionBy=[c], orderBy=[], window#0=[COUNT(sum_b) AS w0$o0, $SUM0(sum_b) AS w0$o1 RANG BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING], window#1=[RANK(*) AS w1$o0 RANG BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW], select=[c, sum_b, w0$o0, w0$o1, w1$o0])
   +- Calc(select=[c, sum_b])
      +- Sort(orderBy=[c ASC])
         +- HashAggregate(isMerge=[true], groupBy=[a, c], select=[a, c, Final_SUM(sum$0) AS sum_b])
            +- Exchange(distribution=[hash[c]])
               +- LocalHashAggregate(groupBy=[a, c], select=[a, c, Partial_SUM(b) AS sum$0])
                  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_Rank">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM (
 SELECT a, b, RANK() OVER(PARTITION BY a ORDER BY b) rk FROM (
   SELECT a, SUM(b) AS b FROM x GROUP BY a
 )
) WHERE rk <= 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], rk=[$2])
+- LogicalFilter(condition=[<=($2, 10)])
   +- LogicalProject(a=[$0], b=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST)])
      +- LogicalAggregate(group=[{0}], b=[SUM($1)])
         +- LogicalProject(a=[$0], b=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a], orderBy=[b ASC], global=[true], select=[a, b, w0$o0])
+- Sort(orderBy=[a ASC, b ASC])
   +- HashAggregate(isMerge=[true], groupBy=[a], select=[a, Final_SUM(sum$0) AS b])
      +- Exchange(distribution=[hash[a]])
         +- LocalHashAggregate(groupBy=[a], select=[a, Partial_SUM(b) AS sum$0])
            +- Calc(select=[a, b])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_Rank_PartialKey1">
    <Resource name="sql">
      <![CDATA[
SELECT a, SUM(b) FROM (
 SELECT * FROM (
   SELECT a, b, c, RANK() OVER(PARTITION BY a, c ORDER BY b) rk FROM x)
 WHERE rk <= 10
) GROUP BY a
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[SUM($1)])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[<=($3, 10)])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], rk=[RANK() OVER (PARTITION BY $0, $2 ORDER BY $1 NULLS FIRST)])
         +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
HashAggregate(isMerge=[false], groupBy=[a], select=[a, SUM(b) AS EXPR$1])
+- Calc(select=[a, b])
   +- Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a, c], orderBy=[b ASC], global=[true], select=[a, b, c, w0$o0])
      +- Sort(orderBy=[a ASC, c ASC, b ASC])
         +- Exchange(distribution=[hash[a]])
            +- Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a, c], orderBy=[b ASC], global=[false], select=[a, b, c])
               +- Sort(orderBy=[a ASC, c ASC, b ASC])
                  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_Rank_PartialKey2">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM (
 SELECT a, b, c, RANK() OVER(PARTITION BY a, c ORDER BY b) rk FROM (
   SELECT a, SUM(b) AS b, COUNT(c) AS c FROM x GROUP BY a
 )
) WHERE rk <= 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], rk=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], rk=[RANK() OVER (PARTITION BY $0, $2 ORDER BY $1 NULLS FIRST)])
      +- LogicalAggregate(group=[{0}], b=[SUM($1)], c=[COUNT($2)])
         +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a, c], orderBy=[b ASC], global=[true], select=[a, b, c, w0$o0])
+- Sort(orderBy=[a ASC, c ASC, b ASC])
   +- HashAggregate(isMerge=[true], groupBy=[a], select=[a, Final_SUM(sum$0) AS b, Final_COUNT(count$1) AS c])
      +- Exchange(distribution=[hash[a]])
         +- LocalHashAggregate(groupBy=[a], select=[a, Partial_SUM(b) AS sum$0, Partial_COUNT(c) AS count$1])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_Rank_PartialKey3">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM (
 SELECT a, b, c, RANK() OVER(PARTITION BY a, c ORDER BY b) rk FROM (
   SELECT a, SUM(b) AS b, COUNT(c) AS c FROM x GROUP BY a
 )
) WHERE rk <= 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], rk=[$3])
+- LogicalFilter(condition=[<=($3, 10)])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], rk=[RANK() OVER (PARTITION BY $0, $2 ORDER BY $1 NULLS FIRST)])
      +- LogicalAggregate(group=[{0}], b=[SUM($1)], c=[COUNT($2)])
         +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a, c], orderBy=[b ASC], global=[true], select=[a, b, c, w0$o0])
+- Sort(orderBy=[a ASC, c ASC, b ASC])
   +- HashAggregate(isMerge=[true], groupBy=[a], select=[a, Final_SUM(sum$0) AS b, Final_COUNT(count$1) AS c])
      +- Exchange(distribution=[hash[a]])
         +- LocalHashAggregate(groupBy=[a], select=[a, Partial_SUM(b) AS sum$0, Partial_COUNT(c) AS count$1])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_Rank_Singleton1">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM (
 SELECT a, b, RANK() OVER(ORDER BY b) rk FROM (
   SELECT COUNT(a) AS a, SUM(b) AS b FROM x
 )
) WHERE rk <= 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], rk=[$2])
+- LogicalFilter(condition=[<=($2, 10)])
   +- LogicalProject(a=[$0], b=[$1], rk=[RANK() OVER (ORDER BY $1 NULLS FIRST)])
      +- LogicalAggregate(group=[{}], a=[COUNT($0)], b=[SUM($1)])
         +- LogicalProject(a=[$0], b=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=10], partitionBy=[], orderBy=[b ASC], global=[true], select=[a, b, w0$o0])
+- Sort(orderBy=[b ASC])
   +- HashAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS a, Final_SUM(sum$1) AS b])
      +- Exchange(distribution=[single])
         +- LocalHashAggregate(select=[Partial_COUNT(a) AS count$0, Partial_SUM(b) AS sum$1])
            +- Calc(select=[a, b])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_Rank_Singleton2">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM (
 SELECT a, b, RANK() OVER(PARTITION BY a ORDER BY b) rk FROM (
   SELECT COUNT(a) AS a, SUM(b) AS b FROM x
 )
) WHERE rk <= 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], rk=[$2])
+- LogicalFilter(condition=[<=($2, 10)])
   +- LogicalProject(a=[$0], b=[$1], rk=[RANK() OVER (PARTITION BY $0 ORDER BY $1 NULLS FIRST)])
      +- LogicalAggregate(group=[{}], a=[COUNT($0)], b=[SUM($1)])
         +- LogicalProject(a=[$0], b=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Rank(rankType=[RANK], rankRange=[rankStart=1, rankEnd=10], partitionBy=[a], orderBy=[b ASC], global=[true], select=[a, b, w0$o0])
+- Sort(orderBy=[a ASC, b ASC])
   +- HashAggregate(isMerge=[true], select=[Final_COUNT(count$0) AS a, Final_SUM(sum$1) AS b])
      +- Exchange(distribution=[hash])
         +- LocalHashAggregate(select=[Partial_COUNT(a) AS count$0, Partial_SUM(b) AS sum$1])
            +- Calc(select=[a, b])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_SortAggregate">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x, y WHERE a = d AND c LIKE 'He%')
SELECT sum(b) FROM r group by a
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$1])
+- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
   +- LogicalProject(a=[$0], b=[$1])
      +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- SortAggregate(isMerge=[false], groupBy=[a], select=[a, SUM(b) AS EXPR$0])
   +- Calc(select=[a, b])
      +- Sort(orderBy=[a ASC])
         +- HashJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, d], build=[left])
            :- Exchange(distribution=[hash[a]])
            :  +- Calc(select=[a, b], where=[LIKE(c, _UTF-16LE'He%')])
            :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
            +- Exchange(distribution=[hash[d]])
               +- Calc(select=[d])
                  +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_SortAggregate_1">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x, y WHERE a = d AND c LIKE 'He%')
SELECT sum(b) FROM r group by a, d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$2])
+- LogicalAggregate(group=[{0, 1}], EXPR$0=[SUM($2)])
   +- LogicalProject(a=[$0], d=[$3], b=[$1])
      +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- SortAggregate(isMerge=[false], groupBy=[a, d], select=[a, d, SUM(b) AS EXPR$0])
   +- Sort(orderBy=[a ASC, d ASC])
      +- HashJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, d], build=[left])
         :- Exchange(distribution=[hash[a]])
         :  +- Calc(select=[a, b], where=[LIKE(c, _UTF-16LE'He%')])
         :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
         +- Exchange(distribution=[hash[d]])
            +- Calc(select=[d])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_SortAggregate_2">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x, y WHERE a = d AND c LIKE 'He%')
SELECT sum(b) FROM r group by d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$1])
+- LogicalAggregate(group=[{0}], EXPR$0=[SUM($1)])
   +- LogicalProject(d=[$3], b=[$1])
      +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
         +- LogicalJoin(condition=[true], joinType=[inner])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- SortAggregate(isMerge=[false], groupBy=[d], select=[d, SUM(b) AS EXPR$0])
   +- Calc(select=[d, b])
      +- Sort(orderBy=[d ASC])
         +- HashJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, d], build=[left])
            :- Exchange(distribution=[hash[a]])
            :  +- Calc(select=[a, b], where=[LIKE(c, _UTF-16LE'He%')])
            :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
            +- Exchange(distribution=[hash[d]])
               +- Calc(select=[d])
                  +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_SortMergeJoin">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x, y WHERE a = d AND c LIKE 'He%')
SELECT * FROM r r1, r r2 WHERE r1.a = r2.d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], a0=[$6], b0=[$7], c0=[$8], d0=[$9], e0=[$10], f0=[$11])
+- LogicalFilter(condition=[=($0, $9)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
      :  +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
      :     +- LogicalJoin(condition=[true], joinType=[inner])
      :        :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
         +- LogicalFilter(condition=[AND(=($0, $3), LIKE($2, _UTF-16LE'He%'))])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
               +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
MultipleInput(members=[\nSortMergeJoin(joinType=[InnerJoin], where=[=(a, d0)], select=[a, b, c, d, e, f, a0, b0, c0, d0, e0, f0], leftSorted=[true], rightSorted=[true])\n:- SortMergeJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, c, d, e, f])\n:  :- [#1] Exchange(distribution=[hash[a]])\n:  +- [#2] Exchange(distribution=[hash[d]])\n+- SortMergeJoin(joinType=[InnerJoin], where=[=(a, d)], select=[a, b, c, d, e, f])\n   :- [#3] Exchange(distribution=[hash[a]])\n   +- [#4] Exchange(distribution=[hash[d]])\n])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b, c], where=[LIKE(c, _UTF-16LE'He%')])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
:- Exchange(distribution=[hash[d]])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
:- Exchange(distribution=[hash[a]])
:  +- Calc(select=[a, b, c], where=[LIKE(c, _UTF-16LE'He%')])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Exchange(distribution=[hash[d]])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_SortMergeJoin_FOJ">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x full join (SELECT * FROM y WHERE e = 2) r on a = d)
SELECT * FROM r r1, r r2 WHERE r1.a = r2.d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], a0=[$6], b0=[$7], c0=[$8], d0=[$9], e0=[$10], f0=[$11])
+- LogicalFilter(condition=[=($0, $9)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
      :  +- LogicalJoin(condition=[=($0, $3)], joinType=[full])
      :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      :     +- LogicalProject(d=[$0], e=[$1], f=[$2])
      :        +- LogicalFilter(condition=[=($1, 2)])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
         +- LogicalJoin(condition=[=($0, $3)], joinType=[full])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
            +- LogicalProject(d=[$0], e=[$1], f=[$2])
               +- LogicalFilter(condition=[=($1, 2)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
SortMergeJoin(joinType=[InnerJoin], where=[=(a, d0)], select=[a, b, c, d, e, f, a0, b0, c0, d0, e0, f0])
:- Exchange(distribution=[hash[a]])
:  +- SortMergeJoin(joinType=[FullOuterJoin], where=[=(a, d)], select=[a, b, c, d, e, f])
:     :- Exchange(distribution=[hash[a]])
:     :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
:     +- Exchange(distribution=[hash[d]])
:        +- Calc(select=[d, CAST(2:BIGINT) AS e, f], where=[=(e, 2:BIGINT)])
:           +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
+- Exchange(distribution=[hash[d]])
   +- SortMergeJoin(joinType=[FullOuterJoin], where=[=(a, d)], select=[a, b, c, d, e, f])
      :- Exchange(distribution=[hash[a]])
      :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
      +- Exchange(distribution=[hash[d]])
         +- Calc(select=[d, CAST(2:BIGINT) AS e, f], where=[=(e, 2:BIGINT)])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_SortMergeJoin_LOJ">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x left join (SELECT * FROM y WHERE e = 2) r on a = d)
SELECT * FROM r r1, r r2 WHERE r1.a = r2.d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], a0=[$6], b0=[$7], c0=[$8], d0=[$9], e0=[$10], f0=[$11])
+- LogicalFilter(condition=[=($0, $9)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
      :  +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
      :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      :     +- LogicalProject(d=[$0], e=[$1], f=[$2])
      :        +- LogicalFilter(condition=[=($1, 2)])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
         +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
            +- LogicalProject(d=[$0], e=[$1], f=[$2])
               +- LogicalFilter(condition=[=($1, 2)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
MultipleInput(members=[\nSortMergeJoin(joinType=[InnerJoin], where=[=(a, d0)], select=[a, b, c, d, e, f, a0, b0, c0, d0, e0, f0], leftSorted=[true])\n:- SortMergeJoin(joinType=[LeftOuterJoin], where=[=(a, d)], select=[a, b, c, d, e, f])\n:  :- [#2] Exchange(distribution=[hash[a]])\n:  +- [#3] Exchange(distribution=[hash[d]])\n+- [#1] Exchange(distribution=[hash[d]])\n])
:- Exchange(distribution=[hash[d]])
:  +- SortMergeJoin(joinType=[LeftOuterJoin], where=[=(a, d)], select=[a, b, c, d, e, f])
:     :- Exchange(distribution=[hash[a]])
:     :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
:     +- Exchange(distribution=[hash[d]])
:        +- Calc(select=[d, CAST(2:BIGINT) AS e, f], where=[=(e, 2:BIGINT)])
:           +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
:- Exchange(distribution=[hash[a]])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Exchange(distribution=[hash[d]])
   +- Calc(select=[d, CAST(2:BIGINT) AS e, f], where=[=(e, 2:BIGINT)])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_SortMergeJoin_ROJ">
    <Resource name="sql">
      <![CDATA[
WITH r AS (SELECT * FROM x right join (SELECT * FROM y WHERE e = 2) r on a = d)
SELECT * FROM r r1, r r2 WHERE r1.a = r2.d
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], a0=[$6], b0=[$7], c0=[$8], d0=[$9], e0=[$10], f0=[$11])
+- LogicalFilter(condition=[=($0, $9)])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
      :  +- LogicalJoin(condition=[=($0, $3)], joinType=[right])
      :     :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      :     +- LogicalProject(d=[$0], e=[$1], f=[$2])
      :        +- LogicalFilter(condition=[=($1, 2)])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
         +- LogicalJoin(condition=[=($0, $3)], joinType=[right])
            :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
            +- LogicalProject(d=[$0], e=[$1], f=[$2])
               +- LogicalFilter(condition=[=($1, 2)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
MultipleInput(members=[\nSortMergeJoin(joinType=[InnerJoin], where=[=(a, d0)], select=[a, b, c, d, e, f, a0, b0, c0, d0, e0, f0], rightSorted=[true])\n:- [#1] Exchange(distribution=[hash[a]])\n+- SortMergeJoin(joinType=[RightOuterJoin], where=[=(a, d)], select=[a, b, c, d, e, f])\n   :- [#2] Exchange(distribution=[hash[a]])\n   +- [#3] Exchange(distribution=[hash[d]])\n])
:- Exchange(distribution=[hash[a]])
:  +- SortMergeJoin(joinType=[RightOuterJoin], where=[=(a, d)], select=[a, b, c, d, e, f])
:     :- Exchange(distribution=[hash[a]])
:     :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
:     +- Exchange(distribution=[hash[d]])
:        +- Calc(select=[d, CAST(2:BIGINT) AS e, f], where=[=(e, 2:BIGINT)])
:           +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
:- Exchange(distribution=[hash[a]])
:  +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
+- Exchange(distribution=[hash[d]])
   +- Calc(select=[d, CAST(2:BIGINT) AS e, f], where=[=(e, 2:BIGINT)])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveSingleExchange_Agg">
    <Resource name="sql">
      <![CDATA[SELECT avg(b) FROM x GROUP BY c  HAVING sum(b) > (SELECT sum(b) * 0.1 FROM x)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[$1])
+- LogicalFilter(condition=[>($2, $SCALAR_QUERY({
LogicalProject(EXPR$0=[*($0, 0.1:DECIMAL(2, 1))])
  LogicalAggregate(group=[{}], agg#0=[SUM($0)])
    LogicalProject(b=[$1])
      LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
}))])
   +- LogicalAggregate(group=[{0}], EXPR$0=[AVG($1)], agg#1=[SUM($1)])
      +- LogicalProject(c=[$2], b=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[EXPR$0])
+- MultipleInput(readOrder=[0,1], members=[\nNestedLoopJoin(joinType=[InnerJoin], where=[>($f2, $f0)], select=[EXPR$0, $f2, $f0], build=[right], singleRowJoin=[true])\n:- Calc(select=[EXPR$0, $f2])\n:  +- HashAggregate(isMerge=[true], groupBy=[c], select=[c, Final_AVG(sum$0, count$1) AS EXPR$0, Final_SUM(sum$2) AS $f2])\n:     +- [#2] Exchange(distribution=[hash[c]])\n+- [#1] Exchange(distribution=[broadcast])\n])
   :- Exchange(distribution=[broadcast])
   :  +- HashAggregate(isMerge=[false], select=[SINGLE_VALUE(EXPR$0) AS $f0])
   :     +- Calc(select=[*($f0, 0.1:DECIMAL(2, 1)) AS EXPR$0])
   :        +- HashAggregate(isMerge=[true], select=[Final_SUM(sum$0) AS $f0])
   :           +- Exchange(distribution=[single])
   :              +- LocalHashAggregate(select=[Partial_SUM(b) AS sum$0])
   :                 +- Calc(select=[b])
   :                    +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Exchange(distribution=[hash[c]])
      +- LocalHashAggregate(groupBy=[c], select=[c, Partial_AVG(b) AS (sum$0, count$1), Partial_SUM(b) AS sum$2])
         +- Calc(select=[c, b])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRemoveHashShuffle_Union">
    <Resource name="sql">
      <![CDATA[
WITH r AS (
SELECT count(a) as cnt, c FROM x WHERE b > 10 group by c
UNION ALL
SELECT count(d) as cnt, f FROM y WHERE e < 100 group by f)
SELECT r1.c, r1.cnt, r2.c, r2.cnt FROM r r1, r r2 WHERE r1.c = r2.c and r1.cnt < 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$1], cnt=[$0], c0=[$3], cnt0=[$2])
+- LogicalFilter(condition=[AND(=($1, $3), <($0, 10))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalUnion(all=[true])
      :  :- LogicalProject(cnt=[$1], c=[$0])
      :  :  +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
      :  :     +- LogicalProject(c=[$2], a=[$0])
      :  :        +- LogicalFilter(condition=[>($1, 10)])
      :  :           +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
      :  +- LogicalProject(cnt=[$1], f=[$0])
      :     +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
      :        +- LogicalProject(f=[$2], d=[$0])
      :           +- LogicalFilter(condition=[<($1, 100)])
      :              +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
      +- LogicalUnion(all=[true])
         :- LogicalProject(cnt=[$1], c=[$0])
         :  +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         :     +- LogicalProject(c=[$2], a=[$0])
         :        +- LogicalFilter(condition=[>($1, 10)])
         :           +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(cnt=[$1], f=[$0])
            +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
               +- LogicalProject(f=[$2], d=[$0])
                  +- LogicalFilter(condition=[<($1, 100)])
                     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[c, cnt, c0, cnt0])
+- MultipleInput(readOrder=[0,1,1], members=[\nHashJoin(joinType=[InnerJoin], where=[=(c, c0)], select=[cnt, c, cnt0, c0], isBroadcast=[true], build=[left])\n:- [#1] Exchange(distribution=[broadcast])\n+- Union(all=[true], union=[cnt, c])\n   :- Calc(select=[cnt, c])\n   :  +- HashAggregate(isMerge=[true], groupBy=[c], select=[c, Final_COUNT(count$0) AS cnt])\n   :     +- [#2] Exchange(distribution=[hash[c]])\n   +- Calc(select=[cnt, f])\n      +- HashAggregate(isMerge=[true], groupBy=[f], select=[f, Final_COUNT(count$0) AS cnt])\n         +- [#3] Exchange(distribution=[hash[f]])\n])
   :- Exchange(distribution=[broadcast])
   :  +- MultipleInput(members=[\nUnion(all=[true], union=[cnt, c])\n:- Calc(select=[cnt, c], where=[<(cnt, 10)])\n:  +- HashAggregate(isMerge=[true], groupBy=[c], select=[c, Final_COUNT(count$0) AS cnt])\n:     +- [#1] Exchange(distribution=[hash[c]])\n+- Calc(select=[cnt, f], where=[<(cnt, 10)])\n   +- HashAggregate(isMerge=[true], groupBy=[f], select=[f, Final_COUNT(count$0) AS cnt])\n      +- [#2] Exchange(distribution=[hash[f]])\n])
   :     :- Exchange(distribution=[hash[c]])
   :     :  +- LocalHashAggregate(groupBy=[c], select=[c, Partial_COUNT(a) AS count$0])
   :     :     +- Calc(select=[c, a], where=[>(b, 10)])
   :     :        +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   :     +- Exchange(distribution=[hash[f]])
   :        +- LocalHashAggregate(groupBy=[f], select=[f, Partial_COUNT(d) AS count$0])
   :           +- Calc(select=[f, d], where=[<(e, 100)])
   :              +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
   :- Exchange(distribution=[hash[c]])
   :  +- LocalHashAggregate(groupBy=[c], select=[c, Partial_COUNT(a) AS count$0])
   :     +- Calc(select=[c, a], where=[>(b, 10)])
   :        +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Exchange(distribution=[hash[f]])
      +- LocalHashAggregate(groupBy=[f], select=[f, Partial_COUNT(d) AS count$0])
         +- Calc(select=[f, d], where=[<(e, 100)])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])
]]>
    </Resource>
  </TestCase>
</Root>
