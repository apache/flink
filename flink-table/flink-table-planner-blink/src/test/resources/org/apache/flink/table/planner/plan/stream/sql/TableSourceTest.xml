<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testBoundedStreamTableSource">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
TableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterCannotPushDown">
    <Resource name="sql">
      <![CDATA[SELECT * FROM FilterableTable WHERE price > 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$0], id=[$1], amount=[$2], price=[$3])
+- LogicalFilter(condition=[>($3, 10)])
   +- LogicalTableScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[false], filter=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[name, id, amount, price], where=[>(price, 10)])
+- TableSourceScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[true], filter=[]]]], fields=[name, id, amount, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterCannotPushDown2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM FilterableTable WHERE amount > 2 OR price > 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$0], id=[$1], amount=[$2], price=[$3])
+- LogicalFilter(condition=[OR(>($2, 2), >($3, 10))])
   +- LogicalTableScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[false], filter=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[name, id, amount, price], where=[OR(>(amount, 2), >(price, 10))])
+- TableSourceScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[true], filter=[]]]], fields=[name, id, amount, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterCannotPushDown3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM FilterableTable WHERE amount > 2 OR amount < 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$0], id=[$1], amount=[$2], price=[$3])
+- LogicalFilter(condition=[OR(>($2, 2), <($2, 10))])
   +- LogicalTableScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[false], filter=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[name, id, amount, price], where=[OR(>(amount, 2), <(amount, 10))])
+- TableSourceScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[true], filter=[]]]], fields=[name, id, amount, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterCanPushDown">
    <Resource name="sql">
      <![CDATA[SELECT * FROM FilterableTable WHERE amount > 2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$0], id=[$1], amount=[$2], price=[$3])
+- LogicalFilter(condition=[>($2, 2)])
   +- LogicalTableScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[false], filter=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
TableSourceScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[true], filter=[greaterThan(amount, 2)]]]], fields=[name, id, amount, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testRowTimeTableSourceGroupWindow">
    <Resource name="sql">
      <![CDATA[
SELECT name,
    TUMBLE_END(rowtime, INTERVAL '10' MINUTE),
    AVG(val)
FROM rowTimeT WHERE val > 100
   GROUP BY name, TUMBLE(rowtime, INTERVAL '10' MINUTE)
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$0], EXPR$1=[TUMBLE_END($1)], EXPR$2=[$2])
+- LogicalAggregate(group=[{0, 1}], EXPR$2=[AVG($2)])
   +- LogicalProject(name=[$3], $f1=[$TUMBLE($1, 600000:INTERVAL MINUTE)], val=[$2])
      +- LogicalFilter(condition=[>($2, 100)])
         +- LogicalTableScan(table=[[default_catalog, default_database, rowTimeT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[name, w$end AS EXPR$1, EXPR$2])
+- GroupWindowAggregate(groupBy=[name], window=[TumblingGroupWindow('w$, rowtime, 600000)], properties=[w$start, w$end, w$rowtime, w$proctime], select=[name, AVG(val) AS EXPR$2, start('w$) AS w$start, end('w$) AS w$end, rowtime('w$) AS w$rowtime, proctime('w$) AS w$proctime])
   +- Exchange(distribution=[hash[name]])
      +- Calc(select=[name, rowtime, val], where=[>(val, 100)])
         +- TableSourceScan(table=[[default_catalog, default_database, rowTimeT]], fields=[id, rowtime, val, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterFullyPushDown">
    <Resource name="sql">
      <![CDATA[SELECT * FROM FilterableTable WHERE amount > 2 AND amount < 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$0], id=[$1], amount=[$2], price=[$3])
+- LogicalFilter(condition=[AND(>($2, 2), <($2, 10))])
   +- LogicalTableScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[false], filter=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
TableSourceScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[true], filter=[and(greaterThan(amount, 2), lessThan(amount, 10))]]]], fields=[name, id, amount, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPartialPushDown">
    <Resource name="sql">
      <![CDATA[SELECT * FROM FilterableTable WHERE amount > 2 AND price > 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$0], id=[$1], amount=[$2], price=[$3])
+- LogicalFilter(condition=[AND(>($2, 2), >($3, 10))])
   +- LogicalTableScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[false], filter=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[name, id, amount, price], where=[>(price, 10)])
+- TableSourceScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[true], filter=[greaterThan(amount, 2)]]]], fields=[name, id, amount, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownUnconvertedExpression">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM FilterableTable WHERE
    amount > 2 AND id < 100 AND CAST(amount AS BIGINT) > 10
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$0], id=[$1], amount=[$2], price=[$3])
+- LogicalFilter(condition=[AND(>($2, 2), <($1, 100), >(CAST($2):BIGINT, 10))])
   +- LogicalTableScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[false], filter=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[name, id, amount, price], where=[AND(<(id, 100), >(CAST(amount), 10))])
+- TableSourceScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[true], filter=[greaterThan(amount, 2)]]]], fields=[name, id, amount, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testFilterPushDownWithUdf">
    <Resource name="sql">
      <![CDATA[SELECT * FROM FilterableTable WHERE amount > 2 AND myUdf(amount) < 32]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$0], id=[$1], amount=[$2], price=[$3])
+- LogicalFilter(condition=[AND(>($2, 2), <(myUdf($2), 32))])
   +- LogicalTableScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[false], filter=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[name, id, amount, price], where=[<(Func1$(amount), 32)])
+- TableSourceScan(table=[[default_catalog, default_database, FilterableTable, source: [filterPushedDown=[true], filter=[greaterThan(amount, 2)]]]], fields=[name, id, amount, price])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNestedProject">
    <Resource name="sql">
      <![CDATA[
SELECT id,
    deepNested.nested1.name AS nestedName,
    nested.`value` AS nestedValue,
    deepNested.nested2.flag AS nestedFlag,
    deepNested.nested2.num AS nestedNum
FROM T
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(id=[$0], nestedName=[$1.nested1.name], nestedValue=[$2.value], nestedFlag=[$1.nested2.flag], nestedNum=[$1.nested2.num])
+- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestSource(read nested fields: id.*, deepNested.*, nested.*, name.*)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[id, deepNested.nested1.name AS nestedName, nested.value AS nestedValue, deepNested.nested2.flag AS nestedFlag, deepNested.nested2.num AS nestedNum])
+- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestSource(read nested fields: id.*, deepNested.nested2.num, deepNested.nested2.flag, deepNested.nested1.name, nested.value)]]], fields=[id, deepNested, nested])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartitionTableSource">
    <Resource name="sql">
      <![CDATA[SELECT * FROM PartitionableTable WHERE part2 > 1 and id > 2 AND part1 = 'A' ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3])
+- LogicalFilter(condition=[AND(>($3, 1), >($0, 2), =($2, _UTF-16LE'A'))])
   +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[id, name, CAST(_UTF-16LE'A':VARCHAR(2147483647) CHARACTER SET "UTF-16LE") AS part1, part2], where=[>(id, 2)])
+- TableSourceScan(table=[[default_catalog, default_database, PartitionableTable, source: [partitions={part1=A, part2=2}]]], fields=[id, name, part1, part2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testPartitionTableSourceWithUdf">
    <Resource name="sql">
      <![CDATA[SELECT * FROM PartitionableTable WHERE id > 2 AND MyUdf(part2) < 3]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(id=[$0], name=[$1], part1=[$2], part2=[$3])
+- LogicalFilter(condition=[AND(>($0, 2), <(MyUdf($3), 3))])
   +- LogicalTableScan(table=[[default_catalog, default_database, PartitionableTable]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[id, name, part1, part2], where=[>(id, 2)])
+- TableSourceScan(table=[[default_catalog, default_database, PartitionableTable, source: [partitions={part1=A, part2=1}, {part1=C, part2=1}]]], fields=[id, name, part1, part2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProcTimeTableSourceSimple">
    <Resource name="sql">
      <![CDATA[SELECT pTime, id, name, val FROM procTimeT]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(pTime=[$1], id=[$0], name=[$3], val=[$2])
+- LogicalTableScan(table=[[default_catalog, default_database, procTimeT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[PROCTIME_MATERIALIZE(pTime) AS pTime, id, name, val])
+- TableSourceScan(table=[[default_catalog, default_database, procTimeT]], fields=[id, pTime, val, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProjectWithMapping">
    <Resource name="sql">
      <![CDATA[SELECT name, rtime, val FROM T]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$4], rtime=[$1], val=[$2])
+- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: p-rtime, p-id, p-name, p-val)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[name, rtime, val])
+- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: p-rtime, p-id, p-name, p-val)]]], fields=[id, rtime, val, ptime, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProjectWithoutInputRef">
    <Resource name="sql">
      <![CDATA[SELECT COUNT(1) FROM T]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[COUNT()])
+- LogicalProject($f0=[1])
   +- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: id, name)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(select=[COUNT(*) AS EXPR$0])
+- Exchange(distribution=[single])
   +- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: )]]], fields=[])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProjectWithoutRowtime">
    <Resource name="sql">
      <![CDATA[SELECT ptime, name, val, id FROM T]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(ptime=[$3], name=[$4], val=[$2], id=[$0])
+- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: id, name, val, rtime)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[PROCTIME_MATERIALIZE(ptime) AS ptime, name, val, id])
+- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: id, name, val, rtime)]]], fields=[id, rtime, val, ptime, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testProjectWithRowtimeProctime">
    <Resource name="sql">
      <![CDATA[SELECT name, val, id FROM T]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(name=[$4], val=[$2], id=[$0])
+- LogicalTableScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: id, name, val, rtime)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[name, val, id])
+- TableSourceScan(table=[[default_catalog, default_database, T, source: [TestSource(physical fields: id, name, val, rtime)]]], fields=[id, rtime, val, ptime, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTableSourceWithLongRowTimeField">
    <Resource name="sql">
      <![CDATA[SELECT rowtime, id, name, val FROM rowTimeT]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(rowtime=[$1], id=[$0], name=[$3], val=[$2])
+- LogicalTableScan(table=[[default_catalog, default_database, rowTimeT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[rowtime, id, name, val])
+- TableSourceScan(table=[[default_catalog, default_database, rowTimeT]], fields=[id, rowtime, val, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTimeLiteralExpressionPushDown">
    <Resource name="sql">
      <![CDATA[
SELECT id FROM FilterableTable1 WHERE
  tv > TIME '14:25:02' AND
  dv > DATE '2017-02-03' AND
  tsv > TIMESTAMP '2017-02-03 14:25:02.000'
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(id=[$0])
+- LogicalFilter(condition=[AND(>($2, 14:25:02), >($1, 2017-02-03), >($3, 2017-02-03 14:25:02))])
   +- LogicalTableScan(table=[[default_catalog, default_database, FilterableTable1, source: [filterPushedDown=[false], filter=[]]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[id])
+- TableSourceScan(table=[[default_catalog, default_database, FilterableTable1, source: [filterPushedDown=[true], filter=[and(and(greaterThan(tv, 14:25:02), greaterThan(dv, 2017-02-03)), greaterThan(tsv, 2017-02-03T14:25:02))]]]], fields=[id, dv, tv, tsv])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTableSourceWithTimestampRowTimeField">
    <Resource name="sql">
      <![CDATA[SELECT rowtime, id, name, val FROM rowTimeT]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(rowtime=[$1], id=[$0], name=[$3], val=[$2])
+- LogicalTableScan(table=[[default_catalog, default_database, rowTimeT]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[rowtime, id, name, val])
+- TableSourceScan(table=[[default_catalog, default_database, rowTimeT]], fields=[id, rowtime, val, name])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnboundedStreamTableSource">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
TableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
</Root>
