<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testMultiLevelViews">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a, b, c])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%hello%')])
      +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[<($0, 4)])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalUnion(all=[true])
               :- LogicalProject(a=[$0], b=[$1], c=[$2])
               :  +- LogicalProject(a=[$0], b=[$1], c=[$2])
               :     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%hello%')])
               :        +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalProject(a=[$0], b=[$1], c=[$2])
                  +- LogicalProject(a=[$0], b=[$1], c=[$2])
                     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%world%')])
                        +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[AND(>=($0, 4), <($0, 6))])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalUnion(all=[true])
               :- LogicalProject(a=[$0], b=[$1], c=[$2])
               :  +- LogicalProject(a=[$0], b=[$1], c=[$2])
               :     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%hello%')])
               :        +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalProject(a=[$0], b=[$1], c=[$2])
                  +- LogicalProject(a=[$0], b=[$1], c=[$2])
                     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%world%')])
                        +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc], reuse_id=[2])

Calc(select=[a, b, c], where=[LIKE(c, _UTF-16LE'%hello%')], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])
+- Reused(reference_id=[2])

Sink(fields=[a, b, c], updateAsRetraction=[false], accMode=[Acc])
+- Reused(reference_id=[1])

GroupAggregate(groupBy=[b], select=[b, COUNT(a) AS cnt], updateAsRetraction=[true], accMode=[AccRetract], reuse_id=[3])
+- Exchange(distribution=[hash[b]], updateAsRetraction=[true], accMode=[Acc])
   +- Union(all=[true], union=[b, a], updateAsRetraction=[true], accMode=[Acc])
      :- Calc(select=[b, a], updateAsRetraction=[true], accMode=[Acc])
      :  +- Reused(reference_id=[1])
      +- Calc(select=[b, a], where=[LIKE(c, _UTF-16LE'%world%')], updateAsRetraction=[true], accMode=[Acc])
         +- Reused(reference_id=[2])

Sink(fields=[b, cnt], updateAsRetraction=[true], accMode=[AccRetract])
+- Calc(select=[b, cnt], where=[<(b, 4)], updateAsRetraction=[true], accMode=[AccRetract])
   +- Reused(reference_id=[3])

Sink(fields=[b, cnt], updateAsRetraction=[false], accMode=[AccRetract])
+- Calc(select=[b, cnt], where=[AND(>=(b, 4), <(b, 6))], updateAsRetraction=[false], accMode=[AccRetract])
   +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks1">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(sum_a=[$0])
      +- LogicalProject(sum_a=[$1], c=[$0])
         +- LogicalAggregate(group=[{0}], sum_a=[SUM($1)])
            +- LogicalProject(c=[$2], a=[$0])
               +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(sum_a=[$0])
      +- LogicalProject(sum_a=[$1], c=[$0])
         +- LogicalAggregate(group=[{0}], sum_a=[SUM($1)])
            +- LogicalProject(c=[$2], a=[$0])
               +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Exchange(distribution=[single], updateAsRetraction=[true], accMode=[AccRetract], reuse_id=[1])
+- Calc(select=[sum_a], updateAsRetraction=[true], accMode=[AccRetract])
   +- GroupAggregate(groupBy=[c], select=[c, SUM(a) AS sum_a], updateAsRetraction=[true], accMode=[AccRetract])
      +- Exchange(distribution=[hash[c]], updateAsRetraction=[true], accMode=[Acc])
         +- Calc(select=[c, a], updateAsRetraction=[true], accMode=[Acc])
            +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])

Sink(fields=[total_sum], updateAsRetraction=[false], accMode=[Acc])
+- GroupAggregate(select=[SUM_RETRACT(sum_a) AS total_sum], updateAsRetraction=[false], accMode=[Acc])
   +- Reused(reference_id=[1])

Sink(fields=[total_min], updateAsRetraction=[false], accMode=[Acc])
+- GroupAggregate(select=[MIN_RETRACT(sum_a) AS total_min], updateAsRetraction=[false], accMode=[Acc])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks2">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a, b1])
+- LogicalUnion(all=[true])
   :- LogicalProject(a1=[$0], b1=[$1])
   :  +- LogicalProject(a1=[$0], b1=[$1])
   :     +- LogicalFilter(condition=[<=($0, 10)])
   :        +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(a=[$0], b1=[$1])
      +- LogicalProject(a=[$2], b1=[$1])
         +- LogicalFilter(condition=[=($2, $0)])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalProject(a1=[$0], b1=[$1])
               :  +- LogicalFilter(condition=[<=($0, 10)])
               :     +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalTableScan(table=[[MyTable2, source: [TestTableSource(a, b, c, d, e)]]])

LogicalSink(fields=[a, b1])
+- LogicalUnion(all=[true])
   :- LogicalProject(a1=[$0], b1=[$1])
   :  +- LogicalProject(a1=[$0], b1=[$1])
   :     +- LogicalFilter(condition=[<=($0, 10)])
   :        +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(a=[$0], b1=[$1])
      +- LogicalProject(a=[$2], b1=[$1])
         +- LogicalFilter(condition=[=($2, $0)])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalProject(a1=[$0], b1=[$1])
               :  +- LogicalFilter(condition=[<=($0, 10)])
               :     +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalTableScan(table=[[MyTable2, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a AS a1, b AS b1], where=[<=(a, 10)], updateAsRetraction=[false], accMode=[Acc], reuse_id=[1])
+- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[false], accMode=[Acc])

Union(all=[true], union=[a1, b1], updateAsRetraction=[false], accMode=[Acc], reuse_id=[2])
:- Reused(reference_id=[1])
+- Calc(select=[a, b1], updateAsRetraction=[false], accMode=[Acc])
   +- Join(joinType=[InnerJoin], where=[=(a, a1)], select=[a1, b1, a, b, c, d, e], updateAsRetraction=[false], accMode=[Acc])
      :- Exchange(distribution=[hash[a1]], updateAsRetraction=[true], accMode=[Acc])
      :  +- Reused(reference_id=[1])
      +- Exchange(distribution=[hash[a]], updateAsRetraction=[true], accMode=[Acc])
         +- TableSourceScan(table=[[MyTable2, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e], updateAsRetraction=[true], accMode=[Acc])

Sink(fields=[a, b1], updateAsRetraction=[false], accMode=[Acc])
+- Reused(reference_id=[2])

Sink(fields=[a, b1], updateAsRetraction=[false], accMode=[Acc])
+- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks3">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a, b1])
+- LogicalProject(a=[$2], b1=[$1])
   +- LogicalFilter(condition=[=($2, $0)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(a1=[$0], b1=[$1])
         :  +- LogicalFilter(condition=[<=($0, 10)])
         :     +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalTableScan(table=[[MyTable2, source: [TestTableSource(a, b, c, d, e)]]])

LogicalSink(fields=[a, b1])
+- LogicalUnion(all=[true])
   :- LogicalProject(a1=[$0], b1=[$1])
   :  +- LogicalProject(a1=[$0], b1=[$1])
   :     +- LogicalFilter(condition=[<=($0, 10)])
   :        +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(a=[$0], b1=[$1])
      +- LogicalProject(a=[$2], b1=[$1])
         +- LogicalFilter(condition=[=($2, $0)])
            +- LogicalJoin(condition=[true], joinType=[inner])
               :- LogicalProject(a1=[$0], b1=[$1])
               :  +- LogicalFilter(condition=[<=($0, 10)])
               :     +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalTableScan(table=[[MyTable2, source: [TestTableSource(a, b, c, d, e)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b], where=[<=(a, 10)], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])
+- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])

Calc(select=[a0 AS a, b AS b1], updateAsRetraction=[false], accMode=[Acc], reuse_id=[2])
+- Join(joinType=[InnerJoin], where=[=(a0, a)], select=[a, b, a0, b0, c, d, e], updateAsRetraction=[false], accMode=[Acc])
   :- Exchange(distribution=[hash[a]], updateAsRetraction=[true], accMode=[Acc])
   :  +- Reused(reference_id=[1])
   +- Exchange(distribution=[hash[a]], updateAsRetraction=[true], accMode=[Acc])
      +- TableSourceScan(table=[[MyTable2, source: [TestTableSource(a, b, c, d, e)]]], fields=[a, b, c, d, e], updateAsRetraction=[true], accMode=[Acc])

Sink(fields=[a, b1], updateAsRetraction=[false], accMode=[Acc])
+- Reused(reference_id=[2])

Sink(fields=[a, b1], updateAsRetraction=[false], accMode=[Acc])
+- Union(all=[true], union=[a, b], updateAsRetraction=[false], accMode=[Acc])
   :- Reused(reference_id=[1])
   +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks4">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a1, b, c2])
+- LogicalProject(a1=[$0], b=[$1], c2=[$3])
   +- LogicalFilter(condition=[=($0, $2)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(a1=[$0], b=[$1])
         :  +- LogicalFilter(condition=[<=($0, 10)])
         :     +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(a2=[$0], c=[$2])
            +- LogicalFilter(condition=[>=($1, 5)])
               +- LogicalProject(a=[$0], b=[$1], c=[$2])
                  +- LogicalFilter(condition=[>=($0, 0)])
                     +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[a1, b, c1])
+- LogicalProject(a1=[$2], b=[$3], c1=[$1])
   +- LogicalFilter(condition=[=($2, $0)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalProject(a3=[$0], c1=[$2])
         :  +- LogicalFilter(condition=[<($1, 5)])
         :     +- LogicalProject(a=[$0], b=[$1], c=[$2])
         :        +- LogicalFilter(condition=[>=($0, 0)])
         :           +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(a1=[$0], b=[$1], c2=[$3])
            +- LogicalFilter(condition=[=($0, $2)])
               +- LogicalJoin(condition=[true], joinType=[inner])
                  :- LogicalProject(a1=[$0], b=[$1])
                  :  +- LogicalFilter(condition=[<=($0, 10)])
                  :     +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
                  +- LogicalProject(a2=[$0], c=[$2])
                     +- LogicalFilter(condition=[>=($1, 5)])
                        +- LogicalProject(a=[$0], b=[$1], c=[$2])
                           +- LogicalFilter(condition=[>=($0, 0)])
                              +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])

Calc(select=[a, b, c], where=[>=(a, 0)], updateAsRetraction=[true], accMode=[Acc], reuse_id=[2])
+- Reused(reference_id=[1])

Calc(select=[a1, b, c AS c2], updateAsRetraction=[true], accMode=[Acc], reuse_id=[3])
+- Join(joinType=[InnerJoin], where=[=(a1, a2)], select=[a1, b, a2, c], updateAsRetraction=[true], accMode=[Acc])
   :- Exchange(distribution=[hash[a1]], updateAsRetraction=[true], accMode=[Acc])
   :  +- Calc(select=[a AS a1, b], where=[<=(a, 10)], updateAsRetraction=[true], accMode=[Acc])
   :     +- Reused(reference_id=[1])
   +- Exchange(distribution=[hash[a2]], updateAsRetraction=[true], accMode=[Acc])
      +- Calc(select=[a AS a2, c], where=[>=(b, 5)], updateAsRetraction=[true], accMode=[Acc])
         +- Reused(reference_id=[2])

Sink(fields=[a1, b, c2], updateAsRetraction=[false], accMode=[Acc])
+- Reused(reference_id=[3])

Sink(fields=[a1, b, c1], updateAsRetraction=[false], accMode=[Acc])
+- Calc(select=[a1, b, c1], updateAsRetraction=[false], accMode=[Acc])
   +- Join(joinType=[InnerJoin], where=[=(a1, a3)], select=[a3, c1, a1, b, c2], updateAsRetraction=[false], accMode=[Acc])
      :- Exchange(distribution=[hash[a3]], updateAsRetraction=[true], accMode=[Acc])
      :  +- Calc(select=[a AS a3, c AS c1], where=[<(b, 5)], updateAsRetraction=[true], accMode=[Acc])
      :     +- Reused(reference_id=[2])
      +- Exchange(distribution=[hash[a1]], updateAsRetraction=[true], accMode=[Acc])
         +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinks5">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalProject(a=[random_udf($0)], c=[$2])
         +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalProject(a=[random_udf($0)], c=[$2])
         +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Exchange(distribution=[single], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])
+- Calc(select=[random_udf(a) AS a], updateAsRetraction=[true], accMode=[Acc])
   +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])

Sink(fields=[total_sum], updateAsRetraction=[false], accMode=[Acc])
+- GroupAggregate(select=[SUM(a) AS total_sum], updateAsRetraction=[false], accMode=[Acc])
   +- Reused(reference_id=[1])

Sink(fields=[total_min], updateAsRetraction=[false], accMode=[Acc])
+- GroupAggregate(select=[MIN(a) AS total_min], updateAsRetraction=[false], accMode=[Acc])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksWithUDTF">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a, total_c])
+- LogicalProject(a=[$0], total_c=[$1])
   +- LogicalFilter(condition=[>($0, 50)])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], total_c=[$2])
         :  +- LogicalAggregate(group=[{0, 1}], total_c=[COUNT(DISTINCT $2)])
         :     +- LogicalProject(a=[$0], b=[$1], c=[$3])
         :        +- LogicalFilter(condition=[<>($2, _UTF-16LE'')])
         :           +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :              :- LogicalProject(a=[$0], b=[-($1, MOD($1, 300))], c=[$2])
         :              :  +- LogicalFilter(condition=[>=($1, UNIX_TIMESTAMP(_UTF-16LE'${startTime}'))])
         :              :     +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         :              +- LogicalTableFunctionScan(invocation=[split($cor0.c)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
         +- LogicalProject(a=[$0], total_c=[0])
            +- LogicalProject(a=[$0], b=[-($1, MOD($1, 300))], c=[$2])
               +- LogicalFilter(condition=[>=($1, UNIX_TIMESTAMP(_UTF-16LE'${startTime}'))])
                  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[a, total_c])
+- LogicalProject(a=[$0], total_c=[$1])
   +- LogicalFilter(condition=[<($0, 50)])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], total_c=[$2])
         :  +- LogicalAggregate(group=[{0, 1}], total_c=[COUNT(DISTINCT $2)])
         :     +- LogicalProject(a=[$0], b=[$1], c=[$3])
         :        +- LogicalFilter(condition=[<>($2, _UTF-16LE'')])
         :           +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :              :- LogicalProject(a=[$0], b=[-($1, MOD($1, 300))], c=[$2])
         :              :  +- LogicalFilter(condition=[>=($1, UNIX_TIMESTAMP(_UTF-16LE'${startTime}'))])
         :              :     +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         :              +- LogicalTableFunctionScan(invocation=[split($cor0.c)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
         +- LogicalProject(a=[$0], total_c=[0])
            +- LogicalProject(a=[$0], b=[-($1, MOD($1, 300))], c=[$2])
               +- LogicalFilter(condition=[>=($1, UNIX_TIMESTAMP(_UTF-16LE'${startTime}'))])
                  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])

Calc(select=[a, total_c], updateAsRetraction=[false], accMode=[Acc], reuse_id=[2])
+- GroupAggregate(groupBy=[a, b], select=[a, b, COUNT(DISTINCT c) AS total_c], updateAsRetraction=[false], accMode=[Acc])
   +- Exchange(distribution=[hash[a, b]], updateAsRetraction=[true], accMode=[Acc])
      +- Calc(select=[a, b, f0 AS c], updateAsRetraction=[true], accMode=[Acc])
         +- Correlate(invocation=[split($cor0.c)], correlate=[table(split($cor0.c))], select=[a,b,c,f0], rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, VARCHAR(2147483647) f0)], joinType=[INNER], updateAsRetraction=[true], accMode=[Acc])
            +- Calc(select=[a, -(b, MOD(b, 300)) AS b, c], where=[AND(>=(b, UNIX_TIMESTAMP(_UTF-16LE'${startTime}')), <>(c, _UTF-16LE'':VARCHAR(2147483647) CHARACTER SET "UTF-16LE"))], updateAsRetraction=[true], accMode=[Acc])
               +- Reused(reference_id=[1])

Calc(select=[a, 0 AS total_c], where=[>=(b, UNIX_TIMESTAMP(_UTF-16LE'${startTime}'))], updateAsRetraction=[false], accMode=[Acc], reuse_id=[3])
+- Reused(reference_id=[1])

Sink(fields=[a, total_c], updateAsRetraction=[false], accMode=[Acc])
+- Union(all=[true], union=[a, total_c], updateAsRetraction=[false], accMode=[Acc])
   :- Calc(select=[a, total_c], where=[>(a, 50)], updateAsRetraction=[false], accMode=[Acc])
   :  +- Reused(reference_id=[2])
   +- Calc(select=[a, CAST(total_c) AS total_c], where=[>(a, 50)], updateAsRetraction=[false], accMode=[Acc])
      +- Reused(reference_id=[3])

Sink(fields=[a, total_c], updateAsRetraction=[false], accMode=[Acc])
+- Union(all=[true], union=[a, total_c], updateAsRetraction=[false], accMode=[Acc])
   :- Calc(select=[a, total_c], where=[<(a, 50)], updateAsRetraction=[false], accMode=[Acc])
   :  +- Reused(reference_id=[2])
   +- Calc(select=[a, CAST(total_c) AS total_c], where=[<(a, 50)], updateAsRetraction=[false], accMode=[Acc])
      +- Reused(reference_id=[3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion1">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]])

LogicalSink(fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Exchange(distribution=[single], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])
+- Calc(select=[a], updateAsRetraction=[true], accMode=[Acc])
   +- Union(all=[true], union=[a, c], updateAsRetraction=[true], accMode=[Acc])
      :- Calc(select=[a, c], updateAsRetraction=[true], accMode=[Acc])
      :  +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
      +- Calc(select=[d, f], updateAsRetraction=[true], accMode=[Acc])
         +- TableSourceScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]], fields=[d, e, f], updateAsRetraction=[true], accMode=[Acc])

Sink(fields=[total_sum], updateAsRetraction=[false], accMode=[Acc])
+- GroupAggregate(select=[SUM(a) AS total_sum], updateAsRetraction=[false], accMode=[Acc])
   +- Reused(reference_id=[1])

Sink(fields=[total_min], updateAsRetraction=[true], accMode=[AccRetract])
+- GroupAggregate(select=[MIN(a) AS total_min], updateAsRetraction=[true], accMode=[AccRetract])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion2">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[MyTable2, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[MyTable2, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[a])
+- LogicalProject(a=[$0])
   +- LogicalUnion(all=[true])
      :- LogicalProject(a=[$0], c=[$2])
      :  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalTableScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a], reuse_id=[2])
+- Union(all=[true], union=[a, c])
   :- Calc(select=[a, c])
   :  +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
   +- Calc(select=[d, f])
      +- TableSourceScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]], fields=[d, e, f])

Exchange(distribution=[single], reuse_id=[1])
+- Union(all=[true], union=[a])
   :- Reused(reference_id=[2])
   +- Calc(select=[a])
      +- TableSourceScan(table=[[MyTable2, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])

Sink(fields=[total_sum])
+- GroupAggregate(select=[SUM(a) AS total_sum])
   +- Reused(reference_id=[1])

Sink(fields=[total_min])
+- GroupAggregate(select=[MIN(a) AS total_min])
   +- Reused(reference_id=[1])

Sink(fields=[a])
+- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion3">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a])
+- LogicalUnion(all=[true])
   :- LogicalProject(a=[$0], c=[$2])
   :  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0], f=[$2])
      +- LogicalTableScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]])

LogicalSink(fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$1])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalProject(a=[$0], c=[$2])
         :     :  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         :     +- LogicalProject(d=[$0], f=[$2])
         :        +- LogicalTableScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[MyTable2, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$1])
         :  +- LogicalUnion(all=[true])
         :     :- LogicalProject(a=[$0], c=[$2])
         :     :  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         :     +- LogicalProject(d=[$0], f=[$2])
         :        +- LogicalTableScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[MyTable2, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Union(all=[true], union=[a, c], updateAsRetraction=[false], accMode=[Acc], reuse_id=[1])
:- Calc(select=[a, c], updateAsRetraction=[true], accMode=[Acc])
:  +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
+- Calc(select=[d, f], updateAsRetraction=[true], accMode=[Acc])
   +- TableSourceScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]], fields=[d, e, f], updateAsRetraction=[true], accMode=[Acc])

Sink(fields=[a], updateAsRetraction=[false], accMode=[Acc])
+- Reused(reference_id=[1])

Exchange(distribution=[single], updateAsRetraction=[true], accMode=[Acc], reuse_id=[2])
+- Calc(select=[a], updateAsRetraction=[true], accMode=[Acc])
   +- Union(all=[true], union=[a, c], updateAsRetraction=[true], accMode=[Acc])
      :- Reused(reference_id=[1])
      +- Calc(select=[a, c], updateAsRetraction=[true], accMode=[Acc])
         +- TableSourceScan(table=[[MyTable2, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])

Sink(fields=[total_sum], updateAsRetraction=[true], accMode=[AccRetract])
+- GroupAggregate(select=[SUM(a) AS total_sum], updateAsRetraction=[true], accMode=[AccRetract])
   +- Reused(reference_id=[2])

Sink(fields=[total_min], updateAsRetraction=[false], accMode=[Acc])
+- GroupAggregate(select=[MIN(a) AS total_min], updateAsRetraction=[false], accMode=[Acc])
   +- Reused(reference_id=[2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiSinksSplitOnUnion4">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[MyTable2, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[total_min])
+- LogicalAggregate(group=[{}], total_min=[MIN($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalUnion(all=[true])
         :  :- LogicalProject(a=[$0], c=[$2])
         :  :  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         :  +- LogicalProject(d=[$0], f=[$2])
         :     +- LogicalTableScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject(a=[$0], c=[$2])
            +- LogicalTableScan(table=[[MyTable2, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Exchange(distribution=[single], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])
+- Calc(select=[a], updateAsRetraction=[true], accMode=[Acc])
   +- Union(all=[true], union=[a, c], updateAsRetraction=[true], accMode=[Acc])
      :- Union(all=[true], union=[a, c], updateAsRetraction=[true], accMode=[Acc])
      :  :- Calc(select=[a, c], updateAsRetraction=[true], accMode=[Acc])
      :  :  +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
      :  +- Calc(select=[d, f], updateAsRetraction=[true], accMode=[Acc])
      :     +- TableSourceScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]], fields=[d, e, f], updateAsRetraction=[true], accMode=[Acc])
      +- Calc(select=[a, c], updateAsRetraction=[true], accMode=[Acc])
         +- TableSourceScan(table=[[MyTable2, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])

Sink(fields=[total_sum], updateAsRetraction=[false], accMode=[Acc])
+- GroupAggregate(select=[SUM(a) AS total_sum], updateAsRetraction=[false], accMode=[Acc])
   +- Reused(reference_id=[1])

Sink(fields=[total_min], updateAsRetraction=[true], accMode=[AccRetract])
+- GroupAggregate(select=[MIN(a) AS total_min], updateAsRetraction=[true], accMode=[AccRetract])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSharedUnionNode">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a, b, c])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%hello%')])
      +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[a, b, c])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalFilter(condition=[>=($1, 5)])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], b=[$1], c=[$2])
         :  +- LogicalProject(a=[$0], b=[$1], c=[$2])
         :     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%hello%')])
         :        +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(a=[$0], b=[$1], c=[$2])
            +- LogicalProject(a=[$0], b=[$1], c=[$2])
               +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%world%')])
                  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[<($0, 4)])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalUnion(all=[true])
               :- LogicalProject(a=[$0], b=[$1], c=[$2])
               :  +- LogicalProject(a=[$0], b=[$1], c=[$2])
               :     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%hello%')])
               :        +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalProject(a=[$0], b=[$1], c=[$2])
                  +- LogicalProject(a=[$0], b=[$1], c=[$2])
                     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%world%')])
                        +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[b, cnt])
+- LogicalProject(b=[$0], cnt=[$1])
   +- LogicalFilter(condition=[<($0, 4)])
      +- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
         +- LogicalProject(b=[$1], a=[$0])
            +- LogicalUnion(all=[true])
               :- LogicalProject(a=[$0], b=[$1], c=[$2])
               :  +- LogicalProject(a=[$0], b=[$1], c=[$2])
               :     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%hello%')])
               :        +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
               +- LogicalProject(a=[$0], b=[$1], c=[$2])
                  +- LogicalProject(a=[$0], b=[$1], c=[$2])
                     +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'%world%')])
                        +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc], reuse_id=[2])

Calc(select=[a, b, c], where=[LIKE(c, _UTF-16LE'%hello%')], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])
+- Reused(reference_id=[2])

Sink(fields=[a, b, c], updateAsRetraction=[false], accMode=[Acc])
+- Reused(reference_id=[1])

Calc(select=[a, b, c], where=[LIKE(c, _UTF-16LE'%world%')], updateAsRetraction=[true], accMode=[Acc], reuse_id=[3])
+- Reused(reference_id=[2])

Sink(fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
+- Union(all=[true], union=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
   :- Calc(select=[a, b, c], where=[>=(b, 5)], updateAsRetraction=[true], accMode=[Acc])
   :  +- Reused(reference_id=[1])
   +- Calc(select=[a, b, c], where=[>=(b, 5)], updateAsRetraction=[true], accMode=[Acc])
      +- Reused(reference_id=[3])

GroupAggregate(groupBy=[b], select=[b, COUNT(a) AS cnt], updateAsRetraction=[true], accMode=[AccRetract], reuse_id=[4])
+- Exchange(distribution=[hash[b]], updateAsRetraction=[true], accMode=[Acc])
   +- Union(all=[true], union=[b, a], updateAsRetraction=[true], accMode=[Acc])
      :- Calc(select=[b, a], where=[<(b, 4)], updateAsRetraction=[true], accMode=[Acc])
      :  +- Reused(reference_id=[1])
      +- Calc(select=[b, a], where=[<(b, 4)], updateAsRetraction=[true], accMode=[Acc])
         +- Reused(reference_id=[3])

Sink(fields=[b, cnt], updateAsRetraction=[true], accMode=[AccRetract])
+- Reused(reference_id=[4])

Sink(fields=[b, cnt], updateAsRetraction=[false], accMode=[AccRetract])
+- Reused(reference_id=[4])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink1">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[c, cnt])
+- LogicalAggregate(group=[{0}], cnt=[COUNT($1)])
   +- LogicalProject(c=[$2], a=[$0])
      +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(fields=[c, cnt], updateAsRetraction=[false], accMode=[Acc])
+- GroupAggregate(groupBy=[c], select=[c, COUNT(a) AS cnt], updateAsRetraction=[false], accMode=[Acc])
   +- Exchange(distribution=[hash[c]], updateAsRetraction=[true], accMode=[Acc])
      +- Calc(select=[c, a], updateAsRetraction=[true], accMode=[Acc])
         +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink2">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a1, b, c1])
+- LogicalProject(a1=[$2], b=[$3], c1=[$1])
   +- LogicalFilter(condition=[=($2, $0)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalTableScan(table=[[table4]])
         +- LogicalTableScan(table=[[table5]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(fields=[a1, b, c1], updateAsRetraction=[false], accMode=[Acc])
+- Calc(select=[a1, b, c1], updateAsRetraction=[false], accMode=[Acc])
   +- Join(joinType=[InnerJoin], where=[=(a1, a3)], select=[a3, c1, a1, b, c2], updateAsRetraction=[false], accMode=[Acc])
      :- Exchange(distribution=[hash[a3]], updateAsRetraction=[true], accMode=[Acc])
      :  +- Calc(select=[a AS a3, c AS c1], where=[AND(>=(a, 0), <(b, 5))], updateAsRetraction=[true], accMode=[Acc])
      :     +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])
      +- Exchange(distribution=[hash[a1]], updateAsRetraction=[true], accMode=[Acc])
         +- Calc(select=[a1, b, c AS c2], updateAsRetraction=[true], accMode=[Acc])
            +- Join(joinType=[InnerJoin], where=[=(a1, a2)], select=[a1, b, a2, c], updateAsRetraction=[true], accMode=[Acc])
               :- Exchange(distribution=[hash[a1]], updateAsRetraction=[true], accMode=[Acc])
               :  +- Calc(select=[a AS a1, b], where=[<=(a, 10)], updateAsRetraction=[true], accMode=[Acc])
               :     +- Reused(reference_id=[1])
               +- Exchange(distribution=[hash[a2]], updateAsRetraction=[true], accMode=[Acc])
                  +- Calc(select=[a AS a2, c], where=[AND(>=(a, 0), >=(b, 5))], updateAsRetraction=[true], accMode=[Acc])
                     +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink3">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a1, b1])
+- LogicalUnion(all=[true])
   :- LogicalProject(a1=[$0], b1=[$1])
   :  +- LogicalTableScan(table=[[table1]])
   +- LogicalProject(a=[$0], b1=[$1])
      +- LogicalTableScan(table=[[table2]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(fields=[a1, b1], updateAsRetraction=[false], accMode=[Acc])
+- Union(all=[true], union=[a1, b1], updateAsRetraction=[false], accMode=[Acc])
   :- Calc(select=[a AS a1, b AS b1], where=[<=(a, 10)], updateAsRetraction=[false], accMode=[Acc], reuse_id=[1])
   :  +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[false], accMode=[Acc])
   +- Calc(select=[a, b1], updateAsRetraction=[false], accMode=[Acc])
      +- Join(joinType=[InnerJoin], where=[=(a, a1)], select=[a1, b1, a, b, c, d, e], updateAsRetraction=[false], accMode=[Acc])
         :- Exchange(distribution=[hash[a1]], updateAsRetraction=[true], accMode=[Acc])
         :  +- Reused(reference_id=[1])
         +- Exchange(distribution=[hash[a]], updateAsRetraction=[true], accMode=[Acc])
            +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, d, e], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSink4">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a, b, c])
+- LogicalProject(a1=[$0], b1=[$3], c1=[$4])
   +- LogicalFilter(condition=[=($0, $2)])
      +- LogicalJoin(condition=[true], joinType=[inner])
         :- LogicalTableScan(table=[[table1]])
         +- LogicalTableScan(table=[[table6]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(fields=[a, b, c], updateAsRetraction=[false], accMode=[Acc])
+- Calc(select=[a1, b1, c1], updateAsRetraction=[false], accMode=[Acc])
   +- Join(joinType=[InnerJoin], where=[=(a1, a3)], select=[a1, a3, b1, c1], updateAsRetraction=[false], accMode=[Acc])
      :- Exchange(distribution=[hash[a1]], updateAsRetraction=[true], accMode=[Acc])
      :  +- Calc(select=[a AS a1], where=[<=(a, 10)], updateAsRetraction=[true], accMode=[Acc])
      :     +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])
      +- Exchange(distribution=[hash[a3]], updateAsRetraction=[true], accMode=[Acc])
         +- Calc(select=[a3, b AS b1, c1], updateAsRetraction=[true], accMode=[Acc])
            +- Join(joinType=[InnerJoin], where=[=(a1, a3)], select=[a3, c1, a1, b, c2], updateAsRetraction=[true], accMode=[Acc])
               :- Exchange(distribution=[hash[a3]], updateAsRetraction=[true], accMode=[Acc])
               :  +- Calc(select=[a AS a3, c AS c1], where=[AND(>=(a, 0), <(b, 5))], updateAsRetraction=[true], accMode=[Acc])
               :     +- Reused(reference_id=[1])
               +- Exchange(distribution=[hash[a1]], updateAsRetraction=[true], accMode=[Acc])
                  +- Calc(select=[a1, b, c AS c2], updateAsRetraction=[true], accMode=[Acc])
                     +- Join(joinType=[InnerJoin], where=[=(a1, a2)], select=[a1, b, a2, c], updateAsRetraction=[true], accMode=[Acc])
                        :- Exchange(distribution=[hash[a1]], updateAsRetraction=[true], accMode=[Acc])
                        :  +- Calc(select=[a AS a1, b], where=[<=(a, 10)], updateAsRetraction=[true], accMode=[Acc])
                        :     +- Reused(reference_id=[1])
                        +- Exchange(distribution=[hash[a2]], updateAsRetraction=[true], accMode=[Acc])
                           +- Calc(select=[a AS a2, c], where=[AND(>=(a, 0), >=(b, 5))], updateAsRetraction=[true], accMode=[Acc])
                              +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSinkWithUDTF">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a, b, c, d, e, f, i, j, k, l, m, s])
+- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], i=[$6], j=[$7], k=[$8], l=[$9], m=[$10], s=[$11])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5], i=[$6], j=[$7], k=[$8], l=[$9], m=[$10])
      :  +- LogicalFilter(condition=[AND(=($1, $4), =($0, $6))])
      :     +- LogicalJoin(condition=[true], joinType=[inner])
      :        :- LogicalJoin(condition=[true], joinType=[inner])
      :        :  :- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
      :        :  +- LogicalTableScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]])
      :        +- LogicalTableScan(table=[[MyTable2, source: [TestTableSource(i, j, k, l, m)]]])
      +- LogicalTableFunctionScan(invocation=[split($cor0.c)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(fields=[a, b, c, d, e, f, i, j, k, l, m, s], updateAsRetraction=[false], accMode=[Acc])
+- Correlate(invocation=[split($cor0.c)], correlate=[table(split($cor0.c))], select=[a,b,c,d,e,f,i,j,k,l,m,f0], rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) c, INTEGER d, BIGINT e, VARCHAR(2147483647) f, INTEGER i, BIGINT j, INTEGER k, VARCHAR(2147483647) l, BIGINT m, VARCHAR(2147483647) f0)], joinType=[INNER], updateAsRetraction=[false], accMode=[Acc])
   +- Join(joinType=[InnerJoin], where=[=(a, i)], select=[a, b, c, d, e, f, i, j, k, l, m], updateAsRetraction=[false], accMode=[Acc])
      :- Exchange(distribution=[hash[a]], updateAsRetraction=[true], accMode=[Acc])
      :  +- Join(joinType=[InnerJoin], where=[=(b, e)], select=[a, b, c, d, e, f], updateAsRetraction=[true], accMode=[Acc])
      :     :- Exchange(distribution=[hash[b]], updateAsRetraction=[true], accMode=[Acc])
      :     :  +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
      :     +- Exchange(distribution=[hash[e]], updateAsRetraction=[true], accMode=[Acc])
      :        +- TableSourceScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]], fields=[d, e, f], updateAsRetraction=[true], accMode=[Acc])
      +- Exchange(distribution=[hash[i]], updateAsRetraction=[true], accMode=[Acc])
         +- TableSourceScan(table=[[MyTable2, source: [TestTableSource(i, j, k, l, m)]]], fields=[i, j, k, l, m], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testSingleSinkSplitOnUnion">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[total_sum])
+- LogicalAggregate(group=[{}], total_sum=[SUM($0)])
   +- LogicalProject(a=[$0])
      +- LogicalUnion(all=[true])
         :- LogicalProject(a=[$0], c=[$2])
         :  +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(d=[$0], f=[$2])
            +- LogicalTableScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(fields=[total_sum], updateAsRetraction=[true], accMode=[AccRetract])
+- GroupAggregate(select=[SUM(a) AS total_sum], updateAsRetraction=[true], accMode=[AccRetract])
   +- Exchange(distribution=[single], updateAsRetraction=[true], accMode=[Acc])
      +- Union(all=[true], union=[a], updateAsRetraction=[true], accMode=[Acc])
         :- Calc(select=[a], updateAsRetraction=[true], accMode=[Acc])
         :  +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc])
         +- Calc(select=[d AS a], updateAsRetraction=[true], accMode=[Acc])
            +- TableSourceScan(table=[[MyTable1, source: [TestTableSource(d, e, f)]]], fields=[d, e, f], updateAsRetraction=[true], accMode=[Acc])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUpdateAsRetractConsumedAtSourceBlock">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a])
+- LogicalProject(a=[$0])
   +- LogicalFilter(condition=[>($0, 6)])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], rank_num=[$3])
         +- LogicalFilter(condition=[<=($3, 10)])
            +- LogicalProject(a=[$0], b=[$1], c=[$2], rank_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
               +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[a, b])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[<($0, 6)])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], rank_num=[$3])
         +- LogicalFilter(condition=[<=($3, 10)])
            +- LogicalProject(a=[$0], b=[$1], c=[$2], rank_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
               +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[b], orderBy=[c DESC], select=[a, b, c, w0$o0], updateAsRetraction=[true], accMode=[AccRetract], reuse_id=[1])
+- Exchange(distribution=[hash[b]], updateAsRetraction=[false], accMode=[Acc])
   +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[false], accMode=[Acc])

Sink(fields=[a], updateAsRetraction=[true], accMode=[AccRetract])
+- Calc(select=[a], where=[>(a, 6)], updateAsRetraction=[true], accMode=[AccRetract])
   +- Reused(reference_id=[1])

Sink(fields=[a, b], updateAsRetraction=[false], accMode=[AccRetract])
+- Calc(select=[a, b], where=[<(a, 6)], updateAsRetraction=[false], accMode=[AccRetract])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnionAndAggWithDifferentGroupings">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[b, c, a_sum])
+- LogicalUnion(all=[true])
   :- LogicalAggregate(group=[{0, 1}], a_sum=[SUM($2)])
   :  +- LogicalProject(b=[$1], c=[$2], a=[$0])
   :     +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(b=[1], c=[$0], a_sum=[$1])
      +- LogicalAggregate(group=[{0}], a_sum=[SUM($1)])
         +- LogicalProject(c=[$2], a=[$0])
            +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Sink(fields=[b, c, a_sum], updateAsRetraction=[false], accMode=[Acc])
+- Union(all=[true], union=[b, c, a_sum], updateAsRetraction=[false], accMode=[Acc])
   :- GroupAggregate(groupBy=[b, c], select=[b, c, SUM(a) AS a_sum], updateAsRetraction=[false], accMode=[Acc])
   :  +- Exchange(distribution=[hash[b, c]], updateAsRetraction=[true], accMode=[Acc])
   :     +- TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[true], accMode=[Acc], reuse_id=[1])
   +- Calc(select=[CAST(1:BIGINT) AS b, c, a_sum], updateAsRetraction=[false], accMode=[Acc])
      +- GroupAggregate(groupBy=[c], select=[c, SUM(a) AS a_sum], updateAsRetraction=[false], accMode=[Acc])
         +- Exchange(distribution=[hash[c]], updateAsRetraction=[true], accMode=[Acc])
            +- Calc(select=[c, a], updateAsRetraction=[true], accMode=[Acc])
               +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUpdateAsRetractConsumedAtSinkBlock">
    <Resource name="planBefore">
      <![CDATA[
LogicalSink(fields=[a, b, c])
+- LogicalProject(a=[$0], b=[$1], c=[$2], rank_num=[$3])
   +- LogicalFilter(condition=[<=($3, 10)])
      +- LogicalProject(a=[$0], b=[$1], c=[$2], rank_num=[ROW_NUMBER() OVER (PARTITION BY $1 ORDER BY $2 DESC NULLS LAST ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)])
         +- LogicalProject(a=[$0], b=[$1], c=[$2])
            +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])

LogicalSink(fields=[a, b])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[<($0, 6)])
      +- LogicalProject(a=[$0], b=[$1], c=[$2])
         +- LogicalTableScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
TableSourceScan(table=[[MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c], updateAsRetraction=[false], accMode=[Acc], reuse_id=[1])

Sink(fields=[a, b, c], updateAsRetraction=[true], accMode=[AccRetract])
+- Rank(strategy=[AppendFastStrategy], rankType=[ROW_NUMBER], rankRange=[rankStart=1, rankEnd=10], partitionBy=[b], orderBy=[c DESC], select=[a, b, c, w0$o0], updateAsRetraction=[true], accMode=[AccRetract])
   +- Exchange(distribution=[hash[b]], updateAsRetraction=[false], accMode=[Acc])
      +- Reused(reference_id=[1])

Sink(fields=[a, b], updateAsRetraction=[false], accMode=[Acc])
+- Calc(select=[a, b], where=[<(a, 6)], updateAsRetraction=[false], accMode=[Acc])
   +- Reused(reference_id=[1])
]]>
    </Resource>
  </TestCase>
</Root>
