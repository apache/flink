<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testCrossWithUnnest">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM MyTable, UNNEST(MyTable.c) as A (s)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(s=[$0])
      +- Uncollect
         +- LogicalProject(c=[$cor0.c])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, f0 AS s])
+- Correlate(invocation=[UNNEST($cor0.c)], correlate=[table(UNNEST($cor0.c))], select=[a,b,c,f0], rowType=[RecordType(INTEGER a, BIGINT b, VARCHAR(2147483647) ARRAY c, VARCHAR(2147483647) f0)], joinType=[INNER])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testTumbleWindowAggregateWithCollectUnnest">
    <Resource name="sql">
      <![CDATA[
WITH T AS (SELECT b, COLLECT(b) as `set`
    FROM MyTable
    GROUP BY b, TUMBLE(rowtime, INTERVAL '3' SECOND)
)
SELECT b, s FROM T, UNNEST(T.`set`) AS A(s) where b < 3
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$0], s=[$2])
+- LogicalFilter(condition=[<($0, 3)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalProject(b=[$0], set=[$2])
      :  +- LogicalAggregate(group=[{0, 1}], set=[COLLECT($0)])
      :     +- LogicalProject(b=[$1], $f1=[$TUMBLE($3, 3000:INTERVAL SECOND)])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(s=[$0])
         +- Uncollect
            +- LogicalProject(set=[$cor0.set])
               +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, f0 AS s])
+- Correlate(invocation=[UNNEST($cor0.set)], correlate=[table(UNNEST($cor0.set))], select=[b,set,f0], rowType=[RecordType(BIGINT b, BIGINT MULTISET set, BIGINT f0)], joinType=[INNER])
   +- SortWindowAggregate(groupBy=[b], window=[TumblingGroupWindow('w$, rowtime, 3000)], select=[b, Final_COLLECT(set) AS set])
      +- Sort(orderBy=[b ASC, assignedWindow$ ASC])
         +- Exchange(distribution=[hash[b]])
            +- LocalSortWindowAggregate(groupBy=[b], window=[TumblingGroupWindow('w$, rowtime, 3000)], select=[b, Partial_COLLECT(b) AS set])
               +- Sort(orderBy=[b ASC, rowtime ASC])
                  +- Calc(select=[b, rowtime], where=[<(b, 3)])
                     +- BoundedStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testCrossWithUnnestForMap">
    <Resource name="sql">
      <![CDATA[SELECT a, b, v FROM MyTable CROSS JOIN UNNEST(c) as f(k, v)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], v=[$4])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(k=[$0], v=[$1])
      +- Uncollect
         +- LogicalProject(c=[$cor0.c])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, f1 AS v])
+- Correlate(invocation=[UNNEST($cor0.c)], correlate=[table(UNNEST($cor0.c))], select=[a,b,c,f0,f1], rowType=[RecordType(INTEGER a, BIGINT b, (VARCHAR(2147483647), VARCHAR(2147483647)) MAP c, VARCHAR(2147483647) f0, VARCHAR(2147483647) f1)], joinType=[INNER])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinWithUnnestOfTuple">
    <Resource name="sql">
      <![CDATA[
SELECT a, b, x, y FROM
    (SELECT a, b FROM MyTable WHERE a < 3) as tf,
    UNNEST(tf.b) as A (x, y)
WHERE x > a
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], x=[$2], y=[$3])
+- LogicalFilter(condition=[>($2, $0)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalProject(a=[$0], b=[$1])
      :  +- LogicalFilter(condition=[<($0, 3)])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b)]]])
      +- LogicalProject(x=[$0], y=[$1])
         +- Uncollect
            +- LogicalProject(b=[$cor0.b])
               +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, _1, _2], where=[>(_1, a)])
+- Correlate(invocation=[UNNEST($cor0.b)], correlate=[table(UNNEST($cor0.b))], select=[a,b,_1,_2], rowType=[RecordType(INTEGER a, RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) _2) ARRAY b, INTEGER _1, VARCHAR(2147483647) _2)], joinType=[INNER])
   +- Calc(select=[a, b], where=[<(a, 3)])
      +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b)]]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftUnnestMultiSetFromCollectResult">
    <Resource name="sql">
      <![CDATA[
WITH T AS (SELECT a, COLLECT(b) as `set` FROM MyTable GROUP BY a)
SELECT a, s FROM T LEFT JOIN UNNEST(T.`set`) AS A(s) ON TRUE WHERE a < 5
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], s=[$2])
+- LogicalFilter(condition=[<($0, 5)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{1}])
      :- LogicalAggregate(group=[{0}], set=[COLLECT($1)])
      :  +- LogicalProject(a=[$0], b=[$1])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(s=[$0])
         +- Uncollect
            +- LogicalProject(set=[$cor0.set])
               +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, f0 AS s])
+- Correlate(invocation=[UNNEST($cor0.set)], correlate=[table(UNNEST($cor0.set))], select=[a,set,f0], rowType=[RecordType(INTEGER a, VARCHAR(2147483647) MULTISET set, VARCHAR(2147483647) f0)], joinType=[LEFT])
   +- SortAggregate(isMerge=[true], groupBy=[a], select=[a, Final_COLLECT(set) AS set])
      +- Sort(orderBy=[a ASC])
         +- Exchange(distribution=[hash[a]])
            +- LocalSortAggregate(groupBy=[a], select=[a, Partial_COLLECT(b) AS set])
               +- Sort(orderBy=[a ASC])
                  +- Calc(select=[a, b], where=[<(a, 5)])
                     +- BoundedStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestArrayOfArrayFromTable">
    <Resource name="sql">
      <![CDATA[SELECT a, s FROM MyTable, UNNEST(MyTable.c) AS A (s)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], s=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(s=[$0])
      +- Uncollect
         +- LogicalProject(c=[$cor0.c])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, f0 AS s])
+- Correlate(invocation=[UNNEST($cor0.c)], correlate=[table(UNNEST($cor0.c))], select=[a,b,c,f0], rowType=[RecordType(INTEGER a, INTEGER ARRAY b, INTEGER ARRAY ARRAY c, INTEGER ARRAY f0)], joinType=[INNER])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestMultiSetFromCollectResult">
    <Resource name="sql">
      <![CDATA[
WITH T AS (SELECT b, COLLECT(c) as `set` FROM MyTable GROUP BY b)
SELECT b, id, point FROM T, UNNEST(T.`set`) AS A(id, point) WHERE b < 3
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$0], id=[$2], point=[$3])
+- LogicalFilter(condition=[<($0, 3)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalAggregate(group=[{0}], set=[COLLECT($1)])
      :  +- LogicalProject(b=[$1], c=[$2])
      :     +- LogicalTableScan(table=[[default_catalog, default_database, MyTable]])
      +- LogicalProject(id=[$0], point=[$1])
         +- Uncollect
            +- LogicalProject(set=[$cor0.set])
               +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[b, _1 AS id, _2 AS point])
+- Correlate(invocation=[UNNEST($cor0.set)], correlate=[table(UNNEST($cor0.set))], select=[b,set,_1,_2], rowType=[RecordType(INTEGER b, RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) _2) MULTISET set, INTEGER _1, VARCHAR(2147483647) _2)], joinType=[INNER])
   +- SortAggregate(isMerge=[true], groupBy=[b], select=[b, Final_COLLECT(set) AS set])
      +- Sort(orderBy=[b ASC])
         +- Exchange(distribution=[hash[b]])
            +- LocalSortAggregate(groupBy=[b], select=[b, Partial_COLLECT(c) AS set])
               +- Sort(orderBy=[b ASC])
                  +- Calc(select=[b, c], where=[<(b, 3)])
                     +- BoundedStreamScan(table=[[default_catalog, default_database, MyTable]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestPrimitiveArrayFromTable">
    <Resource name="sql">
      <![CDATA[SELECT a, b, s FROM MyTable, UNNEST(MyTable.b) AS A (s)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], s=[$3])
+- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
   :- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(s=[$0])
      +- Uncollect
         +- LogicalProject(b=[$cor0.b])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, f0 AS s])
+- Correlate(invocation=[UNNEST($cor0.b)], correlate=[table(UNNEST($cor0.b))], select=[a,b,c,f0], rowType=[RecordType(INTEGER a, INTEGER ARRAY b, INTEGER ARRAY ARRAY c, INTEGER f0)], joinType=[INNER])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b, c)]]], fields=[a, b, c])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestObjectArrayFromTableWithFilter">
    <Resource name="sql">
      <![CDATA[SELECT a, b, s, t FROM MyTable, UNNEST(MyTable.b) AS A (s, t) WHERE s > 13]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], s=[$2], t=[$3])
+- LogicalFilter(condition=[>($2, 13)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b)]]])
      +- LogicalProject(s=[$0], t=[$1])
         +- Uncollect
            +- LogicalProject(b=[$cor0.b])
               +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Correlate(invocation=[UNNEST($cor0.b)], correlate=[table(UNNEST($cor0.b))], select=[a,b,_1,_2], rowType=[RecordType(INTEGER a, RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) _2) ARRAY b, INTEGER _1, VARCHAR(2147483647) _2)], joinType=[INNER], condition=[>($0, 13)])
+- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b)]]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testUnnestObjectArrayWithoutAlias">
    <Resource name="sql">
      <![CDATA[SELECT a, b, A._1, A._2 FROM MyTable, UNNEST(MyTable.b) AS A where A._1 > 1]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], _1=[$2], _2=[$3])
+- LogicalFilter(condition=[>($2, 1)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{1}])
      :- LogicalTableScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b)]]])
      +- Uncollect
         +- LogicalProject(b=[$cor0.b])
            +- LogicalValues(tuples=[[{ 0 }]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Correlate(invocation=[UNNEST($cor0.b)], correlate=[table(UNNEST($cor0.b))], select=[a,b,_1,_2], rowType=[RecordType(INTEGER a, RecordType:peek_no_expand(INTEGER _1, VARCHAR(2147483647) _2) ARRAY b, INTEGER _1, VARCHAR(2147483647) _2)], joinType=[INNER], condition=[>($0, 1)])
+- LegacyTableSourceScan(table=[[default_catalog, default_database, MyTable, source: [TestTableSource(a, b)]]], fields=[a, b])
]]>
    </Resource>
  </TestCase>
</Root>
