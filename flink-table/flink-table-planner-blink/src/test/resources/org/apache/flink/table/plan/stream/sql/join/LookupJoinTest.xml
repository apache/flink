<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testJoinTemporalTableWithCalcPushDown">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM MyTable AS T
JOIN temporalTest FOR SYSTEM_TIME AS OF T.proctime AS D
ON T.a = D.id AND D.age = 10
WHERE cast(D.name as bigint) > 1000
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], id=[$5], name=[$6], age=[$7])
+- LogicalFilter(condition=[>(CAST($6):BIGINT, 1000)])
   +- LogicalFilter(condition=[AND(=($0, $5), =($7, 10))])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
         :- LogicalTableScan(table=[[MyTable]])
         +- LogicalSnapshot(period=[$cor0.proctime])
            +- LogicalTableScan(table=[[temporalTest, source: [TestTemporalTable(id, name, age)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, id, name, CAST(10) AS age])
+- LookupJoin(table=[TestTemporalTable(id, name, age)], joinType=[InnerJoin], async=[false], on=[a=id], where=[AND(=(age, 10), >(CAST(name), 1000))], select=[a, b, c, proctime, rowtime, id, name, age])
   +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAvoidAggregatePushDown">
    <Resource name="sql">
      <![CDATA[
SELECT b, count(a), sum(c), sum(d)
FROM (
SELECT T.* FROM (
SELECT b, a, sum(c) c, sum(d) d, PROCTIME() as proc
FROM T1
GROUP BY a, b
      ) AS T
JOIN temporalTest FOR SYSTEM_TIME AS OF T.proc AS D
ON T.a = D.id
WHERE D.age > 10
      ) AS T
GROUP BY b
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[COUNT($1)], EXPR$2=[SUM($2)], EXPR$3=[SUM($3)])
+- LogicalProject(b=[$0], a=[$1], c=[$2], d=[$3])
   +- LogicalFilter(condition=[>($7, 10)])
      +- LogicalFilter(condition=[=($1, $5)])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{4}])
            :- LogicalProject(b=[$1], a=[$0], c=[$2], d=[$3], proc=[PROCTIME()])
            :  +- LogicalAggregate(group=[{0, 1}], c=[SUM($2)], d=[SUM($3)])
            :     +- LogicalTableScan(table=[[T1]])
            +- LogicalSnapshot(period=[$cor0.proc])
               +- LogicalTableScan(table=[[temporalTest, source: [TestTemporalTable(id, name, age)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[b], select=[b, COUNT_RETRACT(a) AS EXPR$1, SUM_RETRACT(c) AS EXPR$2, SUM_RETRACT(d) AS EXPR$3])
+- Exchange(distribution=[hash[b]])
   +- Calc(select=[b, a, c, d])
      +- LookupJoin(table=[TestTemporalTable(id, name, age)], joinType=[InnerJoin], async=[false], on=[a=id], where=[>(age, 10)], select=[b, a, c, d, id])
         +- Calc(select=[b, a, c, d])
            +- GroupAggregate(groupBy=[a, b], select=[a, b, SUM(c) AS c, SUM(d) AS d])
               +- Exchange(distribution=[hash[a, b]])
                  +- DataStreamScan(table=[[_DataStreamTable_1]], fields=[a, b, c, d])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinOnDifferentKeyTypes">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable AS T JOIN temporalTest FOR SYSTEM_TIME AS OF T.proctime AS D ON T.b = D.id]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], id=[$5], name=[$6], age=[$7])
+- LogicalFilter(condition=[=($1, $5)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
      :- LogicalTableScan(table=[[MyTable]])
      +- LogicalSnapshot(period=[$cor0.proctime])
         +- LogicalTableScan(table=[[temporalTest, source: [TestTemporalTable(id, name, age)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, id, name, age])
+- LookupJoin(table=[TestTemporalTable(id, name, age)], joinType=[InnerJoin], async=[false], on=[b=id], select=[a, b, c, proctime, rowtime, id, name, age])
   +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinTemporalTable">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable AS T JOIN temporalTest FOR SYSTEM_TIME AS OF T.proctime AS D ON T.a = D.id]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], id=[$5], name=[$6], age=[$7])
+- LogicalFilter(condition=[=($0, $5)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
      :- LogicalTableScan(table=[[MyTable]])
      +- LogicalSnapshot(period=[$cor0.proctime])
         +- LogicalTableScan(table=[[temporalTest, source: [TestTemporalTable(id, name, age)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, id, name, age])
+- LookupJoin(table=[TestTemporalTable(id, name, age)], joinType=[InnerJoin], async=[false], on=[a=id], select=[a, b, c, proctime, rowtime, id, name, age])
   +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinTemporalTableWithFilterPushDown">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM MyTable AS T
JOIN temporalTest FOR SYSTEM_TIME AS OF T.proctime AS D
ON T.a = D.id AND D.age = 10
WHERE T.c > 1000
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], id=[$5], name=[$6], age=[$7])
+- LogicalFilter(condition=[>($2, 1000)])
   +- LogicalFilter(condition=[AND(=($0, $5), =($7, 10))])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
         :- LogicalTableScan(table=[[MyTable]])
         +- LogicalSnapshot(period=[$cor0.proctime])
            +- LogicalTableScan(table=[[temporalTest, source: [TestTemporalTable(id, name, age)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, id, name, CAST(10) AS age])
+- LookupJoin(table=[TestTemporalTable(id, name, age)], joinType=[InnerJoin], async=[false], on=[a=id], where=[=(age, 10)], select=[a, b, c, proctime, rowtime, id, name, age])
   +- Calc(select=[a, b, c, proctime, rowtime], where=[>(c, 1000)])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinTemporalTableWithMultiIndexColumn">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM MyTable AS T
JOIN temporalTest FOR SYSTEM_TIME AS OF T.proctime AS D
ON T.a = D.id AND D.age = 10 AND D.name = 'AAA'
WHERE T.c > 1000
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], id=[$5], name=[$6], age=[$7])
+- LogicalFilter(condition=[>($2, 1000)])
   +- LogicalFilter(condition=[AND(=($0, $5), =($7, 10), =($6, _UTF-16LE'AAA'))])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
         :- LogicalTableScan(table=[[MyTable]])
         +- LogicalSnapshot(period=[$cor0.proctime])
            +- LogicalTableScan(table=[[temporalTest, source: [TestTemporalTable(id, name, age)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, id, CAST(_UTF-16LE'AAA':VARCHAR(65536) CHARACTER SET "UTF-16LE") AS name, CAST(10) AS age])
+- LookupJoin(table=[TestTemporalTable(id, name, age)], joinType=[InnerJoin], async=[false], on=[a=id], where=[AND(=(age, 10), =(name, _UTF-16LE'AAA':VARCHAR(65536) CHARACTER SET "UTF-16LE"))], select=[a, b, c, proctime, rowtime, id, name, age])
   +- Calc(select=[a, b, c, proctime, rowtime], where=[>(c, 1000)])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinTemporalTableWithNestedQuery">
    <Resource name="sql">
      <![CDATA[SELECT * FROM (SELECT a, b, proctime FROM MyTable WHERE c > 1000) AS T JOIN temporalTest FOR SYSTEM_TIME AS OF T.proctime AS D ON T.a = D.id]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], proctime=[$2], id=[$3], name=[$4], age=[$5])
+- LogicalFilter(condition=[=($0, $3)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
      :- LogicalProject(a=[$0], b=[$1], proctime=[$3])
      :  +- LogicalFilter(condition=[>($2, 1000)])
      :     +- LogicalTableScan(table=[[MyTable]])
      +- LogicalSnapshot(period=[$cor0.proctime])
         +- LogicalTableScan(table=[[temporalTest, source: [TestTemporalTable(id, name, age)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, PROCTIME_MATERIALIZE(proctime) AS proctime, id, name, age])
+- LookupJoin(table=[TestTemporalTable(id, name, age)], joinType=[InnerJoin], async=[false], on=[a=id], select=[a, b, proctime, id, name, age])
   +- Calc(select=[a, b, proctime], where=[>(c, 1000)])
      +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testLeftJoinTemporalTable">
    <Resource name="sql">
      <![CDATA[SELECT * FROM MyTable AS T LEFT JOIN temporalTest FOR SYSTEM_TIME AS OF T.proctime AS D ON T.a = D.id]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], id=[$5], name=[$6], age=[$7])
+- LogicalFilter(condition=[=($0, $5)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[left], requiredColumns=[{3}])
      :- LogicalTableScan(table=[[MyTable]])
      +- LogicalSnapshot(period=[$cor0.proctime])
         +- LogicalTableScan(table=[[temporalTest, source: [TestTemporalTable(id, name, age)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, id, name, age])
+- LookupJoin(table=[TestTemporalTable(id, name, age)], joinType=[LeftOuterJoin], async=[false], on=[a=id], select=[a, b, c, proctime, rowtime, id, name, age])
   +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinTemporalTableWithProjectionPushDown">
    <Resource name="sql">
      <![CDATA[
SELECT T.*, D.id
FROM MyTable AS T
JOIN temporalTest FOR SYSTEM_TIME AS OF T.proctime AS D
ON T.a = D.id
      ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], proctime=[$3], rowtime=[$4], id=[$5])
+- LogicalFilter(condition=[=($0, $5)])
   +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{3}])
      :- LogicalTableScan(table=[[MyTable]])
      +- LogicalSnapshot(period=[$cor0.proctime])
         +- LogicalTableScan(table=[[temporalTest, source: [TestTemporalTable(id, name, age)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Calc(select=[a, b, c, PROCTIME_MATERIALIZE(proctime) AS proctime, rowtime, id])
+- LookupJoin(table=[TestTemporalTable(id, name, age)], joinType=[InnerJoin], async=[false], on=[a=id], select=[a, b, c, proctime, rowtime, id, name, age])
   +- DataStreamScan(table=[[_DataStreamTable_0]], fields=[a, b, c, proctime, rowtime])
]]>
    </Resource>
  </TestCase>
</Root>
