<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testAggWithJoinFromLeftKeys">
    <Resource name="sql">
      <![CDATA[
SELECT a1, b1, COUNT(a2), SUM(b2) FROM
  (SELECT a1, b1, a2, b2 FROM T1 JOIN T2 ON a1 = a2 AND b1 = b2) t
GROUP BY a1, b1
         ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0, 1}], EXPR$2=[COUNT($2)], EXPR$3=[SUM($3)])
+- LogicalProject(a1=[$0], b1=[$1], a2=[$3], b2=[$4])
   +- LogicalJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[a1, b1], select=[a1, b1, COUNT(a2) AS EXPR$2, SUM(b2) AS EXPR$3])
+- Join(joinType=[InnerJoin], where=[AND(=(a1, a2), =(b1, b2))], select=[a1, b1, a2, b2], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
   :- Exchange(distribution=[hash[a1, b1]])
   :  +- Calc(select=[a1, b1])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
   +- Exchange(distribution=[hash[a2, b2]])
      +- Calc(select=[a2, b2])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]], fields=[a2, b2, c2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAggWithJoinFromRightKeys">
    <Resource name="sql">
      <![CDATA[
SELECT a2, b2, COUNT(a1), SUM(b1) FROM
  (SELECT a1, b1, a2, b2 FROM T1 JOIN T2 ON a1 = a2 AND b1 = b2) t
GROUP BY b2, a2
         ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a2=[$1], b2=[$0], EXPR$2=[$2], EXPR$3=[$3])
+- LogicalAggregate(group=[{0, 1}], EXPR$2=[COUNT($2)], EXPR$3=[SUM($3)])
   +- LogicalProject(b2=[$4], a2=[$3], a1=[$0], b1=[$1])
      +- LogicalJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner])
         :- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
         +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[a2, b2], select=[a2, b2, COUNT(a1) AS EXPR$2, SUM(b1) AS EXPR$3])
+- Join(joinType=[InnerJoin], where=[AND(=(a1, a2), =(b1, b2))], select=[a1, b1, a2, b2], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
   :- Exchange(distribution=[hash[a1, b1]])
   :  +- Calc(select=[a1, b1])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
   +- Exchange(distribution=[hash[a2, b2]])
      +- Calc(select=[a2, b2])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]], fields=[a2, b2, c2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testAggWithJoinWithPartialKey">
    <Resource name="sql">
      <![CDATA[
SELECT a1, MAX(b1), COUNT(a2), SUM(b2) FROM
  (SELECT a1, b1, a2, b2 FROM T1 JOIN T2 ON a1 = a2 AND b1 = b2) t
GROUP BY a1
         ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[MAX($1)], EXPR$2=[COUNT($2)], EXPR$3=[SUM($3)])
+- LogicalProject(a1=[$0], b1=[$1], a2=[$3], b2=[$4])
   +- LogicalJoin(condition=[AND(=($0, $3), =($1, $4))], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[a1], select=[a1, MAX(b1) AS EXPR$1, COUNT(a2) AS EXPR$2, SUM(b2) AS EXPR$3])
+- Exchange(distribution=[hash[a1]])
   +- Join(joinType=[InnerJoin], where=[AND(=(a1, a2), =(b1, b2))], select=[a1, b1, a2, b2], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
      :- Exchange(distribution=[hash[a1, b1]])
      :  +- Calc(select=[a1, b1])
      :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
      +- Exchange(distribution=[hash[a2, b2]])
         +- Calc(select=[a2, b2])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]], fields=[a2, b2, c2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinWithAggs">
    <Resource name="sql">
      <![CDATA[SELECT * FROM (SELECT a1, SUM(b1) AS b1 FROM T1 GROUP BY a1) LEFT JOIN (SELECT a2, SUM(b2) AS b2 FROM T2 GROUP BY a2) ON a1 = a2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$0], b1=[$1], a2=[$2], b2=[$3])
+- LogicalJoin(condition=[=($0, $2)], joinType=[left])
   :- LogicalAggregate(group=[{0}], b1=[SUM($1)])
   :  +- LogicalProject(a1=[$0], b1=[$1])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
   +- LogicalAggregate(group=[{0}], b2=[SUM($1)])
      +- LogicalProject(a2=[$0], b2=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Join(joinType=[LeftOuterJoin], where=[=(a1, a2)], select=[a1, b1, a2, b2], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
:- GroupAggregate(groupBy=[a1], select=[a1, SUM(b1) AS b1])
:  +- Exchange(distribution=[hash[a1]])
:     +- Calc(select=[a1, b1])
:        +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
+- GroupAggregate(groupBy=[a2], select=[a2, SUM(b2) AS b2])
   +- Exchange(distribution=[hash[a2]])
      +- Calc(select=[a2, b2])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]], fields=[a2, b2, c2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testJoinWithAggsWithCalc">
    <Resource name="sql">
      <![CDATA[SELECT * FROM (SELECT SUM(b1) AS b1, a1 FROM T1 GROUP BY a1) LEFT JOIN (SELECT SUM(b2) AS b2, a2 FROM T2 GROUP BY a2) ON a1 = a2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b1=[$0], a1=[$1], b2=[$2], a2=[$3])
+- LogicalJoin(condition=[=($1, $3)], joinType=[left])
   :- LogicalProject(b1=[$1], a1=[$0])
   :  +- LogicalAggregate(group=[{0}], b1=[SUM($1)])
   :     +- LogicalProject(a1=[$0], b1=[$1])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
   +- LogicalProject(b2=[$1], a2=[$0])
      +- LogicalAggregate(group=[{0}], b2=[SUM($1)])
         +- LogicalProject(a2=[$0], b2=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Join(joinType=[LeftOuterJoin], where=[=(a1, a2)], select=[b1, a1, b2, a2], leftInputSpec=[JoinKeyContainsUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
:- Exchange(distribution=[hash[a1]])
:  +- Calc(select=[b1, a1])
:     +- GroupAggregate(groupBy=[a1], select=[a1, SUM(b1) AS b1])
:        +- Exchange(distribution=[hash[a1]])
:           +- Calc(select=[a1, b1])
:              +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
+- Exchange(distribution=[hash[a2]])
   +- Calc(select=[b2, a2])
      +- GroupAggregate(groupBy=[a2], select=[a2, SUM(b2) AS b2])
         +- Exchange(distribution=[hash[a2]])
            +- Calc(select=[a2, b2])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]], fields=[a2, b2, c2])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultipleFullJoins">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
  (SELECT * FROM T1 FULL JOIN T2 ON a1 = a2) TMP
    FULL JOIN T3 ON a1 = a3
         ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$0], b1=[$1], c1=[$2], a2=[$3], b2=[$4], c2=[$5], a3=[$6], b3=[$7], c3=[$8])
+- LogicalJoin(condition=[=($0, $6)], joinType=[full])
   :- LogicalProject(a1=[$0], b1=[$1], c1=[$2], a2=[$3], b2=[$4], c2=[$5])
   :  +- LogicalJoin(condition=[=($0, $3)], joinType=[full])
   :     :- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Join(joinType=[FullOuterJoin], where=[=(a1, a3)], select=[a1, b1, c1, a2, b2, c2, a3, b3, c3], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:- Exchange(distribution=[hash[a1]])
:  +- Join(joinType=[FullOuterJoin], where=[=(a1, a2)], select=[a1, b1, c1, a2, b2, c2], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:     :- Exchange(distribution=[hash[a1]])
:     :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
:     +- Exchange(distribution=[hash[a2]])
:        +- LegacyTableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]], fields=[a2, b2, c2])
+- Exchange(distribution=[hash[a3]])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]], fields=[a3, b3, c3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultipleGroupAggWithEmptyKey">
    <Resource name="sql">
      <![CDATA[
SELECT SUM(b) FROM (SELECT COUNT(b1) AS b FROM T1) t
         ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{}], EXPR$0=[SUM($0)])
+- LogicalAggregate(group=[{}], b=[COUNT($0)])
   +- LogicalProject(b1=[$1])
      +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(select=[SUM_RETRACT(b) AS EXPR$0])
+- Exchange(distribution=[single])
   +- GroupAggregate(select=[COUNT(b1) AS b])
      +- Exchange(distribution=[single])
         +- Calc(select=[b1])
            +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultipleGroupAggWithSameKeys">
    <Resource name="sql">
      <![CDATA[
SELECT a1, count(*) FROM (SELECT a1 FROM T1 GROUP BY a1) t GROUP BY a1
         ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalAggregate(group=[{0}], EXPR$1=[COUNT()])
+- LogicalAggregate(group=[{0}])
   +- LogicalProject(a1=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
GroupAggregate(groupBy=[a1], select=[a1, COUNT_RETRACT(*) AS EXPR$1])
+- GroupAggregate(groupBy=[a1], select=[a1])
   +- Exchange(distribution=[hash[a1]])
      +- Calc(select=[a1])
         +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultipleRightJoinsWithJoinKeyWithLeftSide">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
  (SELECT * FROM T1 RIGHT JOIN T2 ON a1 = a2) TMP
    RIGHT JOIN T3 ON a1 = a3
         ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$0], b1=[$1], c1=[$2], a2=[$3], b2=[$4], c2=[$5], a3=[$6], b3=[$7], c3=[$8])
+- LogicalJoin(condition=[=($0, $6)], joinType=[right])
   :- LogicalProject(a1=[$0], b1=[$1], c1=[$2], a2=[$3], b2=[$4], c2=[$5])
   :  +- LogicalJoin(condition=[=($0, $3)], joinType=[right])
   :     :- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Join(joinType=[RightOuterJoin], where=[=(a1, a3)], select=[a1, b1, c1, a2, b2, c2, a3, b3, c3], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:- Exchange(distribution=[hash[a1]])
:  +- Join(joinType=[RightOuterJoin], where=[=(a1, a2)], select=[a1, b1, c1, a2, b2, c2], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:     :- Exchange(distribution=[hash[a1]])
:     :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
:     +- Exchange(distribution=[hash[a2]])
:        +- LegacyTableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]], fields=[a2, b2, c2])
+- Exchange(distribution=[hash[a3]])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]], fields=[a3, b3, c3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultipleInnerJoins">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM T1, T2, T3, T4
WHERE a1 = a2 AND a2 = a3 AND a3 = a4
         ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$0], b1=[$1], c1=[$2], a2=[$3], b2=[$4], c2=[$5], a3=[$6], b3=[$7], c3=[$8], a4=[$9], b4=[$10], c4=[$11])
+- LogicalFilter(condition=[AND(=($0, $3), =($3, $6), =($6, $9))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
      :  :  +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, T4, source: [TestTableSource(a4, b4, c4)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Join(joinType=[InnerJoin], where=[=(a3, a4)], select=[a1, b1, c1, a2, b2, c2, a3, b3, c3, a4, b4, c4], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:- Join(joinType=[InnerJoin], where=[=(a2, a3)], select=[a1, b1, c1, a2, b2, c2, a3, b3, c3], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:  :- Join(joinType=[InnerJoin], where=[=(a1, a2)], select=[a1, b1, c1, a2, b2, c2], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:  :  :- Exchange(distribution=[hash[a1]])
:  :  :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
:  :  +- Exchange(distribution=[hash[a2]])
:  :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]], fields=[a2, b2, c2])
:  +- Exchange(distribution=[hash[a3]])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]], fields=[a3, b3, c3])
+- Exchange(distribution=[hash[a4]])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, T4, source: [TestTableSource(a4, b4, c4)]]], fields=[a4, b4, c4])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultipleInnerJoinsWithPartialKey">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM T1, T2, T3, T4
WHERE a1 = a2 AND a2 = a3 AND a3 = a4 AND b3 = b4
         ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$0], b1=[$1], c1=[$2], a2=[$3], b2=[$4], c2=[$5], a3=[$6], b3=[$7], c3=[$8], a4=[$9], b4=[$10], c4=[$11])
+- LogicalFilter(condition=[AND(=($0, $3), =($3, $6), =($6, $9), =($7, $10))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
      :  :  +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, T4, source: [TestTableSource(a4, b4, c4)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Join(joinType=[InnerJoin], where=[AND(=(a3, a4), =(b3, b4))], select=[a1, b1, c1, a2, b2, c2, a3, b3, c3, a4, b4, c4], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:- Exchange(distribution=[hash[a3, b3]])
:  +- Join(joinType=[InnerJoin], where=[=(a2, a3)], select=[a1, b1, c1, a2, b2, c2, a3, b3, c3], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:     :- Join(joinType=[InnerJoin], where=[=(a1, a2)], select=[a1, b1, c1, a2, b2, c2], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:     :  :- Exchange(distribution=[hash[a1]])
:     :  :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
:     :  +- Exchange(distribution=[hash[a2]])
:     :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]], fields=[a2, b2, c2])
:     +- Exchange(distribution=[hash[a3]])
:        +- LegacyTableSourceScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]], fields=[a3, b3, c3])
+- Exchange(distribution=[hash[a4, b4]])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, T4, source: [TestTableSource(a4, b4, c4)]]], fields=[a4, b4, c4])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultipleInnerJoinsWithMultipleKeys">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM T1, T2, T3, T4
WHERE a1 = a2 AND b1 = b2 AND a2 = a3 AND b3 = b2 AND a3 = a4 AND b3 = b4
         ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$0], b1=[$1], c1=[$2], a2=[$3], b2=[$4], c2=[$5], a3=[$6], b3=[$7], c3=[$8], a4=[$9], b4=[$10], c4=[$11])
+- LogicalFilter(condition=[AND(=($0, $3), =($1, $4), =($3, $6), =($7, $4), =($6, $9), =($7, $10))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
      :  :  +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, T4, source: [TestTableSource(a4, b4, c4)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Join(joinType=[InnerJoin], where=[AND(=(a3, a4), =(b3, b4))], select=[a1, b1, c1, a2, b2, c2, a3, b3, c3, a4, b4, c4], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:- Join(joinType=[InnerJoin], where=[AND(=(a2, a3), =(b3, b2))], select=[a1, b1, c1, a2, b2, c2, a3, b3, c3], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:  :- Join(joinType=[InnerJoin], where=[AND(=(a1, a2), =(b1, b2))], select=[a1, b1, c1, a2, b2, c2], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:  :  :- Exchange(distribution=[hash[a1, b1]])
:  :  :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
:  :  +- Exchange(distribution=[hash[a2, b2]])
:  :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]], fields=[a2, b2, c2])
:  +- Exchange(distribution=[hash[a3, b3]])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]], fields=[a3, b3, c3])
+- Exchange(distribution=[hash[a4, b4]])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, T4, source: [TestTableSource(a4, b4, c4)]]], fields=[a4, b4, c4])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultipleLeftJoinsWithJoinKeyWithRightSide">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
  (SELECT * FROM T1 LEFT JOIN T2 ON a1 = a2) TMP
    LEFT JOIN T3 ON a2 = a3
         ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$0], b1=[$1], c1=[$2], a2=[$3], b2=[$4], c2=[$5], a3=[$6], b3=[$7], c3=[$8])
+- LogicalJoin(condition=[=($3, $6)], joinType=[left])
   :- LogicalProject(a1=[$0], b1=[$1], c1=[$2], a2=[$3], b2=[$4], c2=[$5])
   :  +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
   :     :- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Join(joinType=[LeftOuterJoin], where=[=(a2, a3)], select=[a1, b1, c1, a2, b2, c2, a3, b3, c3], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:- Exchange(distribution=[hash[a2]])
:  +- Join(joinType=[LeftOuterJoin], where=[=(a1, a2)], select=[a1, b1, c1, a2, b2, c2], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:     :- Exchange(distribution=[hash[a1]])
:     :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
:     +- Exchange(distribution=[hash[a2]])
:        +- LegacyTableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]], fields=[a2, b2, c2])
+- Exchange(distribution=[hash[a3]])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]], fields=[a3, b3, c3])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultipleLeftJoins">
    <Resource name="sql">
      <![CDATA[
SELECT * FROM
 (SELECT * FROM
   (SELECT * FROM T1 LEFT JOIN T2 ON a1 = a2) TMP1
     LEFT JOIN T3 ON a1 = a3) TMP2
 LEFT JOIN T4 ON a1 = a4
         ]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a1=[$0], b1=[$1], c1=[$2], a2=[$3], b2=[$4], c2=[$5], a3=[$6], b3=[$7], c3=[$8], a4=[$9], b4=[$10], c4=[$11])
+- LogicalJoin(condition=[=($0, $9)], joinType=[left])
   :- LogicalProject(a1=[$0], b1=[$1], c1=[$2], a2=[$3], b2=[$4], c2=[$5], a3=[$6], b3=[$7], c3=[$8])
   :  +- LogicalJoin(condition=[=($0, $6)], joinType=[left])
   :     :- LogicalProject(a1=[$0], b1=[$1], c1=[$2], a2=[$3], b2=[$4], c2=[$5])
   :     :  +- LogicalJoin(condition=[=($0, $3)], joinType=[left])
   :     :     :- LogicalTableScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]])
   :     :     +- LogicalTableScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]])
   +- LogicalTableScan(table=[[default_catalog, default_database, T4, source: [TestTableSource(a4, b4, c4)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
Join(joinType=[LeftOuterJoin], where=[=(a1, a4)], select=[a1, b1, c1, a2, b2, c2, a3, b3, c3, a4, b4, c4], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:- Join(joinType=[LeftOuterJoin], where=[=(a1, a3)], select=[a1, b1, c1, a2, b2, c2, a3, b3, c3], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:  :- Join(joinType=[LeftOuterJoin], where=[=(a1, a2)], select=[a1, b1, c1, a2, b2, c2], leftInputSpec=[NoUniqueKey], rightInputSpec=[NoUniqueKey])
:  :  :- Exchange(distribution=[hash[a1]])
:  :  :  +- LegacyTableSourceScan(table=[[default_catalog, default_database, T1, source: [TestTableSource(a1, b1, c1)]]], fields=[a1, b1, c1])
:  :  +- Exchange(distribution=[hash[a2]])
:  :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, T2, source: [TestTableSource(a2, b2, c2)]]], fields=[a2, b2, c2])
:  +- Exchange(distribution=[hash[a3]])
:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, T3, source: [TestTableSource(a3, b3, c3)]]], fields=[a3, b3, c3])
+- Exchange(distribution=[hash[a4]])
   +- LegacyTableSourceScan(table=[[default_catalog, default_database, T4, source: [TestTableSource(a4, b4, c4)]]], fields=[a4, b4, c4])
]]>
    </Resource>
  </TestCase>
</Root>
