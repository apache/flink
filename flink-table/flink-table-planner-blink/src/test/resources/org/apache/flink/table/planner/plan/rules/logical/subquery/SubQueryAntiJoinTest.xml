<?xml version="1.0" ?>
<!--
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to you under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<Root>
  <TestCase name="testInNotInExistsNotExists1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a IN (SELECT d FROM r)  AND b NOT IN (SELECT i FROM t WHERE l.c = t.k AND i > 10)  AND EXISTS (SELECT COUNT(l) FROM t2 where n like 'Test' GROUP BY l) AND NOT EXISTS (SELECT * FROM r WHERE l.b <> r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(IN($0, {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}), NOT(IN($1, {
LogicalProject(i=[$0])
  LogicalFilter(condition=[AND(=($cor0.c, $2), >($0, 10))])
    LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})), EXISTS({
LogicalAggregate(group=[{0}], EXPR$0=[COUNT($0)])
  LogicalProject(l=[$0])
    LogicalFilter(condition=[LIKE($2, _UTF-16LE'Test')])
      LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(l, m, n)]]])
}), NOT(EXISTS({
LogicalFilter(condition=[<>($cor0.b, $1)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[<>($1, $3)], joinType=[anti])
   :- LogicalJoin(condition=[AND(OR(IS NULL($1), IS NULL($3), =($1, $3)), =($2, $4))], joinType=[anti])
   :  :- LogicalJoin(condition=[$3], joinType=[semi])
   :  :  :- LogicalJoin(condition=[=($0, $3)], joinType=[semi])
   :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   :  :  :  +- LogicalProject(d=[$0])
   :  :  :     +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
   :  :  +- LogicalProject($f0=[IS NOT NULL($0)])
   :  :     +- LogicalAggregate(group=[{}], m=[MIN($0)])
   :  :        +- LogicalProject(i=[true])
   :  :           +- LogicalAggregate(group=[{0}], EXPR$0=[COUNT($0)])
   :  :              +- LogicalProject(l=[$0])
   :  :                 +- LogicalFilter(condition=[LIKE($2, _UTF-16LE'Test')])
   :  :                    +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(l, m, n)]]])
   :  +- LogicalProject(i=[$0], k=[$2])
   :     +- LogicalFilter(condition=[>($0, 10)])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
   +- LogicalProject(e=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiNotExistsWithCorrelatedOnWhere_AND1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l, r WHERE l.a = r.d AND NOT EXISTS (SELECT * FROM t t1 WHERE l.b = t1.j AND t1.k > 50) AND c >= 1 AND NOT EXISTS (SELECT * FROM t t2 WHERE l.a = t2.i AND t2.j < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), NOT(EXISTS({
LogicalFilter(condition=[AND(=($cor0.b, $1), >(CAST($2):BIGINT, 50))])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})), >=(CAST($2):BIGINT, 1), NOT(EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), >=(CAST($2):BIGINT, 1))])
   +- LogicalJoin(condition=[=($0, $6)], joinType=[anti])
      :- LogicalJoin(condition=[=($1, $6)], joinType=[anti])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :  :  +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
      :  +- LogicalProject(j=[$1])
      :     +- LogicalFilter(condition=[>(CAST($2):BIGINT, 50)])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
      +- LogicalProject(i=[$0])
         +- LogicalFilter(condition=[<($1, 100)])
            +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiNotExistsWithCorrelatedOnWhere_AND2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l, r WHERE l.a = r.d AND NOT EXISTS (SELECT * FROM t t1 WHERE l.b = t1.j AND t1.k > 50) AND (c >= 1 AND NOT EXISTS (SELECT * FROM t t2 WHERE l.a = t2.i AND t2.j < 100))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), NOT(EXISTS({
LogicalFilter(condition=[AND(=($cor0.b, $1), >(CAST($2):BIGINT, 50))])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})), >=(CAST($2):BIGINT, 1), NOT(EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3], e=[$4], f=[$5])
+- LogicalFilter(condition=[AND(=($0, $3), >=(CAST($2):BIGINT, 1))])
   +- LogicalJoin(condition=[=($0, $6)], joinType=[anti])
      :- LogicalJoin(condition=[=($1, $6)], joinType=[anti])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :  :  +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
      :  +- LogicalProject(j=[$1])
      :     +- LogicalFilter(condition=[>(CAST($2):BIGINT, 50)])
      :        +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
      +- LogicalProject(i=[$0])
         +- LogicalFilter(condition=[<($1, 100)])
            +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiNotExistsWithUncorrelatedAndCorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE NOT EXISTS (SELECT * FROM r) AND NOT EXISTS (SELECT * FROM t WHERE l.a = t.i AND t.j < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(NOT(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})), NOT(EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), <($1, 100))])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($0, $3)], joinType=[anti])
   :- LogicalJoin(condition=[$3], joinType=[anti])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   :  +- LogicalProject($f0=[IS NOT NULL($0)])
   :     +- LogicalAggregate(group=[{}], m=[MIN($0)])
   :        +- LogicalProject(i=[true])
   :           +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
   +- LogicalProject(i=[$0])
      +- LogicalFilter(condition=[<($1, 100)])
         +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiNotExistsWithUncorrelatedAndCorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE NOT EXISTS (SELECT * FROM r WHERE l.a <> r.d) AND NOT EXISTS (SELECT * FROM t WHERE j < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(NOT(EXISTS({
LogicalFilter(condition=[<>($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})), NOT(EXISTS({
LogicalFilter(condition=[<($1, 100)])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[$3], joinType=[anti])
   :- LogicalJoin(condition=[<>($0, $3)], joinType=[anti])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   :  +- LogicalProject(d=[$0])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalFilter(condition=[<($1, 100)])
               +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiNotExistsWithUncorrelatedAndCorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE NOT EXISTS (SELECT * FROM r WHERE NOT EXISTS (SELECT * FROM t) AND l.a = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(EXISTS({
LogicalFilter(condition=[AND(NOT(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})), =($cor0.a, $0))])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($0, $3)], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0])
      +- LogicalJoin(condition=[$3], joinType=[anti])
         :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalProject($f0=[IS NOT NULL($0)])
            +- LogicalAggregate(group=[{}], m=[MIN($0)])
               +- LogicalProject(i=[true])
                  +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiNotExistsWithUncorrelatedAndCorrelatedOnWhere4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE NOT EXISTS (SELECT * FROM r WHERE NOT EXISTS (SELECT * FROM t WHERE r.d = t.i))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(EXISTS({
LogicalFilter(condition=[NOT(EXISTS({
LogicalFilter(condition=[=($cor0.d, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
}))], variablesSet=[[$cor0]])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[$3], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalJoin(condition=[=($0, $3)], joinType=[anti])
               :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
               +- LogicalProject(i=[$0])
                  +- LogicalFilter(condition=[true])
                     +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testMultiNotExistsWithUncorrelatedOnWhere_AND1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x, y WHERE x.a = y.c AND NOT EXISTS (SELECT * FROM z z1 WHERE z1.e > 50) AND b >= 1 AND NOT EXISTS (SELECT * FROM z z2 WHERE z2.f < 100)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3])
+- LogicalFilter(condition=[AND(=($0, $2), NOT(EXISTS({
LogicalFilter(condition=[>($0, 50)])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})), >=($1, 1), NOT(EXISTS({
LogicalFilter(condition=[<($1, 100)])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})))])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2], d=[$3])
+- LogicalFilter(condition=[AND(=($0, $2), >=($1, 1))])
   +- LogicalJoin(condition=[$4], joinType=[anti])
      :- LogicalJoin(condition=[$4], joinType=[anti])
      :  :- LogicalJoin(condition=[true], joinType=[inner])
      :  :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      :  :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
      :  +- LogicalProject($f0=[IS NOT NULL($0)])
      :     +- LogicalAggregate(group=[{}], m=[MIN($0)])
      :        +- LogicalProject(i=[true])
      :           +- LogicalFilter(condition=[>($0, 50)])
      :              +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalFilter(condition=[<($1, 100)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithCorrelatedOnLateralTable">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE NOT EXISTS (SELECT * FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE a = d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(EXISTS({
LogicalFilter(condition=[=($cor1.a, $0)])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
}))], variablesSet=[[$cor1]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($0, $3)], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
            :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
            +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithCorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE NOT EXISTS (SELECT * FROM y WHERE a = c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($0, $2)], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithCorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE NOT EXISTS (SELECT * FROM y WHERE a = c) AND x.a > 2]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(NOT(EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})), >($0, 2))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[>($0, 2)])
   +- LogicalJoin(condition=[=($0, $2)], joinType=[anti])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithCorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE NOT EXISTS (SELECT 1, c + d, c + 2, d FROM y WHERE a = c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($0, $2)], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithCorrelatedOnWhere4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE NOT EXISTS (SELECT * FROM y WHERE x.a = c and x.b > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(EXISTS({
LogicalFilter(condition=[AND(=($cor0.a, $0), >($cor0.b, 10))])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(=($0, $2), >($1, 10))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithCorrelatedOnWhere5">
    <Resource name="sql">
      <![CDATA[SELECT x1.a FROM x x1, y WHERE x1.b = y.d AND x1.a < 10 AND y.c < 15  AND NOT EXISTS (SELECT * FROM x x2 WHERE x1.b = x2.b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[AND(=($1, $3), <($0, 10), <($2, 15), NOT(EXISTS({
LogicalFilter(condition=[=($cor0.b, $1)])
  LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalJoin(condition=[true], joinType=[inner])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[AND(=($1, $3), <($0, 10), <($2, 15))])
   +- LogicalJoin(condition=[=($1, $4)], joinType=[anti])
      :- LogicalJoin(condition=[true], joinType=[inner])
      :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
      +- LogicalProject(b=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithCorrelatedOnWhere6">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE NOT EXISTS (SELECT * FROM y WHERE x.a < y.c)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(EXISTS({
LogicalFilter(condition=[<($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[<($0, $2)], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithCorrelatedOnWhere7">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE (NOT EXISTS (SELECT d FROM y WHERE y.d = x.b)) IS TRUE]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(NOT(EXISTS({
LogicalFilter(condition=[=($1, $cor0.b)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($2, $1)], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithCorrelatedOnWhere8">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x WHERE NOT EXISTS (SELECT x.a IS NULL FROM y WHERE y.d = x.b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[NOT(EXISTS({
LogicalFilter(condition=[=($1, $cor0.b)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[=($2, $1)], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithCorrelatedOnWhere9">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE (NOT EXISTS (SELECT d FROM y WHERE y.d = x.b)) = true]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[=(NOT(EXISTS({
LogicalFilter(condition=[=($1, $cor0.b)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})), true)], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[=($2, $1)], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithUncorrelatedOnLateralTable">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE NOT EXISTS (SELECT * FROM r, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(EXISTS({
LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
  LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[$3], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
               :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
               +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithUncorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE NOT EXISTS (SELECT * FROM y)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[$2], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithUncorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE NOT EXISTS (SELECT * FROM y where c > 0) AND a < 100]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(NOT(EXISTS({
LogicalFilter(condition=[>($0, 0)])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})), <($0, 100))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[<($0, 100)])
   +- LogicalJoin(condition=[$2], joinType=[anti])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalFilter(condition=[>($0, 0)])
                  +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithUncorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE NOT (NOT (NOT EXISTS (SELECT * FROM y))) AND x.b = 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(NOT(NOT(NOT(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})))), =($1, 10))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[=($1, 10)])
   +- LogicalJoin(condition=[$2], joinType=[anti])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject($f0=[IS NOT NULL($0)])
         +- LogicalAggregate(group=[{}], m=[MIN($0)])
            +- LogicalProject(i=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithUncorrelatedOnWhere5">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE (NOT EXISTS (SELECT d FROM y)) IS TRUE]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(NOT(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[$2], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithUncorrelatedOnWhere6">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x WHERE NOT EXISTS (SELECT x.b IS NULL FROM y)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[NOT(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[$2], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotExistsWithUncorrelatedOnWhere7">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (NOT EXISTS (SELECT d FROM r)) = true]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[=(NOT(EXISTS({
LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})), true)])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[$3], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject($f0=[IS NOT NULL($0)])
      +- LogicalAggregate(group=[{}], m=[MIN($0)])
         +- LogicalProject(i=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInNotExists1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE NOT EXISTS (SELECT * FROM r WHERE l.a = r.d) AND a NOT IN (SELECT i FROM t WHERE l.b = t.j)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(NOT(EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})), NOT(IN($0, {
LogicalProject(i=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($3), =($0, $3)), =($1, $4))], joinType=[anti])
   :- LogicalJoin(condition=[=($0, $3)], joinType=[anti])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   :  +- LogicalProject(d=[$0])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
   +- LogicalProject(i=[$0], j=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInNotExists2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b NOT IN (SELECT j FROM t)  AND NOT EXISTS (SELECT * FROM r WHERE l.a = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(NOT(IN($1, {
LogicalProject(j=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
})), NOT(EXISTS({
LogicalFilter(condition=[=($cor0.a, $0)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[=($0, $3)], joinType=[anti])
   :- LogicalJoin(condition=[OR(IS NULL($1), IS NULL($3), =($1, $3))], joinType=[anti])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   :  +- LogicalProject(j=[$1])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, t, source: [TestTableSource(i, j, k)]]])
   +- LogicalProject(d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnLateralTable">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c NOT IN (SELECT f1 FROM r, LATERAL TABLE(table_func(f)) AS T(f1) WHERE a = d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN($2, {
LogicalProject(f1=[$3])
  LogicalFilter(condition=[=($cor1.a, $0)])
    LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
      LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
      LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
}))], variablesSet=[[$cor1]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(OR(IS NULL($2), IS NULL($3), =($2, $3)), =($0, $4))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(f1=[$3], d=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
            :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
            +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a NOT IN (SELECT c FROM y where x.b = y.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($2), =($0, $2)), =($1, $3))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE b > 1 AND a NOT IN (SELECT c FROM y WHERE x.b = y.d AND y.c > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(>($1, 1), NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[>($1, 1)])
   +- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($2), =($0, $2)), =($1, $3))], joinType=[anti])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(c=[$0], d=[$1])
         +- LogicalFilter(condition=[>($0, 10)])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE b > 1 AND a + 1 NOT IN (SELECT c FROM y WHERE x.b = y.d AND y.c > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(>($1, 1), NOT(IN(+($0, 1), {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(=($cor0.b, $1), >($0, 10))])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalFilter(condition=[>($1, 1)])
      +- LogicalJoin(condition=[AND(OR(IS NULL($2), IS NULL($3), =($2, $3)), =($1, $4))], joinType=[anti])
         :- LogicalProject(a=[$0], b=[$1], $f2=[+($0, 1)])
         :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
         +- LogicalProject(c=[$0], d=[$1])
            +- LogicalFilter(condition=[>($0, 10)])
               +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a NOT IN (SELECT c1 FROM (SELECT d * 2 as d1, c + 1 as c1 FROM y) y1 WHERE x.b = y1.d1 AND d1 > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(IN($0, {
LogicalProject(c1=[$1])
  LogicalFilter(condition=[AND(=($cor0.b, $0), >($0, 10))])
    LogicalProject(d1=[*($1, 2)], c1=[+($0, 1)])
      LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($2), =($0, $2)), =($1, $3))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c1=[$1], d1=[$0])
      +- LogicalFilter(condition=[>($0, 10)])
         +- LogicalProject(d1=[*($1, 2)], c1=[+($0, 1)])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere5">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a NOT IN (SELECT c FROM y WHERE x.b > y.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($2), =($0, $2)), >($1, $3))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere6">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a NOT IN (SELECT c FROM y WHERE x.b > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[>($cor0.b, 10)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($2), =($0, $2)), >($1, 10))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_Case1">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a > 10 THEN 1 ELSE 2 END) NOT IN (SELECT d FROM r WHERE l.a = r.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[NOT(IN(CASE(>($0, 10), 1, 2), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.a, $0)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(OR(IS NULL($4), =($3, $4)), =($0, $4))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(>($0, 10), 1, 2)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_Case2">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a IN (SELECT 1 FROM t1) THEN 1 ELSE 2 END) NOT IN (SELECT d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[NOT(IN(CASE(IN($0, {
LogicalProject(EXPR$0=[1])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
}), 1, 2), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(OR(IS NULL($4), =($3, $4)), =($2, $5))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(AND(<>($3, 0), IS NOT NULL($6), IS NOT NULL($0)), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(EXPR$0=[1])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(EXPR$0=[1], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_Case3">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a NOT IN (SELECT i FROM t1) THEN 1 ELSE 2 END) NOT IN (SELECT d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[NOT(IN(CASE(NOT(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
})), 1, 2), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(OR(IS NULL($4), =($3, $4)), =($2, $5))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(OR(=($3, 0), AND(IS NULL($6), >=($4, $3), IS NOT NULL($0))), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(i=[$0])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(i=[$0], i0=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_Case4">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a NOT IN (SELECT i FROM t1) THEN 1 WHEN a NOT IN (SELECT j FROM t2) THEN 2 ELSE 3 END) NOT IN (SELECT d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[NOT(IN(CASE(NOT(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
})), 1, NOT(IN($0, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
})), 2, 3), {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(OR(IS NULL($4), =($3, $4)), =($2, $5))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(OR(=($3, 0), AND(IS NULL($6), >=($4, $3), IS NOT NULL($0))), 1, OR(=($7, 0), AND(IS NULL($10), >=($8, $7), IS NOT NULL($0))), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$0])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_Case5">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (b, (CASE WHEN a NOT IN (SELECT i FROM t1) THEN 1 WHEN a NOT IN (SELECT j FROM t2) THEN 2 ELSE 3 END)) NOT IN (SELECT e, d FROM r WHERE l.c = r.f)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[NOT(IN($1, CASE(NOT(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
})), 1, NOT(IN($0, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
})), 2, 3), {
LogicalProject(e=[$1], d=[$0])
  LogicalFilter(condition=[=($cor0.c, $2)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(OR(IS NULL($1), IS NULL($4), =($1, $4)), OR(IS NULL($5), =($3, $5)), =($2, $6))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(OR(=($3, 0), AND(IS NULL($6), >=($4, $3), IS NOT NULL($0))), 1, OR(=($7, 0), AND(IS NULL($10), >=($8, $7), IS NOT NULL($0))), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$0])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      +- LogicalProject(e=[$1], d=[$0], f=[$2])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_ComplexCondition1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE a NOT IN (SELECT CAST(e AS INTEGER) FROM r where CAST(l.b AS INTEGER) = CAST(r.d AS INTEGER))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN($0, {
LogicalProject(EXPR$0=[CAST($1):INTEGER])
  LogicalFilter(condition=[=(CAST($cor0.b):INTEGER, CAST($0):INTEGER)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($4), =($0, $4)), =($3, $5))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], b0=[CAST($1):INTEGER])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(EXPR$0=[CAST($1):INTEGER], d=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_ComplexCondition2">
    <Resource name="sql">
      <![CDATA[SELECT a + 10, c FROM l WHERE a + 10 NOT IN (SELECT d + 1 FROM r WHERE l.b + 1 = r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalFilter(condition=[NOT(IN(+($0, 10), {
LogicalProject(EXPR$0=[+($0, 1)])
  LogicalFilter(condition=[=(+($cor0.b, 1), $1)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(EXPR$0=[+($0, 10)], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3])
      +- LogicalJoin(condition=[AND(OR(IS NULL($3), IS NULL($5), =($3, $5)), =($4, $6))], joinType=[anti])
         :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[$3], $f4=[+($1, 1)])
         :  +- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 10)])
         :     +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
         +- LogicalProject(EXPR$0=[+($0, 1)], e=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_ComplexCondition3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c NOT IN (SELECT TRIM(f) FROM r where l.a = r.d + 1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN($2, {
LogicalProject(EXPR$0=[TRIM(FLAG(BOTH), _UTF-16LE' ', $2)])
  LogicalFilter(condition=[=($cor0.a, +($0, 1))])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(OR(IS NULL($2), IS NULL($3), =($2, $3)), =($0, $5))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[$0], d=[$1], $f2=[+($1, 1)])
      +- LogicalProject(EXPR$0=[TRIM(FLAG(BOTH), _UTF-16LE' ', $2)], d=[$0])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_ComplexCondition5">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 10 AND (c like 'abc' AND a NOT IN (SELECT d FROM r where l.b = r.e))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), LIKE($2, _UTF-16LE'abc'), NOT(IN($0, {
LogicalProject(d=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), LIKE($2, _UTF-16LE'abc'))])
   +- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($3), =($0, $3)), =($1, $4))], joinType=[anti])
      :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0], e=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_ComplexCondition6">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b NOT IN (SELECT e * 5 FROM (SELECT SUM(e) AS e FROM r WHERE l.a = r.d) r1)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN($1, {
LogicalProject(EXPR$0=[*($0, 5)])
  LogicalAggregate(group=[{}], e=[SUM($0)])
    LogicalProject(e=[$1])
      LogicalFilter(condition=[=($cor0.a, $0)])
        LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(OR(IS NULL($1), IS NULL($3), =($1, $3)), =($0, $4))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(EXPR$0=[*($1, 5)], d=[$0])
      +- LogicalAggregate(group=[{0}], e=[SUM($1)])
         +- LogicalProject(d=[$0], e=[$1])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_MultiFields1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, c) NOT IN (SELECT d, f FROM r WHERE l.b = r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN($0, $2, {
LogicalProject(d=[$0], f=[$2])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($3), =($0, $3)), OR(IS NULL($2), IS NULL($4), =($2, $4)), =($1, $5))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0], f=[$2], e=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_MultiFields2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, SUBSTRING(c, 1, 5)) NOT IN (SELECT d, TRIM(f) FROM r WHERE l.b = r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN($0, SUBSTRING($2, 1, 5), {
LogicalProject(d=[$0], EXPR$1=[TRIM(FLAG(BOTH), _UTF-16LE' ', $2)])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($4), =($0, $4)), OR(IS NULL($3), IS NULL($5), =($3, $5)), =($1, $6))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[SUBSTRING($2, 1, 5)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0], EXPR$1=[TRIM(FLAG(BOTH), _UTF-16LE' ', $2)], e=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithCorrelatedOnWhere_MultiFields3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a + 10, SUBSTRING(c, 1, 5)) NOT IN (SELECT d + 100, TRIM(f) FROM r WHERE l.b = r.e)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN(+($0, 10), SUBSTRING($2, 1, 5), {
LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[TRIM(FLAG(BOTH), _UTF-16LE' ', $2)])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(OR(IS NULL($3), IS NULL($5), =($3, $5)), OR(IS NULL($4), IS NULL($6), =($4, $6)), =($1, $7))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 10)], $f4=[SUBSTRING($2, 1, 5)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[TRIM(FLAG(BOTH), _UTF-16LE' ', $2)], e=[$1])
         +- LogicalFilter(condition=[true])
            +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedAndCorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x WHERE a NOT IN (SELECT c FROM y WHERE x.b = y.d) AND b NOT IN (SELECT f FROM z)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[AND(NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[=($cor0.b, $1)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})), NOT(IN($1, {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[OR(IS NULL($1), IS NULL($2), =($1, $2))], joinType=[anti])
   :- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($2), =($0, $2)), =($1, $3))], joinType=[anti])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   :  +- LogicalProject(c=[$0], d=[$1])
   :     +- LogicalFilter(condition=[true])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
   +- LogicalProject(f=[$1])
      +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedAndCorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a NOT IN (SELECT c FROM y) AND b NOT IN (SELECT e FROM z WHERE z.f = x.b)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})), NOT(IN($1, {
LogicalProject(e=[$0])
  LogicalFilter(condition=[=($1, $cor0.b)])
    LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(OR(IS NULL($1), IS NULL($2), =($1, $2)), =($3, $1))], joinType=[anti])
   :- LogicalJoin(condition=[OR(IS NULL($0), IS NULL($2), =($0, $2))], joinType=[anti])
   :  :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   :  +- LogicalProject(c=[$0])
   :     +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
   +- LogicalProject(e=[$0], f=[$1])
      +- LogicalFilter(condition=[true])
         +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedAndCorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a NOT IN (SELECT c FROM y WHERE d NOT IN (SELECT f FROM z) AND x.b = y.d)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[AND(NOT(IN($1, {
LogicalProject(f=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
})), =($cor0.b, $1))])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))], variablesSet=[[$cor0]])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($2), =($0, $2)), =($1, $3))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0], d=[$1])
      +- LogicalJoin(condition=[OR(IS NULL($1), IS NULL($2), =($1, $2))], joinType=[anti])
         :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
         +- LogicalProject(f=[$1])
            +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedAndCorrelatedOnWhere4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a NOT IN (SELECT c FROM y WHERE d NOT IN (SELECT f FROM z WHERE z.e = y.c))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[NOT(IN($1, {
LogicalProject(f=[$1])
  LogicalFilter(condition=[=($0, $cor0.c)])
    LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
}))], variablesSet=[[$cor0]])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[OR(IS NULL($0), IS NULL($2), =($0, $2))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalJoin(condition=[AND(OR(IS NULL($1), IS NULL($2), =($1, $2)), =($3, $0))], joinType=[anti])
         :- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
         +- LogicalProject(f=[$1], e=[$0])
            +- LogicalFilter(condition=[true])
               +- LogicalTableScan(table=[[default_catalog, default_database, z, source: [TestTableSource(e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnLateralTable">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE c NOT IN (SELECT f1 FROM r, LATERAL TABLE(table_func(f)) AS T(f1))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN($2, {
LogicalProject(f1=[$3])
  LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
    LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
    LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[OR(IS NULL($2), IS NULL($3), =($2, $3))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(f1=[$3])
      +- LogicalCorrelate(correlation=[$cor0], joinType=[inner], requiredColumns=[{2}])
         :- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
         +- LogicalTableFunctionScan(invocation=[table_func($cor0.f)], rowType=[RecordType(VARCHAR(2147483647) f0)], elementType=[class [Ljava.lang.Object;])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a NOT IN (SELECT c FROM y)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[OR(IS NULL($0), IS NULL($2), =($0, $2))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a NOT IN (SELECT c FROM y WHERE d < 100) AND b > 10]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[AND(NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[<($1, 100)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})), >($1, 10))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[>($1, 10)])
   +- LogicalJoin(condition=[OR(IS NULL($0), IS NULL($2), =($0, $2))], joinType=[anti])
      :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(c=[$0])
         +- LogicalFilter(condition=[<($1, 100)])
            +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a + 1 NOT IN (SELECT c FROM y)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(IN(+($0, 1), {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[OR(IS NULL($2), IS NULL($3), =($2, $3))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], $f2=[+($0, 1)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(c=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a * b NOT IN (SELECT d FROM y)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(IN(*($0, $1), {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[OR(IS NULL($2), IS NULL($3), =($2, $3))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], $f2=[*($0, $1)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere5">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE CAST(a AS BIGINT) NOT IN (SELECT d FROM y)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(IN(CAST($0):BIGINT, {
LogicalProject(d=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalProject(a=[$0], b=[$1])
   +- LogicalJoin(condition=[OR(IS NULL($2), IS NULL($3), =($2, $3))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], a0=[CAST($0):BIGINT])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
      +- LogicalProject(d=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere6">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE a NOT IN (SELECT c FROM y WHERE c IS NOT NULL)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalFilter(condition=[IS NOT NULL($0)])
    LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[OR(IS NULL($0), IS NULL($2), =($0, $2))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalFilter(condition=[IS NOT NULL($0)])
         +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere7">
    <Resource name="sql">
      <![CDATA[SELECT a FROM x x1 WHERE a NOT IN (SELECT a FROM x WHERE a < 3 GROUP BY a)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalFilter(condition=[NOT(IN($0, {
LogicalAggregate(group=[{0}])
  LogicalProject(a=[$0])
    LogicalFilter(condition=[<($0, 3)])
      LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0])
+- LogicalJoin(condition=[OR(IS NULL($0), IS NULL($2), =($0, $2))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalAggregate(group=[{0}])
      +- LogicalProject(a=[$0])
         +- LogicalFilter(condition=[<($0, 3)])
            +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_Case1">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a > 10 THEN 1 ELSE 2 END) NOT IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[NOT(IN(CASE(>($0, 10), 1, 2), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[OR(IS NULL($4), =($3, $4))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(>($0, 10), 1, 2)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_Case2">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a NOT IN (SELECT 1 FROM t1) THEN 1 ELSE 2 END) NOT IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[NOT(IN(CASE(NOT(IN($0, {
LogicalProject(EXPR$0=[1])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
})), 1, 2), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[OR(IS NULL($4), =($3, $4))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(OR(=($3, 0), AND(IS NULL($6), >=($4, $3), IS NOT NULL($0))), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(EXPR$0=[1])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(EXPR$0=[1], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_Case3">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a NOT IN (SELECT i FROM t1) THEN 1 ELSE 2 END) NOT IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[NOT(IN(CASE(NOT(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
})), 1, 2), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[OR(IS NULL($4), =($3, $4))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(OR(=($3, 0), AND(IS NULL($6), >=($4, $3), IS NOT NULL($0))), 1, 2)])
      :  +- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(i=[$0])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(i=[$0], i0=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_Case4">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (CASE WHEN a NOT IN (SELECT i FROM t1) THEN 1 WHEN a NOT IN (SELECT j FROM t2) THEN 2 ELSE 3 END) NOT IN (SELECT d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[NOT(IN(CASE(NOT(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
})), 1, NOT(IN($0, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
})), 2, 3), {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[OR(IS NULL($4), =($3, $4))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(OR(=($3, 0), AND(IS NULL($6), >=($4, $3), IS NOT NULL($0))), 1, OR(=($7, 0), AND(IS NULL($10), >=($8, $7), IS NOT NULL($0))), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$0])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_Case5">
    <Resource name="sql">
      <![CDATA[SELECT b FROM l WHERE (b, (CASE WHEN a NOT IN (SELECT i FROM t1) THEN 1 WHEN a NOT IN (SELECT j FROM t2) THEN 2 ELSE 3 END)) NOT IN (SELECT e, d FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalFilter(condition=[NOT(IN($1, CASE(NOT(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
})), 1, NOT(IN($0, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
})), 2, 3), {
LogicalProject(e=[$1], d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(b=[$1])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(OR(IS NULL($1), IS NULL($4), =($1, $4)), OR(IS NULL($5), =($3, $5)))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(OR(=($3, 0), AND(IS NULL($6), >=($4, $3), IS NOT NULL($0))), 1, OR(=($7, 0), AND(IS NULL($10), >=($8, $7), IS NOT NULL($0))), 2, 3)])
      :  +- LogicalJoin(condition=[=($0, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$0])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      +- LogicalProject(e=[$1], d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_Case6">
    <Resource name="sql">
      <![CDATA[SELECT c FROM l WHERE ( (CASE WHEN a NOT IN (SELECT i FROM t1) THEN 1 ELSE 2 END),  (CASE WHEN b NOT IN (SELECT j FROM t2) THEN 3 ELSE 4 END))  NOT IN (SELECT d, e FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalFilter(condition=[NOT(IN(CASE(NOT(IN($0, {
LogicalProject(i=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
})), 1, 2), CASE(NOT(IN($1, {
LogicalProject(j=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
})), 3, 4), {
LogicalProject(d=[$0], e=[$1])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(OR(IS NULL($5), =($3, $5)), OR(IS NULL($6), =($4, $6)))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[CASE(OR(=($3, 0), AND(IS NULL($6), >=($4, $3), IS NOT NULL($0))), 1, 2)], $f4=[CASE(OR(=($7, 0), AND(IS NULL($10), >=($8, $7), IS NOT NULL($1))), 3, 4)])
      :  +- LogicalJoin(condition=[=($1, $9)], joinType=[left])
      :     :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :- LogicalJoin(condition=[=($0, $5)], joinType=[left])
      :     :  :  :- LogicalJoin(condition=[true], joinType=[inner])
      :     :  :  :  :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      :     :  :  :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :  :  :     +- LogicalProject(i=[$0])
      :     :  :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  :  +- LogicalAggregate(group=[{0, 1}])
      :     :  :     +- LogicalProject(i=[$0], i0=[true])
      :     :  :        +- LogicalTableScan(table=[[default_catalog, default_database, t1, source: [TestTableSource(i)]]])
      :     :  +- LogicalAggregate(group=[{}], c=[COUNT()], ck=[COUNT($0)])
      :     :     +- LogicalProject(j=[$0])
      :     :        +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      :     +- LogicalAggregate(group=[{0, 1}])
      :        +- LogicalProject(j=[$0], i=[true])
      :           +- LogicalTableScan(table=[[default_catalog, default_database, t2, source: [TestTableSource(j)]]])
      +- LogicalProject(d=[$0], e=[$1])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_ComplexCondition2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE NOT (a IN (SELECT d FROM r))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN($0, {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[OR(IS NULL($0), IS NULL($3), =($0, $3))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_ComplexCondition3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE NOT ( NOT ( a NOT IN (SELECT d FROM r)))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN($0, {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[OR(IS NULL($0), IS NULL($3), =($0, $3))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_ComplexCondition4">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE NOT (a IN (SELECT d FROM r) OR b > 10)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(NOT(IN($0, {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})), NOT(>($1, 10)))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[<=($1, 10)])
   +- LogicalJoin(condition=[OR(IS NULL($0), IS NULL($3), =($0, $3))], joinType=[anti])
      :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_ComplexCondition5">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE b > 10 AND (c like 'abc' AND a NOT IN (SELECT d FROM r))]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), LIKE($2, _UTF-16LE'abc'), NOT(IN($0, {
LogicalProject(d=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
})))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[AND(>($1, 10), LIKE($2, _UTF-16LE'abc'))])
   +- LogicalJoin(condition=[OR(IS NULL($0), IS NULL($3), =($0, $3))], joinType=[anti])
      :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_ComplexCondition6">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE (a NOT IN (SELECT c FROM y)) IS TRUE]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[IS TRUE(NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})))])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[OR(IS NULL($0), IS NULL($2), =($0, $2))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_ComplexCondition7">
    <Resource name="sql">
      <![CDATA[SELECT * FROM x WHERE (a NOT IN (SELECT c FROM y) = TRUE)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalFilter(condition=[=(NOT(IN($0, {
LogicalProject(c=[$0])
  LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
})), true)])
   +- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1])
+- LogicalJoin(condition=[OR(IS NULL($0), IS NULL($2), =($0, $2))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b)]]])
   +- LogicalProject(c=[$0])
      +- LogicalTableScan(table=[[default_catalog, default_database, y, source: [TestTableSource(c, d)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_MultiFields1">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a, c) NOT IN (SELECT d, f FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN($0, $2, {
LogicalProject(d=[$0], f=[$2])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalJoin(condition=[AND(OR(IS NULL($0), IS NULL($3), =($0, $3)), OR(IS NULL($2), IS NULL($4), =($2, $4)))], joinType=[anti])
   :- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
   +- LogicalProject(d=[$0], f=[$2])
      +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_MultiFields2">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a + 1, c) NOT IN (SELECT d, f FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN(+($0, 1), $2, {
LogicalProject(d=[$0], f=[$2])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(OR(IS NULL($3), IS NULL($4), =($3, $4)), OR(IS NULL($2), IS NULL($5), =($2, $5)))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 1)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(d=[$0], f=[$2])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
  <TestCase name="testNotInWithUncorrelatedOnWhere_MultiFields3">
    <Resource name="sql">
      <![CDATA[SELECT * FROM l WHERE (a + 10, TRIM(c)) NOT IN (SELECT d + 100, SUBSTRING(f, 1, 5) FROM r)]]>
    </Resource>
    <Resource name="planBefore">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalFilter(condition=[NOT(IN(+($0, 10), TRIM(FLAG(BOTH), _UTF-16LE' ', $2), {
LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)])
  LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
}))])
   +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
]]>
    </Resource>
    <Resource name="planAfter">
      <![CDATA[
LogicalProject(a=[$0], b=[$1], c=[$2])
+- LogicalProject(a=[$0], b=[$1], c=[$2])
   +- LogicalJoin(condition=[AND(OR(IS NULL($3), IS NULL($5), =($3, $5)), OR(IS NULL($4), IS NULL($6), =($4, $6)))], joinType=[anti])
      :- LogicalProject(a=[$0], b=[$1], c=[$2], $f3=[+($0, 10)], $f4=[TRIM(FLAG(BOTH), _UTF-16LE' ', $2)])
      :  +- LogicalTableScan(table=[[default_catalog, default_database, l, source: [TestTableSource(a, b, c)]]])
      +- LogicalProject(EXPR$0=[+($0, 100)], EXPR$1=[SUBSTRING($2, 1, 5)])
         +- LogicalTableScan(table=[[default_catalog, default_database, r, source: [TestTableSource(d, e, f)]]])
]]>
    </Resource>
  </TestCase>
</Root>
