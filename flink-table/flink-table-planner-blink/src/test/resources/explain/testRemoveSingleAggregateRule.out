== Abstract Syntax Tree ==
LogicalProject(EXPR$0=[$SCALAR_QUERY({
LogicalProject(EXPR$0=[-($0, 1)])
  LogicalAggregate(group=[{}], agg#0=[COUNT($0)])
    LogicalProject(x=[$0])
      LogicalFilter(condition=[=($1, $cor0.i)])
        LogicalTableScan(table=[[default_catalog, default_database, foo, source: [CollectionTableSource(x, y)]]])
})])
+- LogicalTableScan(table=[[default_catalog, default_database, bar, source: [CollectionTableSource(i, s)]]])

== Optimized Physical Plan ==
Calc(select=[-(CASE(IS NULL($f1), 0:BIGINT, $f1), 1) AS EXPR$0])
+- Join(joinType=[LeftOuterJoin], where=[=(i, y)], select=[i, y, $f1], leftInputSpec=[NoUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
   :- Exchange(distribution=[hash[i]])
   :  +- Calc(select=[i])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, bar, source: [CollectionTableSource(i, s)]]], fields=[i, s])
   +- Exchange(distribution=[hash[y]])
      +- GroupAggregate(groupBy=[y], select=[y, COUNT(x) AS $f1])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[x, y], where=[IS NOT NULL(y)])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, foo, source: [CollectionTableSource(x, y)]]], fields=[x, y])

== Optimized Execution Plan ==
Calc(select=[(CASE($f1 IS NULL, 0:BIGINT, $f1) - 1) AS EXPR$0])
+- Join(joinType=[LeftOuterJoin], where=[(i = y)], select=[i, y, $f1], leftInputSpec=[NoUniqueKey], rightInputSpec=[JoinKeyContainsUniqueKey])
   :- Exchange(distribution=[hash[i]])
   :  +- Calc(select=[i])
   :     +- LegacyTableSourceScan(table=[[default_catalog, default_database, bar, source: [CollectionTableSource(i, s)]]], fields=[i, s])
   +- Exchange(distribution=[hash[y]])
      +- GroupAggregate(groupBy=[y], select=[y, COUNT(x) AS $f1])
         +- Exchange(distribution=[hash[y]])
            +- Calc(select=[x, y], where=[y IS NOT NULL])
               +- LegacyTableSourceScan(table=[[default_catalog, default_database, foo, source: [CollectionTableSource(x, y)]]], fields=[x, y])
