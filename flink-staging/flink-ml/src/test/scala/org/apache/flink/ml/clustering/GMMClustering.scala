/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.flink.ml.clustering

import breeze.linalg.{DenseVector, DenseMatrix}

/**
 * Created by shakirullah on 6/4/15.
 */
object GMMClustering{

  //Data set generated by following commented code
  /*val g1= breeze.stats.distributions.Gaussian(0.1,0.1)
   val g2=breeze.stats.distributions.Gaussian(0.5,0.1)
   val g3= breeze.stats.distributions.Gaussian(0.5,0.1)
   val g4=breeze.stats.distributions.Gaussian(1,0.1)
   for(i<-1 to 100){
     if(i<=30)
     println(Points(i,DenseVector(g1.sample(),g2.sample()))+",")
     else
     println(Points(i,DenseVector(g3.sample(),g4.sample()))+",")
   }
 }*/

  //Training data set
  val trainingData=Seq[Points](Points(1,DenseVector(0.3852122978540329, 0.4261590585839684)),
    Points(2,DenseVector(0.15622541472821594, 0.48875234065562)),
    Points(3,DenseVector(0.1509861827661069, 0.5994797479090257)),
    Points(4,DenseVector(0.20153764133360516, 0.6281917529757239)),
    Points(5,DenseVector(0.18639413754675518, 0.4598361909752715)),
    Points(6,DenseVector(0.3720331289601416, 0.4968720500299068)),
    Points(7,DenseVector(0.23121717845655368, 0.571490282886548)),
    Points(8,DenseVector(0.04479177102836638, 0.5491853677900429)),
    Points(9,DenseVector(0.2105142010395672, 0.4523769950794994)),
    Points(10,DenseVector(0.036759433749481984, 0.43583064226273105)),
    Points(11,DenseVector(-0.11124458130685017, 0.5468116824269245)),
    Points(12,DenseVector(0.06963041610275165, 0.346912767190038)),
    Points(13,DenseVector(0.15007701005315705, 0.3754375607451246)),
    Points(14,DenseVector(0.3707315423516486, 0.3750137868506496)),
    Points(15,DenseVector(0.06558434726823212, 0.2732710482729117)),
    Points(16,DenseVector(0.03548384368233268, 0.44342435640121447)),
    Points(17,DenseVector(0.07723912933381995, 0.5277321224114762)),
    Points(18,DenseVector(0.23454979374394228, 0.4166002556060642)),
    Points(19,DenseVector(0.12464338220122516, 0.6979101970643368)),
    Points(20,DenseVector(-0.12275230788633187, 0.5300407220611109)),
    Points(21,DenseVector(0.20936596529981355, 0.3763367561406155)),
    Points(22,DenseVector(0.18088181777223963, 0.4643910306718743)),
    Points(23,DenseVector(0.10120826025400767, 0.43646674039251526)),
    Points(24,DenseVector(0.04233983848746812, 0.45011641510346545)),
    Points(25,DenseVector(-0.062086360032152677, 0.5469145303630408)),
    Points(26,DenseVector(0.11963813368215322, 0.3161943769198149)),
    Points(35,DenseVector(0.6605927194780058, 1.0401426145617652)),
    Points(36,DenseVector(0.5316822794730696, 0.9720201740877538)),
    Points(37,DenseVector(0.40099743321233355, 1.1936037402550315)),
    Points(38,DenseVector(0.4348691255171796, 0.9307559183402934)),
    Points(39,DenseVector(0.5587092304849035, 1.0492915849111175)),
    Points(40,DenseVector(0.4536332573291306, 1.0093391662563895)),
    Points(41,DenseVector(0.5366949207385124, 0.8478504389326948)),
    Points(42,DenseVector(0.4818595210849981, 1.0669630179206469)),
    Points(43,DenseVector(0.609349181155387, 0.9184920155945158)),
    Points(44,DenseVector(0.4573404814721994, 1.1672030535919036)),
    Points(45,DenseVector(0.45251619409666666, 0.8884086544192653)),
    Points(46,DenseVector(0.525347676676427, 1.1209646292586022)),
    Points(47,DenseVector(0.635077968682893, 1.0705348301704565)),
    Points(48,DenseVector(0.5771205360980141, 0.985834610142529)),
    Points(49,DenseVector(0.5426826657483966, 1.1422140859972971)),
    Points(50,DenseVector(0.4078419383578032, 0.9338347762318813)),
    Points(51,DenseVector(0.4778879344587532, 1.1099095889874342)),
    Points(52,DenseVector(0.49152205414468436, 1.1085827975618066)),
    Points(53,DenseVector(0.5208238784699183, 1.0015099621441437)),
    Points(54,DenseVector(0.6551998828059187, 1.0406709199790045)),
    Points(55,DenseVector(0.5809354817834232, 0.9383019940738271)),
    Points(56,DenseVector(0.5791416690478501, 1.1390817904696555)),
    Points(57,DenseVector(0.45082169502799807, 1.0059231955421208)),
    Points(58,DenseVector(0.5259166123082564, 0.7981938283888546)),
    Points(59,DenseVector(0.6178021649575073, 1.022636048016455)),
    Points(60,DenseVector(0.5348902157591567, 0.8468986658179518)),
    Points(61,DenseVector(0.46844482212662186, 1.1560146692296824)),
    Points(62,DenseVector(0.48087873800607217, 0.976515858378227)),
    Points(63,DenseVector(0.46509104482935754, 0.918169201212226)),
    Points(64,DenseVector(0.4044811136316016, 1.1069359389598528)),
    Points(65,DenseVector(0.6221317277772537, 0.9957153744011611)),
    Points(66,DenseVector(0.4421184606904097, 1.0766860231123645)),
    Points(67,DenseVector(0.514007576773677, 0.9041944990772872)),
    Points(68,DenseVector(0.7766383024894312, 0.9431437964186767)),
    Points(69,DenseVector(0.5677640014181149, 1.0863878939811802)),
    Points(70,DenseVector(0.471272535735672, 0.8449646618323996)),
    Points(71,DenseVector(0.6084380260358251, 1.0778401843150998)),
    Points(72,DenseVector(0.46006885370028733, 0.944391501161667)),
    Points(73,DenseVector(0.4683934768258297, 1.038563207398095)),
    Points(74,DenseVector(0.4592040057072345, 1.0859104425705013)),
    Points(75,DenseVector(0.6513565298248604, 1.241823956386913)),
    Points(76,DenseVector(0.5447199005648061, 0.8854347855771038)),
    Points(77,DenseVector(0.6597033527108883, 0.9287081031164355)),
    Points(78,DenseVector(0.6043163844410948, 1.2335697492176083)),
    Points(79,DenseVector(0.6562617195952238, 1.0884849631034852)),
    Points(80,DenseVector(0.6484581122218984, 1.0875075077434067)),
    Points(81,DenseVector(0.5650793411453526, 1.017602132511145)),
    Points(82,DenseVector(0.2596607001095935, 0.8796462156184095)),
    Points(83,DenseVector(0.45882972253030374, 1.089034930082011)),
    Points(84,DenseVector(0.5579315281881382, 0.9706604513552451)),
    Points(85,DenseVector(0.46774873005054984, 1.0206113248450894)),
    Points(86,DenseVector(0.4169627133180954, 1.1230949436743982)),
    Points(87,DenseVector(0.6364643587478533, 0.9616239975844443)),
    Points(88,DenseVector(0.32770456132494186, 1.0691991426181582)),
    Points(89,DenseVector(0.520101338894967, 0.9543029034360819)),
    Points(90,DenseVector(0.4805483077673934, 1.1726760531428444)),
    Points(91,DenseVector(0.4496022505865825, 0.9310079839726911)),
    Points(92,DenseVector(0.3938188538682431, 1.1199818549150171)),
    Points(93,DenseVector(0.5974874394689639, 0.7360629333806235)),
    Points(94,DenseVector(0.41531368717372014, 1.0667809326469218)),
    Points(95,DenseVector(0.6109213385834822, 1.025054540754684)),
    Points(96,DenseVector(0.4004441851147493, 0.9466555150221813)),
    Points(97,DenseVector(0.40465623150469776, 0.9210834897837429)),
    Points(98,DenseVector(0.45651251232709944, 0.9068309029891848)),
    Points(99,DenseVector(0.3535886757568042, 1.0330639867874738)),
    Points(100,DenseVector(0.7195617525708435, 1.0515571058774453)))

  //Testing data set
  val testingData=Seq[Points](Points(27,DenseVector(0.1003245768204473, 0.5749045740668257)),
    Points(28,DenseVector(0.09310503176733584, 0.3918693749648737)),
    Points(29,DenseVector(0.05982823712077542, 0.5216146499808236)),
    Points(30,DenseVector(0.04157101429021243, 0.5883688970992932)),
    Points(31,DenseVector(0.53920900780184, 0.9740961219504535)),
    Points(32,DenseVector(0.6487902456687098, 0.9371269184272826)),
    Points(33,DenseVector(0.3065111094898886, 0.9843227777163573)),
    Points(34,DenseVector(0.40320620374225563, 1.0536666878404173)))
  val initialGaussians=Seq[Gaussians]( Gaussians(
    1,
    1.0/2.0,
    DenseVector(0.02,0.102),
    DenseMatrix.rand(2, 2)),
    Gaussians(
      2,
      1.0/2.0,
      DenseVector(0.1,0.6),
      DenseMatrix.rand(2, 2))
  )
  val expectedGaussians=Seq[Gaussians](Gaussians(1,
    0.282611927548245,
    DenseVector(0.13311794273855432, 0.47045991161117073),
    DenseMatrix((0.01657324006550823,-0.0018972607225221788),
      (-0.0018972607225221788,0.009349218628036476))),
    Gaussians(2,
      0.717388072451755,
      DenseVector(0.5176962589114168, 1.0146455854676582),
      DenseMatrix((0.009515230430547972,2.2362357680738576E-4),
        (2.2362357680738576E-4,0.01084667802613093)))
  )
  val expectedPrediction=Seq[Prediction](Prediction(1,27,0.9999997390214611),
    Prediction(1,28,0.9999999999591649),
    Prediction(1,29,0.9999999960388338),
    Prediction(1,30,0.9999999561759098),
    Prediction(1,31,1.6516806351600267E-10),
    Prediction(1,32,1.137603883254449E-10),
    Prediction(1,33,1.7996103910482122E-7),
    Prediction(1,34,6.596278458059248E-11),
    Prediction(2,27,2.6097853888697853E-7),
    Prediction(2,28,4.083514289772442E-11),
    Prediction(2,29,3.961166265802854E-9),
    Prediction(2,30,4.3824090186072695E-8),
    Prediction(2,31,0.9999999998348319),
    Prediction(2,32,0.9999999998862397),
    Prediction(2,33,0.9999998200389608),
    Prediction(2,34,0.9999999999340372)
  )
}
