# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

parameters:
  test_pool_definition: # defines the hardware pool for compilation and unit test execution.
  e2e_pool_definion: # defines the hardware pool for end-to-end test execution
  stage_name: # defines a unique identifier for all jobs in a stage (in case the jobs are added multiple times to a stage)
  environment: # defines environment variables for downstream scripts

jobs:
- job: compile_${{parameters.stage_name}}
  condition: not(eq(variables['MODE'], 'e2e'))
  pool: ${{parameters.test_pool_definition}}
  container: flink-build-container
  timeoutInMinutes: 240
  cancelTimeoutInMinutes: 1
  workspace:
    clean: all # this cleans the entire workspace directory before running a new job
    # It is necessary because the custom build machines are reused for tests.
    # See also https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml#workspace 

  steps:
  # The cache task is persisting the .m2 directory between builds, so that
  # we do not have to re-download all dependencies from maven central for 
  # each build. The hope is that downloading the cache is faster than
  # all dependencies individually.
  # In this configuration, we use a hash over all committed (not generated) .pom files 
  # as a key for the build cache (CACHE_KEY). If we have a cache miss on the hash
  # (usually because a pom file has changed), we'll fall back to a key without
  # the pom files (CACHE_FALLBACK_KEY).
  # Offical documentation of the Cache task: https://docs.microsoft.com/en-us/azure/devops/pipelines/caching/?view=azure-devops
  - task: Cache@2
    inputs:
      key: $(CACHE_KEY)
      restoreKeys: $(CACHE_FALLBACK_KEY)
      path: $(MAVEN_CACHE_FOLDER)
    continueOnError: true # continue the build even if the cache fails.
    displayName: Cache Maven local repo

  # Compile
  - script: STAGE=compile ${{parameters.environment}} ./tools/azure_controller.sh compile
    displayName: Build

  # upload artifacts for next stage
  - task: PublishPipelineArtifact@1
    inputs:
      path: $(CACHE_FLINK_DIR)
      artifact: FlinkCompileCacheDir-${{parameters.stage_name}}

- job: test_${{parameters.stage_name}}
  dependsOn: compile_${{parameters.stage_name}}
  condition: not(eq(variables['MODE'], 'e2e'))
  pool: ${{parameters.test_pool_definition}}
  container: flink-build-container
  timeoutInMinutes: 240
  cancelTimeoutInMinutes: 1
  workspace:
    clean: all
  strategy:
    matrix:
      core:
        module: core
      python:
        module: python
      libraries:
        module: libraries
      blink_planner:
        module: blink_planner
      connectors:
        module: connectors
      kafka_gelly:
        module: kafka/gelly
      tests:
        module: tests
      legacy_scheduler_core:
        module: legacy_scheduler_core
      legacy_scheduler_tests:
        module: legacy_scheduler_tests
      misc:
        module: misc
  steps:

  # download artifacts
  - task: DownloadPipelineArtifact@2
    inputs:
      path: $(CACHE_FLINK_DIR)
      artifact: FlinkCompileCacheDir-${{parameters.stage_name}}

  # recreate "build-target" symlink for python tests
  - script: |
      ln -snf $(CACHE_FLINK_DIR)/flink-dist/target/flink-*-SNAPSHOT-bin/flink-*-SNAPSHOT $(CACHE_FLINK_DIR)/build-target
    displayName: Recreate 'build-target' symlink
  # Test
  - script: STAGE=test ${{parameters.environment}} ./tools/azure_controller.sh $(module)
    displayName: Test - $(module)

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'

- job: precommit_${{parameters.stage_name}}
  dependsOn: compile_${{parameters.stage_name}}
  # We are not running this job on a container, but in a VM.
  pool: ${{parameters.e2e_pool_definition}}
  timeoutInMinutes: 240
  cancelTimeoutInMinutes: 1
  workspace:
    clean: all
  steps:
    - task: Cache@2
      inputs:
        key: $(CACHE_KEY)
        restoreKeys: $(CACHE_FALLBACK_KEY)
        path: $(MAVEN_CACHE_FOLDER)
      displayName: Cache Maven local repo
    
    # download artifacts
    - task: DownloadPipelineArtifact@2
      inputs:
        path: $(CACHE_FLINK_DIR)
        artifact: FlinkCompileCacheDir-${{parameters.stage_name}}
    - script: ./tools/travis/setup_maven.sh
    - script: ./tools/azure-pipelines/prepare_precommit.sh
      displayName: prepare and build Flink
    - script: FLINK_DIR=build-target ./flink-end-to-end-tests/run-pre-commit-tests.sh
      displayName: Test - precommit 

- job: e2e_${{parameters.stage_name}}
  condition: eq(variables['MODE'], 'e2e')
  # We are not running this job on a container, but in a VM.
  pool: ${{parameters.e2e_pool_definition}}
  timeoutInMinutes: 240
  cancelTimeoutInMinutes: 1
  workspace:
    clean: all
  steps:
    - task: Cache@2
      inputs:
        key: $(CACHE_KEY)
        restoreKeys: $(CACHE_FALLBACK_KEY)
        path: $(MAVEN_CACHE_FOLDER)
      displayName: Cache Maven local repo
    - script: ./tools/travis/setup_maven.sh
    - script: ./tools/azure-pipelines/setup_kubernetes.sh
    - script: M2_HOME=/home/vsts/maven_cache/apache-maven-3.2.5/ PATH=/home/vsts/maven_cache/apache-maven-3.2.5/bin:$PATH PROFILE="-Dinclude-hadoop -Dhadoop.version=2.8.3 -De2e-metrics -Dmaven.wagon.http.pool=false" STAGE=compile ./tools/azure_controller.sh compile
      displayName: Build
    - script: FLINK_DIR=`pwd`/build-target flink-end-to-end-tests/run-nightly-tests.sh
      displayName: Run nightly e2e tests

