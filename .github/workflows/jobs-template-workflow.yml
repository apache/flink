# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Reusable workflow example"

on:
  workflow_call:
    inputs:
      stage_name:
        description: "defines a unique identifier for all jobs in a stage (in case the jobs are added multiple times to a stage)"
        required: true
        type: string
      environment:
        description: "defines environment variables for downstream scripts"
        required: true
        type: string
      jdk:
        description: "the jdk version to use"
        required: true
        type: number
      mode:
        description: "mode of execution. Can be nightly, e2e, release"
        required: true
        type: string
    secrets:
      s3_bucket:
        required: true
      s3_access_key:
        required: true
      s3_secret_key:
        required: true
      glue_schema_access_key:
        required: true
      glue_schema_secret_key:
        required: true

env:
  FLINK_ARTIFACT_DIR: ${{ github.workspace }}/flink_artifacts
  MAVEN_REPOSITORY_DIR: ${{ github.workspace }}/.m2/repository
  DOCKER_IMAGES_CACHE_FOLDER: ${{ github.workspace }}/.docker-cache

jobs:
  compile:
    name: "compile_${{ inputs.stage_name }}"
    runs-on: ubuntu-latest #${{parameters.test_pool_definition}}
    if: ${{ success() && inputs.mode != 'e2e' }}
    timeout-minutes: 240 #cancelTimeoutInMinutes: 1 ???
    steps:
      - name: "Checks out Flink"
        uses: actions/checkout@v2

      - name: "Set up Maven" #and SSL??? This replaces the container from the original yml
        uses: stCarolas/setup-maven@v4.2
        with:
          maven-version: 3.2.5

      # The cache task is persisting the .m2 directory between builds, so that
      # we do not have to re-download all dependencies from maven central for
      # each build. The hope is that downloading the cache is faster than
      # all dependencies individually.
      # In this configuration, we use a hash over all committed (not generated) .pom files
      # as a key for the build cache (CACHE_KEY). If we have a cache miss on the hash
      # (usually because a pom file has changed), we'll fall back to a key without
      # the pom files (CACHE_FALLBACK_KEY).
      - name: "Cache Maven local repo"
        if: ${{ inputs.test_pool_name != 'Default' }}
        uses: actions/cache@v2
        with:
          path: ${{ env.MAVEN_REPOSITORY_DIR }}
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml', '!**/target/**') }}
          restore-keys: maven-${{ runner.os }}

      # see https://github.com/actions/setup-java#supported-distributions
      - name: "Set JDK ${{ inputs.jdk }}"
        uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: ${{ inputs.jdk }}

      - name: "Compile Flink"
        run: |
          ${{ inputs.environment }} ./tools/ci/compile.sh || exit $?

      - name: "Collect build artifacts to ${{ env.FLINK_ARTIFACT_DIR }}"
        run: ./tools/azure-pipelines/create_build_artifact.sh

      # upload artifacts for next stage
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: FlinkCompileArtifact-${{ inputs.stage_name }}
          path: ${{ env.FLINK_ARTIFACT_DIR }}

  test:
    name: "Test (stage: ${{ inputs.stage_name }}; module: ${{ matrix.module }})"
    needs: compile
    runs-on: ubuntu-20.04
    if: ${{ success() && inputs.mode != 'e2e' }}
    timeout-minutes: 240 #cancelTimeoutInMinutes: 1 ???
    strategy:
      matrix:
        module:
          - core
          - python
          - libraries
          - table
          - connectors
          - kafka/gelly
          - tests
          - misc
          - finegrained_resource_management

    steps:
      - name: "Checks out Flink"
        uses: actions/checkout@v2

      - name: "Set up Maven" #and SSL??? This replaces the container from the original yml
        uses: stCarolas/setup-maven@v4.2
        with:
          maven-version: 3.2.5

      # see https://github.com/actions/setup-java#supported-distributions
      - name: "Set JDK ${{ inputs.jdk }}"
        uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: ${{ inputs.jdk }}

      # download artifact from compile stage
      - name: "Download pipeline artifact"
        uses: actions/download-artifact@v2
        with:
          name: FlinkCompileArtifact-${{ inputs.stage_name }}
          path: ${{ env.FLINK_ARTIFACT_DIR }}

      - name: "Unpack Build artifact from ${{ env.FLINK_ARTIFACT_DIR }}"
        run: ./tools/azure-pipelines/unpack_build_artifact.sh

      - name: "Cache Maven local repo"
        if: ${{ inputs.test_pool_name != 'Default' }}
        uses: actions/cache@v2
        with:
          path: ${{ env.MAVEN_REPOSITORY_DIR }}
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml', '!**/target/**') }}
          restore-keys: maven-${{ runner.os }}

      - name: "Cache Docker images"
        id: docker-cache
        if: ${{ inputs.test_pool_name != 'Default' }}
        uses: actions/cache@v2
        with:
          path: ${{ env.DOCKER_IMAGES_CACHE_FOLDER }}
          key: ${{ matrix.module }}-docker-${{ runner.os }}-${{ hashFiles('**/cache_docker_images.sh', 'flink-test-utils-parent/**/DockerImageVersions.java') }}
          restore-keys: ${{ matrix.module }}-docker-${{ runner.os }}

      - name: "Load Docker images if not present in the cache folder ${{ env.DOCKER_IMAGES_CACHE_FOLDER }}, yet"
        if: ${{ cancelled() && !steps.docker-cache.cache.hit }}
        run: ./tools/azure-pipelines/cache_docker_images.sh -f ${{ env.DOCKER_IMAGES_CACHE_FOLDER }} load

      - name: "Set coredump pattern"
        run: sudo sysctl -w kernel.core_pattern=core.%p

      - name: "Test - ${{ matrix.module }}"
        id: test-run
        env:
          IT_CASE_S3_BUCKET: ${{ secrets.s3_bucket }}
          IT_CASE_S3_ACCESS_KEY: ${{ secrets.s3_access_key }}
          IT_CASE_S3_SECRET_KEY: ${{ secrets.s3_secret_key }}
          IT_CASE_GLUE_SCHEMA_ACCESS_KEY: ${{ secrets.glue_schema_access_key }}
          IT_CASE_GLUE_SCHEMA_SECRET_KEY: ${{ secrets.glue_schema_secret_key }}
        run: |
          ${{ inputs.environment }} ./tools/azure-pipelines/uploading_watchdog.sh \
              -a ${{ github.job }} \
              -t ${{ runner.temp }} \
              ./tools/ci/test_controller.sh ${{ matrix.module }}

      - name: "Publish Unit Test Results"
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: ${{ always() }}
        with:
          files: '**/TEST*.xml'

      - name: "Upload artifacts"
        uses: actions/upload-artifact@v2
        if: ${{ steps.test-run.outputs.debug-files-output-dir }} != ''
        with:
          name: logs-${{ inputs.stage_name }}-${{ steps.test-run.outputs.debug-files-name }}
          path: ${{ steps.test-run.outputs.debug-files-output-dir }}

      - name: "Save Docker images to cache from ${{ env.DOCKER_IMAGES_CACHE_FOLDER }}"
        if: ${{ !cancelled() && (failure() || !steps.docker-cache.cache.hit) }}
        run: ./tools/azure-pipelines/cache_docker_images.sh -f ${{ env.DOCKER_IMAGES_CACHE_FOLDER }} save
