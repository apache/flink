# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "E2E Test Run"

on:
  workflow_call:
    inputs:
      e2e_pool_definion:
        descrition: "Defines the hardware pool for end-to-end test execution"
        required: true
        type: string
      stage_name:
        description: "Defines a unique identifier for all jobs in a stage (in case the jobs are added multiple times to a stage)"
        required: true
        type: string
      environment:
        description: "Defines environment variables for downstream scripts"
        required: true
        type: string
      run_end_to_end:
        description: "If set to 'true', the end to end tests will be executed"
        required: true
        type: string
      jdk:
        description: "The jdk version to use"
        required: true
        type: string
      group:
        description: "The group of tests that should run"
        required: false
        type: number
    secrets:
      s3_bucket:
        required: true
      s3_access_key:
        required: true
      s3_secret_key:
        required: true
      glue_schema_access_key:
        required: true
      glue_schema_secret_key:
        required: true

env:
  MAVEN_CACHE_FOLDER: ${{ github.workspace }}/.m2/repository
  E2E_CACHE_FOLDER: ${{ github.workspace }}/.e2e-cache
  E2E_TARBALL_CACHE: ${{ github.workspace }}/.e2e-tarbal-cache
  DOCKER_IMAGES_CACHE_FOLDER: ${{ github.workspace }}/.docker-cache

jobs:
  e2e-prereq-check:
    name: "Check: Doc-only PR"
    runs-on: ubuntu-latest
    steps:
      # Skip e2e test execution if this is a documentation only pull request (master / release builds will still be checked regularly)
      - name: "Check if it's a docs-only PR (i.e. e2e tests can be skipped)"
        id: docs-only-pr-check
        run: |
          source ./tools/azure-pipelines/build_properties.sh
          if is_docs_only_pullrequest; then
            echo "This is a documentation-only change. Skipping e2e execution."
            echo "::set-output name=skip-e2e::true"
          else
            echo "This is a regular CI build. Continuing ..."
          fi
  e2e:
    name: "E2E Test Run"
    runs-on: ubuntu-latest
    needs: e2e-prereq-check
    if: ${{ needs.e2e-prereq-check.outputs.skip-e2e != "true" }}
    timeout-minutes: 310
    steps:
        - name: "Checks out Flink"
          uses: actions/checkout@v

        # the cache task does not create directories on a cache miss, and can later fail when trying to tar the directory if the test haven't created it
        # this may for example happen if a given directory is only used by a subset of tests, which are run in a different 'group'
        - name: "Create cache directories"
          run: |
            mkdir -p ${{ env.MAVEN_CACHE_FOLDER }}
            mkdir -p ${{ env.E2E_CACHE_FOLDER }}
            mkdir -p ${{ env.E2E_TARBALL_CACHE }}
            mkdir -p ${{ env.DOCKER_IMAGES_CACHE_FOLDER }}

        - name: "Cache Maven local repo"
          uses: actions/cache@v2
          inputs:
            path: ${{ env.MAVEN_CACHE_FOLDER }}
            key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml', '!**/target/**') }}
            restoreKeys: maven-${{ runner.os }}

        - name: "Cache E2E files"
          uses: actions/cache@v2
          inputs:
            path: ${{ env.E2E_CACHE_FOLDER }}
            key: e2e-cache-${{ inputs.group }}-${{ hashFiles('flink-end-to-end-tests/**/*.java', '!**/avro/**') }}

        - name: "Cache E2E artifacts"
          uses: actions/cache@v2
          inputs:
            path: ${{ env.E2E_TARBALL_CACHE }}
            key: e2e-artifact-cache-${{ inputs.group }}-${{ hashFiles('flink-end-to-end-tests/**/*.sh') }}
            restoreKeys: e2e-artifact-cache-${{ inputs.group }}

        - name: "Cache Docker images"
          id: docker-cache
          uses: actions/cache@v2
          inputs:
            path: ${{ env.DOCKER_IMAGES_CACHE_FOLDER }}
            key: e2e-${{ inputs.group }}-docker-${{ runner.os }}-${{ hashFiles('**/cache_docker_images.sh', 'flink-test-utils-parent/**/DockerImageVersions.java') }}

        - name: "Load Docker images if not present in cache, yet"
          if: ${{ !cancelled() && !steps.docker-cache.cache.hit }}
          run: ./tools/azure-pipelines/cache_docker_images.sh -f ${{ env.DOCKER_IMAGES_CACHE_FOLDER }} load

        # see https://github.com/actions/setup-java#supported-distributions
        - name: "Set JDK ${{ inputs.jdk }}"
          uses: actions/setup-java@v2
          with:
            distribution: "temurin"
            java-version: ${{ inputs.jdk }

        - name: "Set up Maven" #and SSL??? This replaces the container from the original yml
          uses: stCarolas/setup-maven@v4.2
          with:
            maven-version: 3.2.5

        - name: "Install required dependencies bc and libapr1"
          run: sudo apt-get install -y bc libapr1

        - name: "Install libssl1.0.0 for netty tcnative"
          run: |
            wget http://security.ubuntu.com/ubuntu/pool/main/o/openssl1.0/libssl1.0.0_1.0.2n-1ubuntu5.7_amd64.deb
            sudo apt install ./libssl1.0.0_1.0.2n-1ubuntu5.7_amd64.deb

        - name: "Free up disk space"
          run: ./tools/azure-pipelines/free_disk_space.sh

        - name: "Build Flink"
          run: ${{ inputs.environment }} PROFILE="$PROFILE -Dfast -Pskip-webui-build" ./tools/ci/compile.sh

        - name: "Run E2E Tests"
          id: test-run
          env:
            MAVEN_OPTS: " -Dmaven.repo.local=${{ env.MAVEN_REPOSITORY_DIR }}"
            IT_CASE_S3_BUCKET: ${{ secrets.s3_bucket }}
            IT_CASE_S3_ACCESS_KEY: ${{ secrets.s3_access_key }}
            IT_CASE_S3_SECRET_KEY: ${{ secrets.s3_secret_key }}
            IT_CASE_GLUE_SCHEMA_ACCESS_KEY: ${{ secrets.glue_schema_access_key }}
            IT_CASE_GLUE_SCHEMA_SECRET_KEY: ${{ secrets.glue_schema_secret_key }
          run: |
            ${{ inputs.environment }} FLINK_DIR=`pwd`/build-target ./tools/azure-pipelines/uploading_watchdog.sh \
              -a ${{ github.job }} \
              -t ${{ runner.temp }} \
              flink-end-to-end-tests/run-nightly-tests.sh ${{ inputs.group }}

        - name: "Upload Logs"
          uses: actions/upload-artifact@v2
          if: ${{ steps.test-run.outputs.debug-files-output-dir }} != ''
          with:
            name: logs-${{ inputs.stage_name }}-${{ steps.test-run.outputs.debug-files-name }}
            path: ${{ steps.test-run.outputs.debug-files-output-dir }}

        - name: "Save Docker images to cache"
          if: ${{ !cancelled() && (failure() || !steps.docker-cache.cache.hit) }}
          run: ./tools/azure-pipelines/cache_docker_images.sh -f ${{ env.DOCKER_IMAGES_CACHE_FOLDER }} save
